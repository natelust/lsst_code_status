# Comparison of the meas_algorithms repository


<div style="background-color:Aquamarine; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
<h1>Summary of Repositories</h1>
<p>
Comparison run at 02:12PM on June 09, 2015<br>
There are <b>1910</b> differences between the two repositories<br><br>
Repository <b>/Users/nate/repos_hsc/meas_algorithms/</b> <br> Revision <b>7569cdbd7f8c1833365d9c08be3cb573e3fb5929</b><br> Branch <b>master</b><br>Last commit was on <b>2015-05-27 13:09:42 -0400</b><br><br>
Repository <b>/Users/nate/repos_lsst/meas_algorithms/</b> <br> Revision <b>0c8b82d53b78e169833f030cebbe5e7fad487c8d</b><br> Branch <b>master</b><br>Last commit was on <b>2015-06-08 16:22:25 -0700</b><br><br>
</p>
</div>



___
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
<h1>Files only in /Users/nate/repos_hsc/meas_algorithms/</h1>
<h2>tests/ticket2019.py</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>doc/extraFiles/curveOfGrowth.pdf</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>tests/photometry.cc</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>doc/extraFiles/.gitignore</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>python/lsst/meas/algorithms/measureApCorr.py</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>include/lsst/meas/algorithms/SkyCoord.h</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>include/lsst/meas/algorithms/CorrectFluxes.h</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>doc/extraFiles/curveOfGrowth.tex</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>src/FocalPlane.cc</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>examples/apCorrDetermination.paf</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>src/PixelFlags.cc</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>examples/coeff.cc</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>include/lsst/meas/algorithms/FluxControl.h</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>tests/measureSources.py</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>python/lsst/meas/algorithms/CoaddBoundedField.i</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>tests/testApertureFlux.py</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>include/lsst/meas/algorithms/CoaddBoundedField.h</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>doc/extraFiles/composite_star.pdf</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>include/lsst/meas/algorithms/ApertureFlux.h</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>src/centroid/SdssCentroid.cc</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>tests/sillyCentroid.h</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>src/CoaddBoundedField.cc</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>python/lsst/meas/algorithms/measurement.py</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>src/flux/ApertureFlux.cc</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>tests/centroid.py</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>examples/measureSources.py</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>include/lsst/meas/algorithms/detail/SdssShape.h</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>src/flux/PeakLikelihoodFlux.cc</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>include/lsst/meas/algorithms/Photometry.h</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>python/lsst/meas/algorithms/measureCurveOfGrowth.py</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>tests/importCentroidAlgorithm.py</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>examples/centroid.cc</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>tests/negative.py</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>python/lsst/meas/algorithms/algorithmRegistry.py</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>include/lsst/meas/algorithms/BinnedWcs.h</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>src/centroid/RecordCentroid.cc</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>tests/apCorr.py</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>src/flux/GaussianFlux.cc</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>examples/measureSources.paf</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>python/lsst/meas/algorithms/replaceWithNoise.py</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>tests/shape.py</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>examples/growthcurve.cc</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>src/centroid/NaiveCentroid.cc</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>src/shape/SdssShape.cc</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>src/flux/PsfFlux.cc</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>tests/testAlgorithms.py</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>include/lsst/meas/algorithms/Classification.h</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>src/flux/EllipticalApertureFlux.cc</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>examples/drivers/ticket2019-subaru.py</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>include/lsst/meas/algorithms/Measure.h</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>src/CorrectFluxes.cc</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>examples/sincPhotEllipse.py</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>src/Jacobian.cc</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>examples/growthcurve.py</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>include/lsst/meas/algorithms/FocalPlane.h</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>src/Measure.cc</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>include/lsst/meas/algorithms/detail/SincPhotometry.h</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>src/BinnedWcs.cc</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>python/lsst/meas/algorithms/makeCoaddApCorrMap.py</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>examples/psfDetermination.paf</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>tests/testLib.i</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>src/flux/NaiveFlux.cc</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>tests/flux.py</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>tests/sincPhotSums.py</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>examples/psf.cc</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>src/centroid/all.h</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>include/lsst/meas/algorithms/Algorithm.h</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>include/lsst/meas/algorithms/ShapeControl.h</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>src/centroid/twodg.cc</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>tests/binnedWcs.py</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>tests/photometryWithoutPsf.py</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>tests/CoaddApCorrMap.py</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>examples/BadPixels.paf</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>examples/debugMeasurement.py</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>include/lsst/meas/algorithms/CentroidControl.h</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>include/lsst/meas/algorithms/PixelFlags.h</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>src/Classification.cc</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>include/lsst/meas/algorithms/RecordCentroid.h</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>src/SkyCoord.cc</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>src/flux/SincFlux.cc</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>src/centroid/GaussianCentroid.cc</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>include/lsst/meas/algorithms/GaussianFluxControl.h</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>include/lsst/meas/algorithms/Jacobian.h</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>include/lsst/meas/algorithms/SdssShapeControl.h</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>tests/testCurveOfGrowth.py</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
<h2>tests/testCoaddBoundedField.py</h2>
<pre>
commit 7569cdbd7f8c1833365d9c08be3cb573e3fb5929
Merge: 969f327 7c93811
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 27 13:09:42 2015 -0400

    Merge branch 'tickets/HSC-1263'</pre>
</div>

<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
<h1>Files only in /Users/nate/repos_lsst/meas_algorithms/</h1>
<h2>python/lsst/meas/algorithms/gaussianPsfFactory.py</h2>
<pre>
commit 0c8b82d53b78e169833f030cebbe5e7fad487c8d
Merge: d91c143 21af0bb
Author: Joshua Hoblitt <jhoblitt@cpan.org>
Date:   Mon Jun 8 16:22:25 2015 -0700

    Merge pull request #9 from lsst/tickets/DM-2636
    
    replace eups.productDir() calls with lsst.utils.getPackageDir()</pre>
<h2>tests/testLoadReferenceObjects.py</h2>
<pre>
commit 0c8b82d53b78e169833f030cebbe5e7fad487c8d
Merge: d91c143 21af0bb
Author: Joshua Hoblitt <jhoblitt@cpan.org>
Date:   Mon Jun 8 16:22:25 2015 -0700

    Merge pull request #9 from lsst/tickets/DM-2636
    
    replace eups.productDir() calls with lsst.utils.getPackageDir()</pre>
<h2>tests/testGaussianPsfFactory.py</h2>
<pre>
commit 0c8b82d53b78e169833f030cebbe5e7fad487c8d
Merge: d91c143 21af0bb
Author: Joshua Hoblitt <jhoblitt@cpan.org>
Date:   Mon Jun 8 16:22:25 2015 -0700

    Merge pull request #9 from lsst/tickets/DM-2636
    
    replace eups.productDir() calls with lsst.utils.getPackageDir()</pre>
<h2>doc/measAlgTasks-ds9.png</h2>
<pre>
commit 0c8b82d53b78e169833f030cebbe5e7fad487c8d
Merge: d91c143 21af0bb
Author: Joshua Hoblitt <jhoblitt@cpan.org>
Date:   Mon Jun 8 16:22:25 2015 -0700

    Merge pull request #9 from lsst/tickets/DM-2636
    
    replace eups.productDir() calls with lsst.utils.getPackageDir()</pre>
<h2>examples/measAlgTasks.py</h2>
<pre>
commit 0c8b82d53b78e169833f030cebbe5e7fad487c8d
Merge: d91c143 21af0bb
Author: Joshua Hoblitt <jhoblitt@cpan.org>
Date:   Mon Jun 8 16:22:25 2015 -0700

    Merge pull request #9 from lsst/tickets/DM-2636
    
    replace eups.productDir() calls with lsst.utils.getPackageDir()</pre>
<h2>python/lsst/meas/algorithms/loadReferenceObjects.py</h2>
<pre>
commit 0c8b82d53b78e169833f030cebbe5e7fad487c8d
Merge: d91c143 21af0bb
Author: Joshua Hoblitt <jhoblitt@cpan.org>
Date:   Mon Jun 8 16:22:25 2015 -0700

    Merge pull request #9 from lsst/tickets/DM-2636
    
    replace eups.productDir() calls with lsst.utils.getPackageDir()</pre>
</div>




# List of the files in common<a name="homelist"></a>
Files without links do not differ

* ```python/lsst/gdb/meas/algorithms/__init__.py```
* [```python/lsst/meas/algorithms/algorithmsLib.i```](#python/lsst/meas/algorithms/algorithmsLib.i)
* [```src/CoaddPsf.cc```](#src/CoaddPsf.cc)
* ```include/lsst/meas/algorithms/ExposurePatch.h```
* [```ups/meas_algorithms.table```](#ups/meas_algorithms.table)
* ```examples/SConscript```
* ```include/lsst/meas/algorithms/WarpedPsf.h```
* ```tests/SConscript```
* ```src/ImagePca.cc```
* [```include/lsst/meas/algorithms/ShapeletKernel.h```](#include/lsst/meas/algorithms/ShapeletKernel.h)
* ```.gitignore```
* ```src/SizeMagnitudeStarSelector.cc```
* [```tests/testDetection.py```](#tests/testDetection.py)
* [```tests/psfSelectTest.py```](#tests/psfSelectTest.py)
* [```tests/testPsfAttributes.py```](#tests/testPsfAttributes.py)
* ```src/shapelet/CrudeMeasure.cc```
* [```src/SingleGaussianPsf.cc```](#src/SingleGaussianPsf.cc)
* ```tests/testPsfCaching.cc```
* ```python/lsst/gdb/meas/algorithms/README```
* ```python/lsst/meas/algorithms/sizeMagnitudeStarSelectorFactory.py```
* ```python/lsst/meas/algorithms/coaddpsf.i```
* ```doc/mainpage.dox```
* [```include/lsst/meas/algorithms/ShapeletPsfCandidate.h```](#include/lsst/meas/algorithms/ShapeletPsfCandidate.h)
* [```src/shapelet/Ellipse_meas.cc```](#src/shapelet/Ellipse_meas.cc)
* ```include/lsst/meas/algorithms/shapelet/SizeMagnitudeStarSelectorAlgo.h```
* ```src/ShapeletKernel.cc```
* [```python/lsst/meas/algorithms/objectSizeStarSelector.py```](#python/lsst/meas/algorithms/objectSizeStarSelector.py)
* [```include/lsst/meas/algorithms/Interp.h```](#include/lsst/meas/algorithms/Interp.h)
* ```include/lsst/meas/algorithms/SpatialModelPsf.h```
* [```src/CR.cc```](#src/CR.cc)
* ```include/lsst/meas/algorithms/shapelet/Bounds.h```
* ```include/lsst/meas/algorithms/shapelet/fspd.h```
* [```tests/ticket2986.py```](#tests/ticket2986.py)
* ```python/lsst/meas/algorithms/defects.py```
* ```python/lsst/gdb/meas/__init__.py```
* [```python/lsst/meas/algorithms/psfSelectionFromMatchList.py```](#python/lsst/meas/algorithms/psfSelectionFromMatchList.py)
* ```python/lsst/meas/__init__.py```
* ```include/lsst/meas/algorithms/shapelet/Histogram.h```
* ```src/shapelet/EllipseSolver.cc```
* ```src/shapelet/PsiHelper.cc```
* ```python/lsst/meas/algorithms/WarpedPsf.i```
* ```include/lsst/meas/algorithms/shapelet/FittedPsf.h```
* [```src/WarpedPsf.cc```](#src/WarpedPsf.cc)
* ```python/lsst/gdb/meas/algorithms/printers.py```
* ```tests/sizeMagnitudeStarSelector.cc```
* ```include/lsst/meas/algorithms/shapelet/BinomFact.h```
* ```include/lsst/meas/algorithms/shapelet/NLSolver.h```
* ```python/lsst/meas/algorithms/starSelectorRegistry.py```
* ```src/shapelet/Pixel_omp.cc```
* ```include/lsst/meas/algorithms/shapelet/BVec.h```
* ```src/shapelet/SizeMagnitudeStarSelectorAlgo.cc```
* ```include/lsst/meas/algorithms/shapelet/ConfigFile.h```
* [```tests/psfIO.py```](#tests/psfIO.py)
* [```tests/Interp.py```](#tests/Interp.py)
* [```include/lsst/meas/algorithms/shapelet/Params.h```](#include/lsst/meas/algorithms/shapelet/Params.h)
* ```python/lsst/meas/algorithms/measureSourceUtils.py```
* [```include/lsst/meas/algorithms/DoubleGaussianPsf.h```](#include/lsst/meas/algorithms/DoubleGaussianPsf.h)
* [```tests/testDoubleGaussianPsf.py```](#tests/testDoubleGaussianPsf.py)
* ```include/lsst/meas/algorithms/ImagePsf.h```
* ```include/lsst/meas/algorithms/ImagePca.h```
* [```tests/testImagePsf.cc```](#tests/testImagePsf.cc)
* ```ups/meas_algorithms.build```
* ```src/KernelPsf.cc```
* ```include/lsst/meas/algorithms/shapelet/MyMatrix.h```
* ```src/shapelet/Histogram.cc```
* ```src/Shapelet.cc```
* [```python/lsst/meas/algorithms/pcaPsfDeterminer.py```](#python/lsst/meas/algorithms/pcaPsfDeterminer.py)
* [```python/lsst/meas/algorithms/utils.py```](#python/lsst/meas/algorithms/utils.py)
* [```tests/measure.py```](#tests/measure.py)
* ```include/lsst/meas/algorithms/shapelet/PsiHelper.h```
* ```src/shapelet/Function2D.cc```
* ```tests/Monet/positions.dat-original```
* [```python/lsst/meas/algorithms/__init__.py```](#python/lsst/meas/algorithms/__init__.py)
* ```include/lsst/meas/algorithms/shapelet/EllipseSolver.h```
* [```doc/doxygen.conf.in```](#doc/doxygen.conf.in)
* ```include/lsst/meas/algorithms/KernelPsf.h```
* ```include/lsst/meas/algorithms/SizeMagnitudeStarSelector.h```
* [```lib/libmeas_algorithms.so-gdb.py```](#lib/libmeas_algorithms.so-gdb.py)
* [```src/PcaPsf.cc```](#src/PcaPsf.cc)
* ```src/shapelet/FittedPsf.cc```
* [```tests/testPsf.h```](#tests/testPsf.h)
* ```src/shapelet/Bounds.cc```
* ```SConstruct```
* ```python/lsst/meas/algorithms/psfDeterminerRegistry.py```
* ```tests/config/MeasureSources.py```
* [```src/PsfCandidate.cc```](#src/PsfCandidate.cc)
* [```src/DoubleGaussianPsf.cc```](#src/DoubleGaussianPsf.cc)
* ```include/lsst/meas/algorithms/shapelet/PotentialStar.h```
* ```python/lsst/meas/algorithms/debugger.py```
* ```include/lsst/meas/algorithms/PsfCandidate.h```
* [```tests/cr.py```](#tests/cr.py)
* ```include/lsst/meas/algorithms/Shapelet.h```
* ```policy/BadPixels.paf```
* ```python/lsst/gdb/__init__.py```
* ```src/shapelet/BVec.cc```
* ```include/lsst/meas/algorithms/shapelet/Legendre2D.h```
* ```src/shapelet/Ellipse.cc```
* [```tests/testPsfDetermination.py```](#tests/testPsfDetermination.py)
* ```src/ShapeletInterpolation.cc```
* ```include/lsst/meas/algorithms/shapelet/Pixel.h```
* ```python/lsst/meas/algorithms/SConscript```
* [```lib/libmeas_algorithms.dylib-gdb.py```](#lib/libmeas_algorithms.dylib-gdb.py)
* [```tests/testWarpedPsf.cc```](#tests/testWarpedPsf.cc)
* [```include/lsst/meas/algorithms/PcaPsf.h```](#include/lsst/meas/algorithms/PcaPsf.h)
* ```doc/SConscript```
* ```include/lsst/meas/algorithms/shapelet/dbg.h```
* ```tests/testPsfCandidate.py```
* [```include/lsst/meas/algorithms/CoaddPsf.h```](#include/lsst/meas/algorithms/CoaddPsf.h)
* [```include/lsst/meas/algorithms.h```](#include/lsst/meas/algorithms.h)
* ```include/lsst/meas/algorithms/KernelPsfFactory.h```
* ```tests/psfAttributes.cc```
* ```include/lsst/meas/algorithms/ShapeletInterpolation.h```
* [```python/lsst/meas/algorithms/findCosmicRaysConfig.py```](#python/lsst/meas/algorithms/findCosmicRaysConfig.py)
* ```src/shapelet/Legendre2D.cc```
* [```python/lsst/meas/algorithms/detection.py```](#python/lsst/meas/algorithms/detection.py)
* [```include/lsst/meas/algorithms/SingleGaussianPsf.h```](#include/lsst/meas/algorithms/SingleGaussianPsf.h)
* [```src/SpatialModelPsf.cc```](#src/SpatialModelPsf.cc)
* ```tests/Monet/small.fits```
* [```ups/meas_algorithms.cfg```](#ups/meas_algorithms.cfg)
* [```python/lsst/meas/algorithms/testUtils.py```](#python/lsst/meas/algorithms/testUtils.py)
* [```src/ImagePsf.cc```](#src/ImagePsf.cc)
* [```tests/CoaddPsf.py```](#tests/CoaddPsf.py)
* ```src/shapelet/BinomFact_omp.cc```
* [```src/Interp.cc```](#src/Interp.cc)
* ```include/lsst/meas/algorithms/shapelet/Function2D.h```
* ```include/lsst/meas/algorithms/shapelet/Ellipse.h```
* [```include/lsst/meas/algorithms/shapelet/Form.h```](#include/lsst/meas/algorithms/shapelet/Form.h)
* ```lib/SConscript```
* ```python/lsst/__init__.py```
* [```src/shapelet/ConfigFile.cc```](#src/shapelet/ConfigFile.cc)
* ```include/lsst/meas/algorithms/PSF.h```
* ```src/shapelet/NLSolver.cc```
* ```src/shapelet/Pixel.cc```
* ```python/lsst/meas/algorithms/psf.i```
* ```src/shapelet/Params.cc```
* [```python/lsst/meas/algorithms/secondMomentStarSelector.py```](#python/lsst/meas/algorithms/secondMomentStarSelector.py)
* ```include/lsst/meas/algorithms/CR.h```
* [```src/PsfAttributes.cc```](#src/PsfAttributes.cc)

# <a name="python/lsst/meas/algorithms/algorithmsLib.i"/></a>python/lsst/meas/algorithms/algorithmsLib.i
### Diff:

<pre>
                // -*- lsst-c++ -*-
                
                /* 
                 * LSST Data Management System
                 * Copyright 2008, 2009, 2010 LSST Corporation.
                 * 
                 * This product includes software developed by the
                 * LSST Project (http://www.lsst.org/).
                 *
                 * This program is free software: you can redistribute it and/or modify
                 * it under the terms of the GNU General Public License as published by
                 * the Free Software Foundation, either version 3 of the License, or
                 * (at your option) any later version.
                 * 
                 * This program is distributed in the hope that it will be useful,
                 * but WITHOUT ANY WARRANTY; without even the implied warranty of
                 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                 * GNU General Public License for more details.
                 * 
                 * You should have received a copy of the LSST License Statement and 
                 * the GNU General Public License along with this program.  If not, 
                 * see <http://www.lsstcorp.org/LegalNotices/>.
                 */
                 
                %define meas_algorithmsLib_DOCSTRING
                "
                Python bindings for meas/algorithms module
                "
                %enddef
                
                %feature("autodoc", "1");
                %module(package="lsst.meas.algorithms",docstring=meas_algorithmsLib_DOCSTRING) algorithmsLib
                
                // Suppress swig complaints
                // I had trouble getting %warnfilter to work; hence the pragmas
                #pragma SWIG nowarn=362                 // operator=  ignored
                
                %{
                #   include <exception>
                #   include <list>
                #   include <map>
                #   include <boost/cstdint.hpp>
                #   include <boost/shared_ptr.hpp>
                #   include "lsst/pex/logging.h"
                #   include "lsst/pex/logging/BlockTimingLog.h"
                #   include "lsst/pex/logging/DualLog.h"
                #   include "lsst/pex/logging/ScreenLog.h"
                #   include "lsst/afw.h"
                #   include "lsst/afw/detection/Peak.h"
                #   include "lsst/afw/detection/Psf.h"
                #   include "lsst/afw/geom/ellipses.h"
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
52   <a href="#71ee71ad">71ee71ad</a> + #   include "lsst/afw/table.h"</div>
                #   include "lsst/meas/algorithms.h"
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
53   <a href="#57c04253">57c04253</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
54   <a href="#57c04253">57c04253</a> - #   define PY_ARRAY_UNIQUE_SYMBOL LSST_MEAS_ALGORITHMS_NUMPY_ARRAY_API</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
55   <a href="#57c04253">57c04253</a> - #   include "numpy/arrayobject.h"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
56   <a href="#5e78be5b">5e78be5b</a> - #   include "ndarray/swig.h"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
57   <a href="#5e78be5b">5e78be5b</a> - #   include "ndarray/swig/eigen.h"</div>
                
                #ifdef __clang__
                #pragma clang diagnostic ignored "-Warray-bounds"
                #endif
                %}
                
                namespace lsst { namespace meas { namespace algorithms { namespace interp {} namespace photometry {} } } }
                
                %include "lsst/p_lsstSwig.i"
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
63   <a href="#3caa2d28">3caa2d28</a> + %initializeNumPy(meas_algorithms)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
64   <a href="#3caa2d28">3caa2d28</a> + %{</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
65   <a href="#3caa2d28">3caa2d28</a> + #include "ndarray/swig.h"</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
66   <a href="#3caa2d28">3caa2d28</a> + #include "ndarray/swig/eigen.h"</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
67   <a href="#3caa2d28">3caa2d28</a> + %}</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
68   <a href="#3caa2d28">3caa2d28</a> + %include "ndarray.i"</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
69   <a href="#3caa2d28">3caa2d28</a> + </div>
                %include "lsst/base.h"                  // PTR(); should be in p_lsstSwig.i
                %include "lsst/pex/config.h"            // LSST_CONTROL_FIELD.
                %include "lsst/daf/base/persistenceMacros.i"
                
                %lsst_exceptions();
                
                %import "lsst/afw/geom/geomLib.i"
                %import "lsst/afw/geom/ellipses/ellipsesLib.i"
                %import "lsst/afw/image/imageLib.i"
                %import "lsst/afw/detection/detectionLib.i"
                %import "lsst/afw/math/mathLib.i"
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
78   <a href="#4d375e47">4d375e47</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
79   <a href="#5e78be5b">5e78be5b</a> - %include "ndarray.i"</div>
                
                /************************************************************************************************************/
                
                %include "psf.i"
                %include "coaddpsf.i"
                %include "lsst/meas/algorithms/CR.h"
                
                /************************************************************************************************************/
                
                %declareNumPyConverters(lsst::meas::algorithms::Shapelet::ShapeletVector)
                %declareNumPyConverters(lsst::meas::algorithms::Shapelet::ShapeletCovariance)
                
                %shared_ptr(lsst::meas::algorithms::Shapelet)
                %shared_ptr(lsst::meas::algorithms::ShapeletInterpolation)
                %shared_ptr(lsst::meas::algorithms::LocalShapeletKernel);
                %shared_ptr(lsst::meas::algorithms::ShapeletKernel);
                %shared_ptr(lsst::meas::algorithms::ShapeletPsfCandidate);
                %shared_vec(lsst::meas::algorithms::SizeMagnitudeStarSelector::PsfCandidateList);
                %shared_ptr(std::vector<lsst::meas::algorithms::SizeMagnitudeStarSelector::PsfCandidateList>);
                
                %include "lsst/meas/algorithms/Shapelet.h" // causes tons of numpy warnings; due to Eigen?
                %include "lsst/meas/algorithms/ShapeletInterpolation.h"
                %include "lsst/meas/algorithms/ShapeletKernel.h"
                %include "lsst/meas/algorithms/ShapeletPsfCandidate.h"
                %include "lsst/meas/algorithms/SizeMagnitudeStarSelector.h"
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
106  <a href="#b0d8591f">b0d8591f</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
107  <a href="#b0d8591f">b0d8591f</a> - %shared_ptr(lsst::meas::algorithms::Algorithm)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
108  <a href="#b0d8591f">b0d8591f</a> - %shared_ptr(lsst::meas::algorithms::AlgorithmControl)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
109  <a href="#b0d8591f">b0d8591f</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
110  <a href="#865fd90c">865fd90c</a> - %include "lsst/meas/algorithms/Algorithm.h"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
111  <a href="#b0d8591f">b0d8591f</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
112  <a href="#b0d8591f">b0d8591f</a> - %shared_ptr(lsst::meas::algorithms::CentroidAlgorithm)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
113  <a href="#b0d8591f">b0d8591f</a> - %shared_ptr(lsst::meas::algorithms::CentroidControl)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
114  <a href="#b0d8591f">b0d8591f</a> - %shared_ptr(lsst::meas::algorithms::GaussianCentroidControl)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
115  <a href="#b0d8591f">b0d8591f</a> - %shared_ptr(lsst::meas::algorithms::NaiveCentroidControl)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
116  <a href="#b0d8591f">b0d8591f</a> - %shared_ptr(lsst::meas::algorithms::SdssCentroidControl)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
117  <a href="#22270023">22270023</a> - %shared_ptr(lsst::meas::algorithms::RecordCentroidControl)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
118  <a href="#b0d8591f">b0d8591f</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
119  <a href="#b0d8591f">b0d8591f</a> - %shared_ptr(lsst::meas::algorithms::ShapeAlgorithm)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
120  <a href="#b0d8591f">b0d8591f</a> - %shared_ptr(lsst::meas::algorithms::ShapeControl)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
121  <a href="#b0d8591f">b0d8591f</a> - %shared_ptr(lsst::meas::algorithms::SdssShapeControl)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
122  <a href="#b0d8591f">b0d8591f</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
123  <a href="#b0d8591f">b0d8591f</a> - %shared_ptr(lsst::meas::algorithms::FluxAlgorithm)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
124  <a href="#b0d8591f">b0d8591f</a> - %shared_ptr(lsst::meas::algorithms::FluxControl)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
125  <a href="#b0d8591f">b0d8591f</a> - %shared_ptr(lsst::meas::algorithms::ApertureFluxControl)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
126  <a href="#b8fbeb4e">b8fbeb4e</a> - %shared_ptr(lsst::meas::algorithms::EllipticalApertureFluxControl)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
127  <a href="#8a361b43">8a361b43</a> - %shared_ptr(lsst::meas::algorithms::PeakLikelihoodFluxControl)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
128  <a href="#b0d8591f">b0d8591f</a> - %shared_ptr(lsst::meas::algorithms::GaussianFluxControl)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
129  <a href="#b0d8591f">b0d8591f</a> - %shared_ptr(lsst::meas::algorithms::NaiveFluxControl)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
130  <a href="#b0d8591f">b0d8591f</a> - %shared_ptr(lsst::meas::algorithms::PsfFluxControl)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
131  <a href="#b0d8591f">b0d8591f</a> - %shared_ptr(lsst::meas::algorithms::SincFluxControl)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
132  <a href="#b0d8591f">b0d8591f</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
133  <a href="#df2793a0">df2793a0</a> - %shared_ptr(lsst::meas::algorithms::CorrectFluxesControl)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
134  <a href="#b0d8591f">b0d8591f</a> - %shared_ptr(lsst::meas::algorithms::ClassificationControl)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
135  <a href="#b0d8591f">b0d8591f</a> - %shared_ptr(lsst::meas::algorithms::PixelFlagControl)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
136  <a href="#b0d8591f">b0d8591f</a> - %shared_ptr(lsst::meas::algorithms::SkyCoordControl)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
137  <a href="#88d3bd3f">88d3bd3f</a> - %shared_ptr(lsst::meas::algorithms::JacobianControl)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
138  <a href="#57d718bf">57d718bf</a> - %shared_ptr(lsst::meas::algorithms::FocalPlaneControl)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
139  <a href="#b0d8591f">b0d8591f</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
140  <a href="#5e24bd7e">5e24bd7e</a> - %include "std_set.i"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
141  <a href="#5e24bd7e">5e24bd7e</a> - %template(ApCorrRegistry) std::set<std::string>;</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
142  <a href="#5e24bd7e">5e24bd7e</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
143  <a href="#b0d8591f">b0d8591f</a> - %include "lsst/meas/algorithms/FluxControl.h"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
144  <a href="#b0d8591f">b0d8591f</a> - %include "lsst/meas/algorithms/CentroidControl.h"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
145  <a href="#b0d8591f">b0d8591f</a> - %include "lsst/meas/algorithms/ShapeControl.h"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
146  <a href="#b0d8591f">b0d8591f</a> - %include "lsst/meas/algorithms/Classification.h"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
147  <a href="#88d3bd3f">88d3bd3f</a> - %include "lsst/meas/algorithms/Jacobian.h"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
148  <a href="#57d718bf">57d718bf</a> - %include "lsst/meas/algorithms/FocalPlane.h"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
149  <a href="#b0d8591f">b0d8591f</a> - %include "lsst/meas/algorithms/PixelFlags.h"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
150  <a href="#b0d8591f">b0d8591f</a> - %include "lsst/meas/algorithms/SkyCoord.h"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
151  <a href="#22270023">22270023</a> - %include "lsst/meas/algorithms/RecordCentroid.h"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
152  <a href="#f96ca54d">f96ca54d</a> - %include "lsst/meas/algorithms/SdssShapeControl.h"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
153  <a href="#f96ca54d">f96ca54d</a> - %include "lsst/meas/algorithms/GaussianFluxControl.h"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
154  <a href="#df2793a0">df2793a0</a> - %include "lsst/meas/algorithms/CorrectFluxes.h"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
155  <a href="#a5b0e165">a5b0e165</a> - %include "lsst/meas/algorithms/Photometry.h"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
156  <a href="#b0d8591f">b0d8591f</a> - %returnCopy(lsst::meas::algorithms::MeasureSources::getAlgorithms)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
157  <a href="#b0d8591f">b0d8591f</a> - %returnSelf(lsst::meas::algorithms::MeasureSourcesBuilder::setCentroider)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
158  <a href="#b0d8591f">b0d8591f</a> - %returnSelf(lsst::meas::algorithms::MeasureSourcesBuilder::addAlgorithm)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
159  <a href="#865fd90c">865fd90c</a> - %include "lsst/meas/algorithms/Measure.h"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
160  <a href="#865fd90c">865fd90c</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
161  <a href="#b0d8591f">b0d8591f</a> - %extend lsst::meas::algorithms::MeasureSources {</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
162  <a href="#b0d8591f">b0d8591f</a> - %template(apply) apply<float>;</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
163  <a href="#b0d8591f">b0d8591f</a> - %template(apply) apply<double>;</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
164  <a href="#85ab1211">85ab1211</a> - %template(applyForced) applyForced<float>;</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
165  <a href="#85ab1211">85ab1211</a> - %template(applyForced) applyForced<double>;</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
166  <a href="#85ab1211">85ab1211</a> - %template(applyWithPeak) applyWithPeak<float>;</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
167  <a href="#85ab1211">85ab1211</a> - %template(applyWithPeak) applyWithPeak<double>;</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
168  <a href="#89a7d652">89a7d652</a> - %template(applyWithCoord) applyWithCoord<float>;</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
169  <a href="#89a7d652">89a7d652</a> - %template(applyWithCoord) applyWithCoord<double>;</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
170  <a href="#89a7d652">89a7d652</a> - %template(applyWithPixel) applyWithPixel<float>;</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
171  <a href="#89a7d652">89a7d652</a> - %template(applyWithPixel) applyWithPixel<double>;</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
172  <a href="#b0d8591f">b0d8591f</a> - }</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
173  <a href="#b0d8591f">b0d8591f</a> - %extend lsst::meas::algorithms::MeasureSourcesBuilder {</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
174  <a href="#3c88733d">3c88733d</a> - %pythoncode %{</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
175  <a href="#3c88733d">3c88733d</a> -     def addAlgorithms(self, iterable):</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
176  <a href="#3c88733d">3c88733d</a> -         for item in iterable:</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
177  <a href="#3c88733d">3c88733d</a> -             self.addAlgorithm(item)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
178  <a href="#b0d8591f">b0d8591f</a> -         return self</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
179  <a href="#3c88733d">3c88733d</a> - %}</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
180  <a href="#3c88733d">3c88733d</a> - }</div>
                
                /************************************************************************************************************/
                
                %shared_ptr(lsst::meas::algorithms::Defect);
                %shared_vec(lsst::meas::algorithms::Defect::Ptr);
                %shared_ptr(std::vector<lsst::meas::algorithms::Defect::Ptr>);
                
                %include "lsst/meas/algorithms/Interp.h"
                
                /************************************************************************************************************/
                
                %define %Exposure(PIXTYPE)
                    lsst::afw::image::Exposure<PIXTYPE, lsst::afw::image::MaskPixel, lsst::afw::image::VariancePixel>
                %enddef
                
                /************************************************************************************************************/
                /*
                 * Now %template declarations
                 */
                
                %typemap(in) std::vector<CONST_PTR(%Exposure(PIXTYPE))> const {
                  if (!PyList_Check($input)) {
                    PyErr_SetString(PyExc_ValueError, "Expecting a list");
                    return NULL;
                  }
                  size_t size = PySequence_Size($input);
                  std::cout << "Converting sequence of " << size << std::endl;
                  $1 = std::vector<CONST_PTR(%Exposure(PIXTYPE))>(size);
                  for (i = 0; i < size; ++i) {
                      PyObject* obj = PySequence_GetItem($input, i);
                      CONST_PTR(%Exposure(PIXTYPE)) exp;
                      if ((SWIG_ConvertPtr(obj, (void **) &exp, SWIGTYPE_p_Exposure##SUFFIX, 1)) == -1) return NULL;
                      $1[i] = exp;
                  }
                }
                
                %define %instantiate_templates(SUFFIX, PIXTYPE)
                    %template(findCosmicRays) lsst::meas::algorithms::findCosmicRays<
                                                  lsst::afw::image::MaskedImage<PIXTYPE,
                                                                                lsst::afw::image::MaskPixel,
                                                                                lsst::afw::image::VariancePixel> >;
                    %template(interpolateOverDefects) lsst::meas::algorithms::interpolateOverDefects<
                                                          lsst::afw::image::MaskedImage<PIXTYPE,
                                                                                        lsst::afw::image::MaskPixel,
                                                                                        lsst::afw::image::VariancePixel> >;
                %enddef
                
                %instantiate_templates(F, float)
                
                %template(DefectListT) std::vector<lsst::meas::algorithms::Defect::Ptr>;
                
                %init %{
                    import_array();
                %}
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
235  <a href="#8de1e2e9">8de1e2e9</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
236  <a href="#a5b0e165">a5b0e165</a> - %template(SincCoeffsF) lsst::meas::algorithms::photometry::SincCoeffs<float>;</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
237  <a href="#a5b0e165">a5b0e165</a> - %template(SincCoeffsD) lsst::meas::algorithms::photometry::SincCoeffs<double>;</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
238  <a href="#a5b0e165">a5b0e165</a> - %template(calculateSincApertureFlux) lsst::meas::algorithms::photometry::calculateSincApertureFlux<</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
239  <a href="#a5b0e165">a5b0e165</a> -     lsst::afw::image::MaskedImage<float> >;</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
240  <a href="#1293a31c">1293a31c</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
241  <a href="#1293a31c">1293a31c</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
242  <a href="#1293a31c">1293a31c</a> - %shared_ptr(lsst::meas::algorithms::BinnedWcs)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
243  <a href="#1293a31c">1293a31c</a> - %include "lsst/meas/algorithms/BinnedWcs.h"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
244  <a href="#7cbd8df1">7cbd8df1</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
245  <a href="#7cbd8df1">7cbd8df1</a> - %include "lsst/meas/algorithms/CoaddBoundedField.i"</div>
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="8de1e2e9"/></a>8de1e2e9</h3>

<pre>
commit 8de1e2e98ec5417845736aac477ac06d7605818f
Merge: c86591c ebb2dd2
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Thu Apr 11 16:05:37 2013 -0400

    Merge branch 'master' into next
    
    Merge conflicts appeared trivial.
    I also needed to update the calculateSincApertureFlux call in ImagePsf.cc, doComputeApertureFlux
    
    Conflicts:
    	include/lsst/meas/algorithms.h
    	python/lsst/meas/algorithms/algorithmsLib.i
    	python/lsst/meas/algorithms/measurement.py
</pre>
<h3><a name="7cbd8df1"/></a>7cbd8df1</h3>

<pre>
commit 7cbd8df1c9d4e6712af9ae51eb92d84cc47f9b15
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Wed Jun 4 17:10:07 2014 -0400

    Add CoaddBoundedField class to coadd aperture corrections
</pre>
<h3><a name="b0d8591f"/></a>b0d8591f</h3>

<pre>
commit b0d8591f0e28fd34c95f1548ebda5695e46d2a22
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Mon Feb 20 18:14:44 2012 -0500

    merge from tickets/1843; tests/psf.py is failing, but it appears to be failing on master too
</pre>
<h3><a name="8a361b43"/></a>8a361b43</h3>

<pre>
commit 8a361b43ea537549c523542d9b32a99c9368505c
Author: Russell Owen <rowen@uw.edu>
Date:   Thu Apr 11 16:50:53 2013 -0700

    Response to RHL's review
</pre>
<h3><a name="3c88733d"/></a>3c88733d</h3>

<pre>
commit 3c88733dd403eb202aeeb13aad2ae8f6cc391534
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Wed Jan 18 20:00:14 2012 -0500

    converted source measurement framework to use pex_config (requires at least rev 532d020 of pex_config)
</pre>
<h3><a name="57c04253"/></a>57c04253</h3>

<pre>
commit 57c04253f751fa803bbb6d99b30c9858e9c2902b
Author: rowen <rowen@git.lsstcorp.org>
Date:   Tue Feb 15 22:05:15 2011 +0000

    SWIG Shapelet.h
    Lowercase some filenames
</pre>
<h3><a name="1293a31c"/></a>1293a31c</h3>

<pre>
commit 1293a31c19c238ba2c2acd8f67ec1be742764b66
Author: Paul Price <price@astro.princeton.edu>
Date:   Thu Mar 20 16:47:59 2014 -0400

    add BinnedWcs
    
    Wraps Wcs with binning.  This is intended for use in background
    modeling, where we bin the image into super-pixels.
</pre>
<h3><a name="89a7d652"/></a>89a7d652</h3>

<pre>
commit 89a7d652610e8839342eef70f85ac0a59c11b485
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 2 12:24:41 2012 -0400

    Wasn't happy with difference in API between C++ and python, so made C++ match the python.
</pre>
<h3><a name="85ab1211"/></a>85ab1211</h3>

<pre>
commit 85ab1211e8e50166554d0f5b1b70d95f9849901c
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Thu Jan 31 01:13:07 2013 -0500

    Give source measurement drivers a more uniform and readable API
    
    MeasureSources must now be informed upon creation whether it will be used for forced measurement.
    Renamed apply(source, exposure) to applyWithPeak.
    Renamed apply(...) with references to applyForced.
    All applyXX() methods now support centroid tweak-ups (with different defaults).
    Centroids are tweaked if centroider.name!=None even in forced photometry mode.
    Test code modified to test new centroid-tweaking options; see also #2612.
</pre>
<h3><a name="df2793a0"/></a>df2793a0</h3>

<pre>
commit df2793a0a4dc9c9732dd6ba77e1f197fe0aac01d
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Wed Mar 27 18:13:12 2013 -0400

    Move aperture correction and ScaledFlux-tying into a pluggable algorithm.
</pre>
<h3><a name="5e78be5b"/></a>5e78be5b</h3>

<pre>
commit 5e78be5b4fc85f7fae3f9c68a41c884bab59b8e6
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Mon Mar 19 16:09:33 2012 -0400

    moved ndarray out of lsst namespace and header directories
</pre>
<h3><a name="4d375e47"/></a>4d375e47</h3>

<pre>
commit 4d375e471cf0578e6d47b8c4f86d99ad126700df
Author: rhl <rhl@git.lsstcorp.org>
Date:   Fri Nov 28 21:01:14 2008 +0000

    Merged revisions 6510,6514-6532,6551,6554,6573-6574,6578-6579 via svnmerge (#490) from
    svn+ssh://svn.lsstcorp.org/DMS/meas/algorithms/tickets/490
    
    ........
      r6510 | rhl | 2008-11-25 13:50:24 -0500 (Tue, 25 Nov 2008) | 2 lines
    
      Work on ticket #490
    ........
      r6514 | rhl | 2008-11-25 13:56:39 -0500 (Tue, 25 Nov 2008) | 2 lines
    
      #490
    ........
      r6515 | rhl | 2008-11-25 13:56:48 -0500 (Tue, 25 Nov 2008) | 2 lines
    
      #490
    ........
      r6516 | rhl | 2008-11-25 13:56:55 -0500 (Tue, 25 Nov 2008) | 2 lines
    
      #490
    ........
      r6517 | rhl | 2008-11-25 13:57:04 -0500 (Tue, 25 Nov 2008) | 2 lines
    
      #490
    ........
      r6518 | rhl | 2008-11-25 13:58:55 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6519 | rhl | 2008-11-25 13:58:58 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6520 | rhl | 2008-11-25 13:59:02 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6521 | rhl | 2008-11-25 13:59:05 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6522 | rhl | 2008-11-25 14:04:54 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6523 | rhl | 2008-11-25 14:05:08 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6524 | rhl | 2008-11-25 14:05:11 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6525 | rhl | 2008-11-25 14:05:15 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6526 | rhl | 2008-11-25 14:15:43 -0500 (Tue, 25 Nov 2008) | 1 line
    
      Need to be able to import lsst.meas.algorithms
    ........
      r6527 | rhl | 2008-11-25 14:16:21 -0500 (Tue, 25 Nov 2008) | 1 line
    
      Need to be able to import lsst.meas.algorithms
    ........
      r6528 | rhl | 2008-11-25 14:16:28 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6529 | rhl | 2008-11-25 14:22:35 -0500 (Tue, 25 Nov 2008) | 1 line
    
      We didn't really want lsst.detection (but that was where it was in DMS/detection)
    ........
      r6530 | rhl | 2008-11-25 14:30:30 -0500 (Tue, 25 Nov 2008) | 1 line
    
      Needed for .paf files
    ........
      r6531 | rhl | 2008-11-25 14:31:14 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6532 | rhl | 2008-11-25 14:31:17 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6551 | rhl | 2008-11-25 20:01:04 -0500 (Tue, 25 Nov 2008) | 1 line
    
      Got code back to the shape it was in while at detection/trunk
    ........
      r6554 | rhl | 2008-11-25 21:16:17 -0500 (Tue, 25 Nov 2008) | 1 line
    
      Initial version of FootprintFunctor that passes tests (base class needs to move to afw)
    ........
      r6573 | rhl | 2008-11-26 08:19:17 -0500 (Wed, 26 Nov 2008) | 1 line
    
      Improve FootprintFunctor.apply() to be a little more efficient
    ........
      r6574 | rhl | 2008-11-26 09:45:45 -0500 (Wed, 26 Nov 2008) | 1 line
    
      Abolish the Measure object; it didn't make sense as a unit of packaging
    ........
      r6578 | rhl | 2008-11-26 09:58:15 -0500 (Wed, 26 Nov 2008) | 1 line
    
      Moved FootprintFunctor to afw
    ........
      r6579 | rhl | 2008-11-26 11:14:04 -0500 (Wed, 26 Nov 2008) | 1 line
    
      Use FootprintFunctor to remove CRs
    ........
</pre>
<h3><a name="5e24bd7e"/></a>5e24bd7e</h3>

<pre>
commit 5e24bd7ea41f5c58a4df153bdeaaa3aa2ac322c1
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Tue Jun 24 12:23:45 2014 -0400

    New C++ registry for aperture-corrected fields
    
    Now, instead of trying to use the registry to set the defaults of a configurable
    list of to-be-corrected fluxes (which didn't work), we'll use the full registry, minus
    any algorithms in a to-be-ignored list.
</pre>
<h3><a name="88d3bd3f"/></a>88d3bd3f</h3>

<pre>
commit 88d3bd3f32cf4d0138b80148e57bc275fc8c3454
Author: Paul Price <price@astro.princeton.edu>
Date:   Fri May 3 10:23:54 2013 -0400

    Jacobian: add Algorithm to compute the Jacobian.
    
    The Jacobian is calculated relative to the JacobianControl.pixelScale.
</pre>
<h3><a name="a5b0e165"/></a>a5b0e165</h3>

<pre>
commit a5b0e165f74cab1e7a62ddbb47006b69b411653f
Author: Paul Price <price@astro.princeton.edu>
Date:   Mon Feb 25 19:25:07 2013 +0900

    Clean up the SincCoeffs caching model.
    
    Made the SincCoeffs singleton class public (in lsst::meas::algorithms::photometry)
    so users can explicitly cache coefficients for desired (circular) apertures.
    Coeffs are only marked persistent when they're placed in the cache.
    Apertures are now specified as an lsst::afw::geom::ellipses::Axes so that
    conversions between different types of ellipses can happen automatically.
    SincCoeffs cache is now available from Python too.
    Add test for caching.
</pre>
<h3><a name="57d718bf"/></a>57d718bf</h3>

<pre>
commit 57d718bf51b255adf5789e389dfb776ecaa062d1
Author: Paul Price <price@astro.princeton.edu>
Date:   Sun May 26 03:45:26 2013 +0900

    fix up building of focalplane algorithm
</pre>
<h3><a name="f96ca54d"/></a>f96ca54d</h3>

<pre>
commit f96ca54dc15b5c7dca52f96164f0b987de82e8c4
Author: Paul Price <price@astro.princeton.edu>
Date:   Thu Feb 7 16:28:47 2013 -0500

    Use common values for adaptive moments convergence parameters.
    
    Review (https://dev.lsstcorp.org/trac/ticket/2638#comment:6) notes that
    the adaptive moments convergence parameters are reused multiple times.
    Using the same values (declared as 'const' in SdssShape.h) should reduce
    the potential for confusion.
    
    This necessitated a bit of reorganisation --- the SdssShapeControl and
    GaussianFluxControl have been moved into their own header files, so the
    standard FluxControl.h and ShapeControl.h don't have to include (directly)
    a detail.
</pre>
<h3><a name="22270023"/></a>22270023</h3>

<pre>
commit 22270023600897f2221803628e0904b707155cce
Author: Paul Price <price@astro.princeton.edu>
Date:   Thu Apr 26 16:39:55 2012 -0400

    Since forced photometry simply uses the centroid from the reference source, it might be desirable to record what that x,y position is.  The RecordCentroid algorithm just saves the centroid passed to it.  Unfortunately, it cannot be used in a 'slot'.
</pre>
<h3><a name="865fd90c"/></a>865fd90c</h3>

<pre>
commit 865fd90cccd5d26eac0f9901a2247e5c6ee806e0
Author: price <price@git.lsstcorp.org>
Date:   Wed Sep 28 09:47:19 2011 +0000

    Include measurement updates in swig.
</pre>
<h3><a name="b8fbeb4e"/></a>b8fbeb4e</h3>

<pre>
commit b8fbeb4ea5f62c2ece8b108fd142481101e09890
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Wed Jan 23 12:49:35 2013 -0500

    Initial implementation of elliptical aperture fluxes (#2588)
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="3caa2d28"/></a>3caa2d28</h3>

<pre>
commit 3caa2d28a9e3511f99d75c0905f73bfcf87cdf60
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Wed Apr 8 17:02:07 2015 -0400

    Utilize new numeric scalar typemaps and NumPy initialization macro
</pre>
<h3><a name="71ee71ad"/></a>71ee71ad</h3>

<pre>
commit 71ee71ad4bb67637eadb47439a147b246549f48d
Author: Lauren MacArthur <lauren@astro.princeton.edu>
Date:   Thu Apr 9 17:25:32 2015 -0400

    Include lsst/afw/table.h in meas/algorithms/algorithmsLib.i
</pre>
</div>


[Return to list](#homelist)
# <a name="src/CoaddPsf.cc"/></a>src/CoaddPsf.cc
### Diff:

<pre>
                // -*- LSST-C++ -*-
                
                /* 
                 * LSST Data Management System
                 * Copyright 2008, 2009, 2010 LSST Corporation.
                 * 
                 * This product includes software developed by the
                 * LSST Project (http://www.lsst.org/).
                 *
                 * This program is free software: you can redistribute it and/or modify
                 * it under the terms of the GNU General Public License as published by
                 * the Free Software Foundation, either version 3 of the License, or
                 * (at your option) any later version.
                 * 
                 * This program is distributed in the hope that it will be useful,
                 * but WITHOUT ANY WARRANTY; without even the implied warranty of
                 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                 * GNU General Public License for more details.
                 * 
                 * You should have received a copy of the LSST License Statement and 
                 * the GNU General Public License along with this program.  If not, 
                 * see <http://www.lsstcorp.org/LegalNotices/>.
                 */
                
                /*
                 * Represent a PSF as for a Coadd based on the James Jee stacking
                 * algorithm which was extracted from Stackfit.
                 */
                #include <cmath>
                #include <sstream>
                #include <iostream>
                #include <numeric>
                #include "boost/iterator/iterator_adaptor.hpp"
                #include "boost/iterator/transform_iterator.hpp"
                #include "ndarray/eigen.h"
                #include "lsst/base.h"
                #include "lsst/pex/exceptions.h"
                #include "lsst/afw/image/ImageUtils.h"
                #include "lsst/afw/math/Statistics.h"
                #include "lsst/meas/algorithms/CoaddPsf.h"
                #include "lsst/afw/table/io/OutputArchive.h"
                #include "lsst/afw/table/io/InputArchive.h"
                #include "lsst/afw/table/io/CatalogVector.h"
                #include "lsst/meas/algorithms/WarpedPsf.h"
                
                namespace lsst {
                namespace meas {
                namespace algorithms {
                
                namespace {
                
                // Struct used to simplify calculations in computeAveragePosition; lets us use
                // std::accumulate instead of explicit for loop.
                struct AvgPosItem {
                    double wx;   // weighted x position
                    double wy;   // weighted y position
                    double w;    // weight value
                
                    explicit AvgPosItem(double wx_=0.0, double wy_=0.0, double w_=0.0) : wx(wx_), wy(wy_), w(w_) {}
                
                    // return point, assuming this is a sum of many AvgPosItems
                    afw::geom::Point2D getPoint() const { return afw::geom::Point2D(wx/w, wy/w); }
                
                    // comparison so we can sort by weights
                    bool operator<(AvgPosItem const & other) const {
                        return w < other.w;
                    }
                
                    AvgPosItem & operator+=(AvgPosItem const & other) {
                        wx += other.wx;
                        wy += other.wy;
                        w += other.w;
                        return *this;
                    }
                
                    AvgPosItem & operator-=(AvgPosItem const & other) {
                        wx -= other.wx;
                        wy -= other.wy;
                        w -= other.w;
                        return *this;
                    }
                
                    friend AvgPosItem operator+(AvgPosItem a, AvgPosItem const & b) { return a += b; }
                
                    friend AvgPosItem operator-(AvgPosItem a, AvgPosItem const & b) { return a -= b; }
                };
                
                afw::geom::Point2D computeAveragePosition(
                    afw::table::ExposureCatalog const & catalog,
                    afw::image::Wcs const & coaddWcs,
                    afw::table::Key<double> weightKey
                ) {
                    afw::table::Key<int> goodPixKey;
                    try {
                        goodPixKey = catalog.getSchema()["goodpix"];
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
96   <a href="#2f8e9123">2f8e9123</a> -     } catch (pex::exceptions::NotFoundException &) {}</div>
              ?                                        ^^^^^^ ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
96   <a href="#ed246562">ed246562</a> +     } catch (pex::exceptions::NotFoundError &) {}</div>
              ?                                        ^^ ^
                    std::vector<AvgPosItem> items;
                    items.reserve(catalog.size());
                    for (afw::table::ExposureCatalog::const_iterator i = catalog.begin(); i != catalog.end(); ++i) {
                        afw::geom::Point2D p = coaddWcs.skyToPixel(
                            *i->getWcs()->pixelToSky(
                                i->getPsf()->getAveragePosition()
                            )
                        );
                        AvgPosItem item(p.getX(), p.getY(), i->get(weightKey));
                        if (goodPixKey.isValid()) {
                            item.w *= i->get(goodPixKey);
                        }
                        item.wx *= item.w;
                        item.wy *= item.w;
                        items.push_back(item);
                    }
                    // This is a bit pessimistic - we save and sort all the weights all the time,
                    // even though we'll only need them if the average position from all of them
                    // is invalid.  But it makes for simpler code, and it's not that expensive
                    // computationally anyhow.
                    std::sort(items.begin(), items.end());
                    AvgPosItem result = std::accumulate(items.begin(), items.end(), AvgPosItem());
                    // If the position isn't valid (no input frames contain it), we remove frames
                    // from the average until it does.
                    for (
                        std::vector<AvgPosItem>::iterator iter = items.begin();
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
123  <a href="#bc555bfc">bc555bfc</a> -         catalog.subsetContaining(result.getPoint(), coaddWcs, true).empty();</div>
              ?                                                             ------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
123  <a href="#2f8e9123">2f8e9123</a> +         catalog.subsetContaining(result.getPoint(), coaddWcs).empty();</div>
                        ++iter
                    ) {
                        if (iter == items.end()) {
                            // This should only happen if there are no inputs at all,
                            // or if constituent Psfs have a badly-behaved implementation
                            // of getAveragePosition().
                            throw LSST_EXCEPT(
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
131  <a href="#2f8e9123">2f8e9123</a> -                 pex::exceptions::RuntimeErrorException,</div>
              ?                                              ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
131  <a href="#ed246562">ed246562</a> +                 pex::exceptions::RuntimeError,</div>
                                "Could not find a valid average position for CoaddPsf"
                            );
                        }
                        result -= *iter;
                    }
                    return result.getPoint();
                }
                
                } // anonymous
                
                CoaddPsf::CoaddPsf(
                    afw::table::ExposureCatalog const & catalog,
                    afw::image::Wcs const & coaddWcs,
                    std::string const & weightFieldName,
                    std::string const & warpingKernelName,
                    int cacheSize
                ) :
                    _coaddWcs(coaddWcs.clone()),
                    _warpingKernelName(warpingKernelName),
                    _warpingControl(boost::make_shared<afw::math::WarpingControl>(warpingKernelName, "", cacheSize))
                {
                    afw::table::SchemaMapper mapper(catalog.getSchema());
                    mapper.addMinimalSchema(afw::table::ExposureTable::makeMinimalSchema(), true);
                    afw::table::Field<double> weightField = afw::table::Field<double>("weight", "Coadd weight");
                    afw::table::Key<double> weightKey = catalog.getSchema()[weightFieldName];
                    _weightKey = mapper.addMapping(weightKey, weightField);
                    _catalog = afw::table::ExposureCatalog(mapper.getOutputSchema());
                    for (afw::table::ExposureCatalog::const_iterator i = catalog.begin(); i != catalog.end(); ++i) {
                         PTR(afw::table::ExposureRecord) record = _catalog.getTable()->makeRecord();
                         record->assign(*i, mapper);
                         _catalog.push_back(record);
                    }
                    _averagePosition = computeAveragePosition(_catalog, *_coaddWcs, _weightKey);
                }
                
                PTR(afw::detection::Psf) CoaddPsf::clone() const {
                    return boost::make_shared<CoaddPsf>(*this);
                }
                
                
                // Read all the images from the Image Vector and return the BBox in xy0 offset coordinates
                
                afw::geom::Box2I getOverallBBox(std::vector<PTR(afw::image::Image<double>)> const & imgVector) {
                
                    afw::geom::Box2I bbox;
                    // Calculate the box which will contain them all
                    for (unsigned int i = 0; i < imgVector.size(); i ++) {
                        PTR(afw::image::Image<double>) componentImg = imgVector[i];
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
180  <a href="#f1720c02">f1720c02</a> -         afw::geom::Box2I cBBox = componentImg->getBBox(afw::image::PARENT);</div>
              ?                                                        ------------------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
180  <a href="#2d3a5fcc">2d3a5fcc</a> +         afw::geom::Box2I cBBox = componentImg->getBBox();</div>
                        bbox.include(cBBox); // JFB: this works even on empty bboxes
                    }
                    return bbox;
                }
                
                
                // Read all the images from the Image Vector and add them to image
                
                void addToImage(
                    PTR(afw::image::Image<double>) image,
                    std::vector<PTR(afw::image::Image<double>)> const & imgVector,
                    std::vector<double> const & weightVector
                ) {
                    assert(imgVector.size() == weightVector.size());
                    for (unsigned int i = 0; i < imgVector.size(); i ++) {
                        PTR(afw::image::Image<double>) componentImg = imgVector[i];
                        double weight = weightVector[i];
                        double sum = componentImg->getArray().asEigen().sum();
                
                        // Now get the portion of the component image which is appropriate to add
                        // If the default image size is used, the component is guaranteed to fit,
                        // but not if a size has been specified.
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
203  <a href="#f1720c02">f1720c02</a> -         afw::geom::Box2I cBBox = componentImg->getBBox(afw::image::PARENT);</div>
              ?                                                        ------------------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
203  <a href="#2d3a5fcc">2d3a5fcc</a> +         afw::geom::Box2I cBBox = componentImg->getBBox();</div>
                        afw::geom::Box2I overlap(cBBox);
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
205  <a href="#f1720c02">f1720c02</a> -         overlap.clip(image->getBBox(afw::image::PARENT));</div>
              ?                                     ------------------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
205  <a href="#2d3a5fcc">2d3a5fcc</a> +         overlap.clip(image->getBBox());</div>
                        // JFB: A subimage view of the image we want to add to, containing only the overlap region.
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
207  <a href="#f1720c02">f1720c02</a> -         afw::image::Image<double> targetSubImage(*image, overlap, afw::image::PARENT);</div>
              ?                                                                 --------------------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
207  <a href="#2d3a5fcc">2d3a5fcc</a> +         afw::image::Image<double> targetSubImage(*image, overlap);</div>
                        // JFB: A subimage view of the image we want to add from, containing only the overlap region.
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
209  <a href="#f1720c02">f1720c02</a> -         afw::image::Image<double> cSubImage(*componentImg, overlap, afw::image::PARENT);</div>
              ?                                                                   --------------------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
209  <a href="#2d3a5fcc">2d3a5fcc</a> +         afw::image::Image<double> cSubImage(*componentImg, overlap);</div>
                        targetSubImage.scaledPlus(weight/sum, cSubImage);
                    }
                }
                
                
                PTR(afw::detection::Psf::Image) CoaddPsf::doComputeKernelImage(
                    afw::geom::Point2D const & ccdXY,
                    afw::image::Color const & color
                ) const {
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
219  <a href="#3507c21a">3507c21a</a> -     // get the subset of exposures which contain our coordinate and are inside the the validPolygonx</div>
              ?                                                                -------------------------------------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
219  <a href="#9561f8f4">9561f8f4</a> +     // get the subset of exposures which contain our coordinate</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
220  <a href="#3507c21a">3507c21a</a> -     afw::table::ExposureCatalog subcat = _catalog.subsetContaining(ccdXY, *_coaddWcs, true);</div>
              ?                                                                                     ------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
220  <a href="#99419896">99419896</a> +     afw::table::ExposureCatalog subcat = _catalog.subsetContaining(ccdXY, *_coaddWcs);</div>
                    if (subcat.empty()) {
                        throw LSST_EXCEPT(
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
223  <a href="#a27b429a">a27b429a</a> -             pex::exceptions::InvalidParameterException,</div>
              ?                                               ^^^^^^ ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
223  <a href="#ed246562">ed246562</a> +             pex::exceptions::InvalidParameterError,</div>
              ?                                               ^^ ^
                            (boost::format("Cannot compute CoaddPsf at point %s; no input images at that point.")
                             % ccdXY).str()
                        );
                    }
                    double weightSum = 0.0;
                
                    // Read all the Psf images into a vector.  The code is set up so that this can be done in chunks,
                    // with the image modified to accomodate
                    // However, we currently read all of the images.
                    std::vector<PTR(afw::image::Image<double>)> imgVector;
                    std::vector<double> weightVector;
                
                    for (afw::table::ExposureCatalog::const_iterator i = subcat.begin(); i != subcat.end(); ++i) {
                        PTR(afw::geom::XYTransform) xytransform(
                            new afw::image::XYTransformFromWcsPair(_coaddWcs, i->getWcs())
                        );
                        WarpedPsf warpedPsf = WarpedPsf(i->getPsf(), xytransform, _warpingControl);
                        PTR(afw::image::Image<double>) componentImg = warpedPsf.computeKernelImage(ccdXY, color);
                        imgVector.push_back(componentImg);
                        weightSum += i->get(_weightKey);
                        weightVector.push_back(i->get(_weightKey));
                    }
                
                    afw::geom::Box2I bbox = getOverallBBox(imgVector);
                
                    // create a zero image of the right size to sum into
                    PTR(afw::detection::Psf::Image) image = boost::make_shared<afw::detection::Psf::Image>(bbox);
                    *image = 0.0;
                    addToImage(image, imgVector, weightVector);
                    *image /= weightSum;
                    return image;
                }
                
                /**
                 * getComponentCount() - get the number of component Psf's in this CoaddPsf
                 */
                int CoaddPsf::getComponentCount() const {
                    return _catalog.size();
                }
                
                /**
                 * getPsf - get the Psf of the component at position index
                 */
                CONST_PTR(afw::detection::Psf) CoaddPsf::getPsf(int index) {
                    if (index < 0 || index > getComponentCount()) {
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
269  <a href="#ccb68549">ccb68549</a> -         throw LSST_EXCEPT(pex::exceptions::RangeErrorException, "index of CoaddPsf component out of range");</div>
              ?                                                      ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
269  <a href="#ed246562">ed246562</a> +         throw LSST_EXCEPT(pex::exceptions::RangeError, "index of CoaddPsf component out of range");</div>
                    }
                    return _catalog[index].getPsf();
                }
                
                /**
                 * getWcs - get the Wcs of the component at position index
                 */
                CONST_PTR(afw::image::Wcs) CoaddPsf::getWcs(int index) {
                    if (index < 0 || index > getComponentCount()) {
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
279  <a href="#ccb68549">ccb68549</a> -         throw LSST_EXCEPT(pex::exceptions::RangeErrorException, "index of CoaddPsf component out of range");</div>
              ?                                                      ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
279  <a href="#ed246562">ed246562</a> +         throw LSST_EXCEPT(pex::exceptions::RangeError, "index of CoaddPsf component out of range");</div>
                    }
                    return _catalog[index].getWcs();
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
282  <a href="#e254753e">e254753e</a> - }</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
283  <a href="#e254753e">e254753e</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
284  <a href="#e254753e">e254753e</a> - /**</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
285  <a href="#3507c21a">3507c21a</a> -  * getValidPolygon - get the valid Polygon of the component at position index</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
286  <a href="#3507c21a">3507c21a</a> -  */</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
287  <a href="#3507c21a">3507c21a</a> - CONST_PTR(afw::geom::polygon::Polygon) CoaddPsf::getValidPolygon(int index) {</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
288  <a href="#3507c21a">3507c21a</a> -     if (index < 0 || index > getComponentCount()) {</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
289  <a href="#3507c21a">3507c21a</a> -         throw LSST_EXCEPT(pex::exceptions::RangeErrorException, "index of CoaddPsf component out of range");</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
290  <a href="#3507c21a">3507c21a</a> -     }</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
291  <a href="#3507c21a">3507c21a</a> -     return _catalog[index].getValidPolygon();</div>
                }
                
                /**
                 * getWeight - get the coadd weight of the component at position index
                 */
                double CoaddPsf::getWeight(int index) {
                    if (index < 0 || index > getComponentCount()) {
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
299  <a href="#ccb68549">ccb68549</a> -         throw LSST_EXCEPT(pex::exceptions::RangeErrorException, "index of CoaddPsf component out of range");</div>
              ?                                                      ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
289  <a href="#ed246562">ed246562</a> +         throw LSST_EXCEPT(pex::exceptions::RangeError, "index of CoaddPsf component out of range");</div>
                    }
                    return _catalog[index].get(_weightKey);
                }
                
                /**
                 * getId - get the long id of the component at position index
                 */
                afw::table::RecordId CoaddPsf::getId(int index) {
                    if (index < 0 || index > getComponentCount()) {
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
309  <a href="#ccb68549">ccb68549</a> -         throw LSST_EXCEPT(pex::exceptions::RangeErrorException, "index of CoaddPsf component out of range");</div>
              ?                                                      ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
299  <a href="#ed246562">ed246562</a> +         throw LSST_EXCEPT(pex::exceptions::RangeError, "index of CoaddPsf component out of range");</div>
                    }
                    return _catalog[index].getId();
                }
                
                afw::geom::Box2I CoaddPsf::getBBox(int index) {
                    if (index < 0 || index > getComponentCount()) {
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
316  <a href="#ccb68549">ccb68549</a> -         throw LSST_EXCEPT(pex::exceptions::RangeErrorException, "index of CoaddPsf component out of range");</div>
              ?                                                      ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
306  <a href="#ed246562">ed246562</a> +         throw LSST_EXCEPT(pex::exceptions::RangeError, "index of CoaddPsf component out of range");</div>
                    }
                    return _catalog[index].getBBox();
                }
                
                // ---------- Persistence -----------------------------------------------------------------------------------
                
                // For persistence of CoaddPsf, we have two catalogs: the first has just one record, and contains
                // the archive ID of the coadd WCS, the size of the warping cache, the name of the warping kernel,
                // and the average position.  The latter is simply the ExposureCatalog.
                
                namespace {
                
                namespace tbl = afw::table;
                
                // Singleton class that manages the first persistence catalog's schema and keys
                class CoaddPsfPersistenceHelper {
                public:
                    tbl::Schema schema;
                    tbl::Key<int> coaddWcs;
                    tbl::Key<int> cacheSize;
                    tbl::Key< tbl::Point<double> > averagePosition;
                    tbl::Key<std::string> warpingKernelName;
                
                    static CoaddPsfPersistenceHelper const & get() {
                        static CoaddPsfPersistenceHelper const instance;
                        return instance;
                    }
                
                private:
                    CoaddPsfPersistenceHelper() :
                        schema(),
                        coaddWcs(schema.addField<int>("coaddwcs", "archive ID of the coadd's WCS")),
                        cacheSize(schema.addField<int>("cachesize", "size of the warping cache")),
                        averagePosition(schema.addField< tbl::Point<double> >("avgpos", "PSF accessors default position")),
                        warpingKernelName(schema.addField<std::string>("warpingkernelname", "warping kernel name", 32))
                    {
                        schema.getCitizen().markPersistent();
                    }
                };
                
                } // anonymous
                
                class CoaddPsf::Factory : public tbl::io::PersistableFactory {
                public:
                
                    virtual PTR(tbl::io::Persistable)
                    read(InputArchive const & archive, CatalogVector const & catalogs) const {
                        CoaddPsfPersistenceHelper const & keys1 = CoaddPsfPersistenceHelper::get();
                        LSST_ARCHIVE_ASSERT(catalogs.size() == 2u);
                        LSST_ARCHIVE_ASSERT(catalogs.front().getSchema() == keys1.schema);
                        tbl::BaseRecord const & record1 = catalogs.front().front();
                        return PTR(CoaddPsf)(
                            new CoaddPsf(
                                tbl::ExposureCatalog::readFromArchive(archive, catalogs.back()),
                                archive.get<afw::image::Wcs>(record1.get(keys1.coaddWcs)),
                                record1.get(keys1.averagePosition),
                                record1.get(keys1.warpingKernelName),
                                record1.get(keys1.cacheSize)
                            )
                        );
                    }
                
                    Factory(std::string const & name) : tbl::io::PersistableFactory(name) {}
                
                };
                
                namespace {
                
                std::string getCoaddPsfPersistenceName() { return "CoaddPsf"; }
                
                CoaddPsf::Factory registration(getCoaddPsfPersistenceName());
                
                } // anonymous
                
                std::string CoaddPsf::getPersistenceName() const { return getCoaddPsfPersistenceName(); }
                
                std::string CoaddPsf::getPythonModule() const { return "lsst.meas.algorithms"; }
                
                void CoaddPsf::write(OutputArchiveHandle & handle) const {
                    CoaddPsfPersistenceHelper const & keys1 = CoaddPsfPersistenceHelper::get();
                    tbl::BaseCatalog cat1 = handle.makeCatalog(keys1.schema);
                    PTR(tbl::BaseRecord) record1 = cat1.addNew();
                    record1->set(keys1.coaddWcs, handle.put(_coaddWcs));
                    record1->set(keys1.cacheSize, _warpingControl->getCacheSize());
                    record1->set(keys1.averagePosition, _averagePosition);
                    record1->set(keys1.warpingKernelName, _warpingKernelName);
                    handle.saveCatalog(cat1);
                    _catalog.writeToArchive(handle, false);
                }
                
                CoaddPsf::CoaddPsf(
                    afw::table::ExposureCatalog const & catalog,
                    PTR(afw::image::Wcs const) coaddWcs,
                    afw::geom::Point2D const & averagePosition,
                    std::string const & warpingKernelName,
                    int cacheSize
                ) :
                    _catalog(catalog), _coaddWcs(coaddWcs), _weightKey(_catalog.getSchema()["weight"]),
                    _averagePosition(averagePosition), _warpingKernelName(warpingKernelName),
                    _warpingControl(new afw::math::WarpingControl(warpingKernelName, "", cacheSize))
                {}
                
                }}} // namespace lsst::meas::algorithms
                
                
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="a27b429a"/></a>a27b429a</h3>

<pre>
commit a27b429adece96d18d75fdbe65177dce72637e45
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Thu Feb 7 11:42:30 2013 -0500

    Throw an exception when CoaddPsf is asked to evaluate itself where it has no information.
</pre>
<h3><a name="3507c21a"/></a>3507c21a</h3>

<pre>
commit 3507c21affa8bb07194496b5b2e781af60c3e404
Author: Bob Armstrong <rearmstr@gmail.com>
Date:   Mon Sep 15 15:06:22 2014 -0400

    CoaddPsf: Ensure that coaddPsf only includes regions that are valid.
</pre>
<h3><a name="bc555bfc"/></a>bc555bfc</h3>

<pre>
commit bc555bfc1dbc6653028710e5e08f97353968e477
Author: Paul Price <price@astro.princeton.edu>
Date:   Tue Jan 6 13:37:41 2015 -0500

    CoaddPsf: fix computeAveragePosition's determination if position is off-image
    
    computeAveragePosition and doComputeKernelImage used slightly different
    determinations for whether a source was off-image: doComputeKernelImage
    took into account the polygon, while computeAveragePosition did not.
    The result was that that generating an image (or shape) at the average
    (default) position could fail. Changed computeAveragePosition to account
    for the polygon.
</pre>
<h3><a name="2f8e9123"/></a>2f8e9123</h3>

<pre>
commit 2f8e91234fc97318414a7c3999b488b4a0e5f28c
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Thu May 16 12:33:14 2013 -0400

    Make CoaddPsf::getAveragePosition() a lot more intelligent
    
     - Weight constituent Psf contribute to average by the number of pixels
    their images contribute to the coadd.
     - Remove constituent Psfs (starting with lowest weight) until the result is a
    position at which the CoaddPsf can be evaluated.
</pre>
<h3><a name="f1720c02"/></a>f1720c02</h3>

<pre>
commit f1720c02d44883821d03945563283f888a260e52
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Wed Feb 6 16:06:04 2013 -0500

    Cleanups/tweaks to CoaddPsf geometry manipulation.
    
    Let xy0 "take care of itself" a bit more.
    
    Use subimages instead of ndarray views so we can use bboxes directly.
    
    Don't compute fixed-size bbox until we know we need it; bboxes with zero area don't have a well-defined position, so it's best to avoid constructing them with a particular size when you can.
</pre>
<h3><a name="ccb68549"/></a>ccb68549</h3>

<pre>
commit ccb685496f063b4f8d62068482743efcccd1b6f0
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Fri Feb 8 11:02:19 2013 -0500

    Reimplement CoaddPsf informational accessors to use random-access indexing; return correct type for weight, use typedef for ID type.
</pre>
<h3><a name="e254753e"/></a>e254753e</h3>

<pre>
commit e254753e6dfb87c9cde49ba5b8d66f590c46e6e4
Author: Perry Gee <pgee@physics.ucdavis.edu>
Date:   Thu Jan 24 22:38:07 2013 -0800

    Changes to CoaddPsf class for testing
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="9561f8f4"/></a>9561f8f4</h3>

<pre>
commit 9561f8f493c0c16cd5277d6dd6fa63ad8647cf32
Author: Perry Gee <pgee@physics.ucdavis.edu>
Date:   Tue Feb 5 16:25:11 2013 -0800

    Removed SetDefaultImageSize
    Added code to resize and shift images depending on what gets returned by WarpPsf
    No new unit tests
</pre>
<h3><a name="2f8e9123"/></a>2f8e9123</h3>

<pre>
commit 2f8e91234fc97318414a7c3999b488b4a0e5f28c
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Thu May 16 12:33:14 2013 -0400

    Make CoaddPsf::getAveragePosition() a lot more intelligent
    
     - Weight constituent Psf contribute to average by the number of pixels
    their images contribute to the coadd.
     - Remove constituent Psfs (starting with lowest weight) until the result is a
    position at which the CoaddPsf can be evaluated.
</pre>
<h3><a name="2d3a5fcc"/></a>2d3a5fcc</h3>

<pre>
commit 2d3a5fccae9908251c54deaba743fc34137a65f5
Author: Russell Owen <rowen@uw.edu>
Date:   Thu Sep 11 17:45:03 2014 -0700

    Remove explicit use of image origin = PARENT; use default
</pre>
<h3><a name="ed246562"/></a>ed246562</h3>

<pre>
commit ed2465629cb2a0b4fe5aedeb9f447da02cf38736
Author: Russell Owen <rowen@uw.edu>
Date:   Tue Jun 17 16:16:40 2014 -0700

    Renamed exceptions
</pre>
<h3><a name="99419896"/></a>99419896</h3>

<pre>
commit 99419896b50e0c3effbd3a73d6b4b67a66d9805c
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Fri Mar 8 14:25:49 2013 -0500

    Update for changes in afw APIs due to reviews, some doc fixes.
</pre>
</div>


[Return to list](#homelist)
# <a name="ups/meas_algorithms.table"/></a>ups/meas_algorithms.table
### Diff:

<pre>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
1    <a href="#a2f3fa4f">a2f3fa4f</a> - setupRequired(afw >= 5.0.1.0)</div>
              ?                  -----------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
1    <a href="#2e80060d">2e80060d</a> + setupRequired(afw)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2    <a href="#91f167d8">91f167d8</a> - setupRequired(pex_logging >= 4.7.3.0)</div>
              ?                          -----------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2    <a href="#2e80060d">2e80060d</a> + setupRequired(pex_logging)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
3    <a href="#974a02d6">974a02d6</a> - setupRequired(pipe_base >= 5.0.0.1)</div>
              ?                        -----------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
3    <a href="#2e80060d">2e80060d</a> + setupRequired(pipe_base)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
4    <a href="#877b9389">877b9389</a> + setupRequired(meas_base)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
5    <a href="#21af0bb5">21af0bb5</a> + setupRequired(utils)</div>
                
                envPrepend(LD_LIBRARY_PATH, ${PRODUCT_DIR}/lib)
                envPrepend(DYLD_LIBRARY_PATH, ${PRODUCT_DIR}/lib)
                
                envPrepend(PYTHONPATH, ${PRODUCT_DIR}/python)
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="974a02d6"/></a>974a02d6</h3>

<pre>
commit 974a02d6cec4b3da62eb2687f0f24785a80eef09
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Tue Mar 27 15:40:26 2012 -0400

    fix pipe_tasks dependency version
</pre>
<h3><a name="91f167d8"/></a>91f167d8</h3>

<pre>
commit 91f167d808ceb4a9b01d110dd8cd858ddb1ab5f9
Author: Serge Monkewitz <smm@ipac.caltech.edu>
Date:   Tue Dec 13 07:47:49 2011 -0600

    Adjust table file
</pre>
<h3><a name="a2f3fa4f"/></a>a2f3fa4f</h3>

<pre>
commit a2f3fa4f0daf2b8cf89890c45216f7fbbc600c60
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Thu Mar 15 18:09:50 2012 -0400

    update dependency versions
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="2e80060d"/></a>2e80060d</h3>

<pre>
commit 2e80060d0c9925f50576f258182ecc112b5941fb
Author: Mario Juric <mjuric@lsst.org>
Date:   Wed Mar 5 16:29:20 2014 -0600

    removed explicit versions from the table file.
</pre>
<h3><a name="21af0bb5"/></a>21af0bb5</h3>

<pre>
commit 21af0bb557d73ee16cc3a02e547739e1cd6def5d
Author: Joshua Hoblitt <josh@hoblitt.com>
Date:   Tue May 26 15:42:16 2015 -0700

    replace eups.productDir() calls with lsst.utils.getPackageDir()
</pre>
<h3><a name="877b9389"/></a>877b9389</h3>

<pre>
commit 877b93894697b6533011e26a21cb704e9287d2b1
Author: pgee <pgee@pgeepc2.physics.ucdavis.edu>
Date:   Thu Jun 26 17:42:41 2014 -0700

    Change secondMomentStarSelector.py so that it can run under version 1 tables by remapping badFlags
</pre>
</div>


[Return to list](#homelist)
# <a name="include/lsst/meas/algorithms/ShapeletKernel.h"/></a>include/lsst/meas/algorithms/ShapeletKernel.h
### Diff:

<pre>
                // -*- LSST-C++ -*-
                #ifndef LSST_MEAS_ALGORITHMS_SHAPELETKERNEL_H
                #define LSST_MEAS_ALGORITHMS_SHAPELETKERNEL_H
                
                /* 
                 * LSST Data Management System
                 * Copyright 2008, 2009, 2010 LSST Corporation.
                 * 
                 * This product includes software developed by the
                 * LSST Project (http://www.lsst.org/).
                 *
                 * This program is free software: you can redistribute it and/or modify
                 * it under the terms of the GNU General Public License as published by
                 * the Free Software Foundation, either version 3 of the License, or
                 * (at your option) any later version.
                 * 
                 * This program is distributed in the hope that it will be useful,
                 * but WITHOUT ANY WARRANTY; without even the implied warranty of
                 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                 * GNU General Public License for more details.
                 * 
                 * You should have received a copy of the LSST License Statement and 
                 * the GNU General Public License along with this program.  If not, 
                 * see <http://www.lsstcorp.org/LegalNotices/>.
                 */
                
                /**
                 * @file
                 *
                 * @brief Defines LocalShapeletKernel and ShapeletKernel
                 *
                 * LocalShapeletKernel is appropriate for a small patch of an image where the 
                 * variation is expected to be minimal (e.g. over the size of a galaxy).
                 *
                 * ShapeletKernel is the more general case that includes variation across an image.
                 *
                 * @author Mike Jarvis
                 */
                #include "boost/shared_ptr.hpp"
                
                #include "lsst/afw/math/Kernel.h"
                #include "lsst/afw/image/Image.h"
                #include "lsst/afw/image/Wcs.h"
                #include "lsst/afw/geom/Point.h"
                #include "lsst/meas/algorithms/Shapelet.h"
                #include "lsst/meas/algorithms/ShapeletInterpolation.h"
                
                namespace lsst {
                namespace meas {
                namespace algorithms {
                
                    class LocalShapeletKernel : public lsst::afw::math::AnalyticKernel
                    {
                        /* @brief LocalShapeletKernel has no spatial variation
                         *
                         * LocalShapeletKernel is appropriate for a small patch of an image 
                         * where the variation is expected to be minimal (e.g. over the size 
                         * of a galaxy).
                         *
                         * It uses a shapelet description of the PSF for its underlying
                         * implementation.  As such, the functional form is an analytic
                         * function f(x,y) = Sum_pq b_pq psi_pq(x,y,sigma).
                         * (See the Shapelet class for more details.)
                         *
                         * The method computeImage is the best way to use this class.
                         *
                         * The Kernel classes allows for individual pixels to be 
                         * calculated one at a time, so we are forced to implement
                         * this as well, but it is much less efficient than calculating
                         * the whole image at once.
                         *
                         * There is a suggestion that we also include a method to 
                         * calculate the Fourier transform directly.  This would likely
                         * be more efficient than going through the normal image
                         * via an FFT, since shapelets are their own Fourier transforms
                         * (modulo factors of i).  
                         * One concern about this, which needs to be considered more
                         * carefully, is the effect of the telescope distortion (the Wcs).
                         * The shapelets are defined in sky coordinates.  However, the 
                         * appropriate image is in chip coordinates.  So there is a
                         * local distortion that is applied.  This means that the 
                         * direct Fourier transform is not quite as simple as I had
                         * initially thought.  However, I do suspect that this detail
                         * can be correctly calculated analytically and the method 
                         * could be written that is significantly more efficient than
                         * the FFT.
                         */
                
                    public :
                        typedef boost::shared_ptr<LocalShapeletKernel> Ptr;
                        typedef boost::shared_ptr<const LocalShapeletKernel> ConstPtr;
                
                        typedef lsst::afw::math::AnalyticKernel base;
                        typedef lsst::afw::geom::Point2D Point;
                        typedef lsst::afw::geom::Extent2I Extent;
                        typedef lsst::afw::image::Image<double> Image;
                        typedef lsst::afw::image::Wcs Wcs;
                
                        /*!
                         * @brief Constructor from a Shapelet
                         *
                         * If the size is omitted, then the width and height are 
                         * automatically calculated from the scale size of the shapelet,
                         * going out to 5 sigma.
                         *
                         * Default destructor, copy constructor and op= do the right thing.
                         * The copy and op= are shallow copies.
                         *
                         * The Wcs information is needed because the natural reference frame for 
                         * describing (and especially interpolating) the Psf is usually in world 
                         * coordinates rather than chip coordinates.
                         * So the dimensional units in the shapelet function are arcsec.  This is 
                         * converted to pixels when constructing an image.
                         */
                        LocalShapeletKernel(
                            Shapelet::ConstPtr shapelet,    ///< A shapelet function that defines the kernel
                            const Wcs::ConstPtr& wcsPtr,    ///< The Wcs information for the image
                            const Extent& size  ///< width/height of Kernel image
                        );
                
                        LocalShapeletKernel(
                            Shapelet::ConstPtr shapelet, ///< A shapelet function that defines the kernel
                            const Wcs::ConstPtr& wcsPtr     ///< The Wcs information for the image
                        );
                
                        /*!
                         * @brief Make an image of the kernel.
                         *
                         * computeImage can be done more efficiently than the AnalyticKernel 
                         * version from KernelFunction.
                         *
                         * x and y are only present for compatibility with the Kernel version.
                         * They are not used for anything.
                         */
                        double computeImage(
                            Image& image,       ///< image whose pixels are to be set (output)
                            bool doNormalize,   ///< normalize the image (so sum is 1)?
                            double x = 0.0,     ///< ignored
                            double y = 0.0      ///< ignored
                        ) const;
                
                    private :
                
                        Shapelet::ConstPtr _shapelet;
                        const Wcs::Ptr _wcsPtr;
                    };
                
                
                    class ShapeletKernel : public lsst::afw::math::AnalyticKernel
                    {
                        /* @brief ShapeletKernel includes spatial variation
                         *
                         * A ShapeletKernel is basically a function that can return
                         * a LocalShapeletKernel for any location on an Image.
                         * This is the most efficient way to use this class.
                         * Namely to get the LocalShapeletKernel appropriate for a 
                         * particular galaxy, and then convolve with that over a 
                         * small patch around the galaxy.  
                         *
                         * Convolving a larger image is probably not efficient the
                         * way that AnalyticKernel seems to be implemented.  AnalyticKernel
                         * defines a number of functions that seem to be used for 
                         * convolution, like determining the parameters of the 
                         * analytic function separately.  The interpolation is faster
                         * to calculate the full local function as a complete vector
                         * rather than one component at a time.
                         */
                    public :
                        typedef boost::shared_ptr<ShapeletKernel> Ptr;
                        typedef boost::shared_ptr<const ShapeletKernel> ConstPtr;
                
                        typedef lsst::afw::math::AnalyticKernel base;
                        typedef lsst::afw::geom::Point2D Point;
                        typedef lsst::afw::geom::Extent2I Extent;
                        typedef lsst::afw::image::Image<double> Image;
                        typedef lsst::afw::image::Wcs Wcs;
                
                        /*!
                         * @brief Constructor from a ShapeletInterpolation
                         *
                         * If the size is omitted, then the width and height are 
                         * automatically calculated from the scale size of the shapelet,
                         * going out to 5 sigma.
                         *
                         * The default destructor, copy constructor and op= do the right thing.
                         * The copy and op= are shallow (shared) copies.
                         *
                         * The Wcs information is needed because the natural reference frame for 
                         * describing (and especially interpolating) the Psf is usually in world 
                         * coordinates rather than chip coordinates.
                         * So the dimensional units in the shapelet function are arcsec.  This is 
                         * converted to pixels when constructing an image.
                         */
                        ShapeletKernel(
                            ShapeletInterpolation::ConstPtr interp,  ///< An interpolating function for shapelets
                            const Wcs::ConstPtr& wcsPtr,    ///< The Wcs information for the image
                            const Extent& size  ///< width/height of Kernel image
                        );
                        ShapeletKernel(
                            ShapeletInterpolation::ConstPtr interp,  ///< An interpolating function for shapelets
                            const Wcs::ConstPtr& wcsPtr     ///< The Wcs information for the image
                        );
                
                        /*!
                         * @brief Get the LocalShapeletKernel at a given point.
                         *
                         * pos is given in chip coordinates (i.e. units are pixels).
                         */
                        LocalShapeletKernel::ConstPtr getLocalKernel(
                            const Point& pos   ///< the position to interpolate to
                        ) const;
                
                        /*!
                         * @brief Make an image of the kernel at a specified location.
                         *
                         * computeImage can be done more efficiently than the AnalyticKernel 
                         * version from KernelFunction.
                         *
                         * This is equivalent to:
                         * getLocalKernel(Point(x,y))->computeImage(image,doNormalize);
                         */
                        double computeImage(
                            Image& image,       ///< image whose pixels are to be set (output)
                            bool doNormalize,   ///< normalize the image (so sum is 1)?
                            double x = 0.0,     ///< the x component of the position to interpolate to
                            double y = 0.0      ///< the y component of the position to interpolate to
                        ) const;
                
                    private :
                
                        ShapeletInterpolation::ConstPtr _interp;
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
232  <a href="#845de94d">845de94d</a> -         const Wcs::Ptr& _wcsPtr;</div>
              ?                       -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
232  <a href="#c55f8088">c55f8088</a> +         const Wcs::Ptr _wcsPtr;</div>
                    };
                
                }}}
                
                
                #endif
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="845de94d"/></a>845de94d</h3>

<pre>
commit 845de94d153ac790e5e7499785393ea407f4b45a
Author: rowen <rowen@git.lsstcorp.org>
Date:   Mon Feb 14 23:55:49 2011 +0000

    First cut at implementing ticket #1567.
    Includes Python registry for star selectors and another for PSF determiners.
    All existing unit tests pass.
    I also flattened the Python namespace to simplify use.
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="c55f8088"/></a>c55f8088</h3>

<pre>
commit c55f80885bb687c6be1725ac6ca1e7a3f3ee6c71
Author: Russell Owen <rowen@uw.edu>
Date:   Tue Oct 7 08:57:47 2014 -0700

    Change member variable from reference to shared_ptr to shared_ptr
    
    Using a reference was causing serious problems in C++11 and was totally unnecessary.
</pre>
</div>


[Return to list](#homelist)
# <a name="tests/testDetection.py"/></a>tests/testDetection.py
### Diff:

<pre>
                #!/usr/bin/env python
                
                # 
                # LSST Data Management System
                # Copyright 2008, 2009, 2010 LSST Corporation.
                # 
                # This product includes software developed by the
                # LSST Project (http://www.lsst.org/).
                #
                # This program is free software: you can redistribute it and/or modify
                # it under the terms of the GNU General Public License as published by
                # the Free Software Foundation, either version 3 of the License, or
                # (at your option) any later version.
                # 
                # This program is distributed in the hope that it will be useful,
                # but WITHOUT ANY WARRANTY; without even the implied warranty of
                # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                # GNU General Public License for more details.
                # 
                # You should have received a copy of the LSST License Statement and 
                # the GNU General Public License along with this program.  If not, 
                # see <http://www.lsstcorp.org/LegalNotices/>.
                #
                
                import math
                import unittest
                
                import numpy
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
29   <a href="#a38889f7">a38889f7</a> - import eups</div>
                
                import lsst.daf.base as dafBase
                import lsst.afw.math            as afwMath
                import lsst.pex.exceptions      as pexEx
                import lsst.pex.policy          as policy
                import lsst.pex.config          as pexConf
                import lsst.pex.logging         as pexLog
                import lsst.afw.image           as afwImage
                import lsst.afw.detection       as afwDet
                import lsst.afw.geom            as afwGeom
                import lsst.afw.table           as afwTable
                from lsst.meas.algorithms import SourceDetectionTask
                from lsst.meas.algorithms.testUtils import plantSources
                
                import lsst.utils.tests         as utilsTests
                
                display = False
                class DetectionTestCase(unittest.TestCase):
                    """Test the aperture correction."""
                    def testBasics(self):
                        bbox = afwGeom.Box2I(afwGeom.Point2I(256, 100), afwGeom.Extent2I(128, 127))
                        minCounts = 5000
                        maxCounts = 50000
                        starSigma = 1.5
                        numX = 5
                        numY = 5
                        coordList = self.makeCoordList(
                            bbox = bbox,
                            numX = numX,
                            numY = numY,
                            minCounts = minCounts,
                            maxCounts = maxCounts,
                            sigma = starSigma,
                        )
                        kwid = 11
                        sky = 2000
                        addPoissonNoise=True
                        exposure = plantSources(bbox=bbox, kwid=kwid, sky=sky, coordList=coordList,
                            addPoissonNoise=addPoissonNoise)
                
                        schema = afwTable.SourceTable.makeMinimalSchema()        
                        config = SourceDetectionTask.ConfigClass()
                        config.reEstimateBackground = False
                        task = SourceDetectionTask(config=config, schema=schema)
                        for doSmooth in (False, True):
                            taskSigma = 2.2
                            res = task.detectFootprints(exposure, doSmooth=doSmooth, sigma=taskSigma)
                            self.assertEqual(res.numPos, numX * numY)
                            self.assertEqual(res.numNeg, 0)
                            self.assertEqual(task.metadata.get("sigma"), taskSigma)
                            self.assertEqual(task.metadata.get("doSmooth"), doSmooth)
                            self.assertEqual(task.metadata.get("nGrow"), int(taskSigma * config.nSigmaToGrow + 0.5))
                
                            res = task.detectFootprints(exposure, doSmooth=doSmooth, sigma=None)
                            taskSigma = task.metadata.get("sigma")
                            self.assertTrue(abs(taskSigma - starSigma) < 0.1)
                            self.assertEqual(res.numPos, numX * numY)
                            self.assertEqual(res.numNeg, 0)
                    
                    def makeCoordList(self, bbox, numX, numY, minCounts, maxCounts, sigma):
                        """Make a coordList for makeExposure"""
                        dX = bbox.getWidth() / float(numX)
                        dY = bbox.getHeight() / float(numY)
                        minX = bbox.getMinX() + (dX / 2.0)
                        minY = bbox.getMinY() + (dY / 2.0)
                        dCounts = (maxCounts - minCounts) / (numX * numY - 1)
                    
                        coordList = []
                        counts = minCounts
                        for i in range(5):
                            x = minX + (dX * i)
                            for j in range(5):
                                y = minY + (dY * j)
                                coordList.append([x, y, counts, sigma])
                                counts += dCounts
                        return coordList
                     
                        
                        
                #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                
                def suite():
                    """Returns a suite containing all the test cases in this module."""
                    utilsTests.init()
                
                    suites = []
                    suites += unittest.makeSuite(DetectionTestCase)
                    suites += unittest.makeSuite(utilsTests.MemoryTestCase)
                
                    return unittest.TestSuite(suites)
                
                def run(exit=False):
                    """Run the tests"""
                    utilsTests.run(suite(), exit)
                 
                if __name__ == "__main__":
                    run(True)
                
                
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="a38889f7"/></a>a38889f7</h3>

<pre>
commit a38889f7b7c6e4a9e3140f75f8c1ef79ee3ec2d0
Author: Russell Owen <rowen@uw.edu>
Date:   Fri Jan 25 14:12:30 2013 -0800

    Added a very basic unit test for SourceDetectionClass.
    Fixed a bug in SourceDetectionClass
    Made plantSources in apCorrTest.py a bit more general and much better documented.
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
</div>


[Return to list](#homelist)
# <a name="tests/psfSelectTest.py"/></a>tests/psfSelectTest.py
### Diff:

<pre>
                #!/usr/bin/env python
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
3    <a href="#db780c9d">db780c9d</a> - # </div>
              ?  -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
3    <a href="#6e52ace2">6e52ace2</a> + #</div>
                # LSST Data Management System
                # Copyright 2008, 2009, 2010 LSST Corporation.
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
6    <a href="#db780c9d">db780c9d</a> - # </div>
              ?  -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
6    <a href="#6e52ace2">6e52ace2</a> + #</div>
                # This product includes software developed by the
                # LSST Project (http://www.lsst.org/).
                #
                # This program is free software: you can redistribute it and/or modify
                # it under the terms of the GNU General Public License as published by
                # the Free Software Foundation, either version 3 of the License, or
                # (at your option) any later version.
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
14   <a href="#db780c9d">db780c9d</a> - # </div>
              ?  -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
14   <a href="#6e52ace2">6e52ace2</a> + #</div>
                # This program is distributed in the hope that it will be useful,
                # but WITHOUT ANY WARRANTY; without even the implied warranty of
                # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                # GNU General Public License for more details.
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
19   <a href="#db780c9d">db780c9d</a> - # </div>
              ?  -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
19   <a href="#6e52ace2">6e52ace2</a> + #</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
20   <a href="#db780c9d">db780c9d</a> - # You should have received a copy of the LSST License Statement and </div>
              ?                                                                    -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
20   <a href="#6e52ace2">6e52ace2</a> + # You should have received a copy of the LSST License Statement and</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
21   <a href="#db780c9d">db780c9d</a> - # the GNU General Public License along with this program.  If not, </div>
              ?                                                                   -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
21   <a href="#6e52ace2">6e52ace2</a> + # the GNU General Public License along with this program.  If not,</div>
                # see <http://www.lsstcorp.org/LegalNotices/>.
                #
                
                # todo:
                # - growth curves
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
27   <a href="#db780c9d">db780c9d</a> - # - </div>
              ?    -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
27   <a href="#6e52ace2">6e52ace2</a> + # -</div>
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
29   <a href="#23486076">23486076</a> - import sys</div>
                import math
                import pdb                          # we may want to say pdb.set_trace()
                import unittest
                import time
                
                import numpy
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
36   <a href="#db780c9d">db780c9d</a> - import eups</div>
                
                import lsst.daf.base            as dafBase
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
39   <a href="#db780c9d">db780c9d</a> - import lsst.afw.math            as afwMath</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
40   <a href="#db780c9d">db780c9d</a> - import lsst.pex.exceptions      as pexEx</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
41   <a href="#fa9d0612">fa9d0612</a> - import lsst.pex.config          as pexConf</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
42   <a href="#db780c9d">db780c9d</a> - import lsst.pex.logging         as pexLog</div>
                import lsst.afw.image           as afwImage
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
44   <a href="#db780c9d">db780c9d</a> - import lsst.afw.detection       as afwDet</div>
                import lsst.afw.geom            as afwGeom
                import lsst.afw.table           as afwTable
                import lsst.afw.geom.ellipses   as geomEllip
                import lsst.meas.algorithms     as measAlg
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
42   <a href="#6e52ace2">6e52ace2</a> + import lsst.meas.base           as measBase</div>
                
                import lsst.afw.cameraGeom      as cameraGeom
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
51   <a href="#025bf414">025bf414</a> - import lsst.afw.cameraGeom.utils as cameraUtils</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
45   <a href="#0332997a">0332997a</a> + from lsst.afw.cameraGeom.testUtils import DetectorWrapper</div>
                
                import lsst.utils.tests         as utilsTests
                
                import lsst.afw.display.ds9     as ds9
                
                numpy.random.seed(500) # make test repeatable
                
                try:
                    type(verbose)
                except NameError:
                    verbose = 0
                
                try:
                    display
                except NameError:
                    display = False
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
68   <a href="#fa9d0612">fa9d0612</a> -     </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
62   <a href="#6e52ace2">6e52ace2</a> + </div>
                def plantSources(x0, y0, nx, ny, sky, nObj, wid, detector, useRandom=False):
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
71   <a href="#23486076">23486076</a> -     distorter = detector.getDistortion()</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
72   <a href="#23486076">23486076</a> -     </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
65   <a href="#0332997a">0332997a</a> +     tanSys = detector.makeCameraSys(cameraGeom.TAN_PIXELS)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
66   <a href="#0332997a">0332997a</a> +     pixToTanXYTransform = detector.getTransformMap()[tanSys]</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
67   <a href="#6e52ace2">6e52ace2</a> + </div>
                    img0 = afwImage.ImageF(afwGeom.ExtentI(nx, ny))
                    img = afwImage.ImageF(afwGeom.ExtentI(nx, ny))
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
75   <a href="#db780c9d">db780c9d</a> -     </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
70   <a href="#6e52ace2">6e52ace2</a> + </div>
                    ixx0, iyy0, ixy0 = wid*wid, wid*wid, 0.0
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
77   <a href="#83d5d49f">83d5d49f</a> -     m0 = geomEllip.Quadrupole(ixx0, iyy0, ixy0)</div>
                
                    edgeBuffer = 40.0*wid
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
80   <a href="#db780c9d">db780c9d</a> -     </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
74   <a href="#6e52ace2">6e52ace2</a> + </div>
                    flux = 1.0e4
                    nkx, nky = int(10*wid) + 1, int(10*wid) + 1
                    xhwid,yhwid = nkx/2, nky/2
                
                    nRow = int(math.sqrt(nObj))
                    xstep = (nx - 1 - 0.0*edgeBuffer)/(nRow+1)
                    ystep = (ny - 1 - 0.0*edgeBuffer)/(nRow+1)
                
                    if useRandom:
                        nObj = nRow*nRow
                
                    goodAdded0 = []
                    goodAdded = []
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
94   <a href="#db780c9d">db780c9d</a> -     </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
88   <a href="#6e52ace2">6e52ace2</a> + </div>
                    for i in range(nObj):
                
                        # get our position
                        if useRandom:
                            xcen0, ycen0 = numpy.random.uniform(nx), numpy.random.uniform(ny)
                        else:
                            xcen0, ycen0 = xstep*((i%nRow) + 1), ystep*(int(i/nRow) + 1)
                        ixcen0, iycen0 = int(xcen0), int(ycen0)
                
                        # distort position and shape
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
105  <a href="#1e155218">1e155218</a> -         p = distorter.distort(afwGeom.Point2D(xcen0, ycen0), detector)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
106  <a href="#1e155218">1e155218</a> -         m = distorter.distort(afwGeom.Point2D(x0+xcen0, y0+ycen0), m0, detector)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
99   <a href="#0332997a">0332997a</a> +         pTan = afwGeom.Point2D(xcen0, ycen0)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
100  <a href="#0332997a">0332997a</a> +         linTransform = pixToTanXYTransform.linearizeReverseTransform(pTan).getLinear()</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
101  <a href="#0332997a">0332997a</a> +         m = geomEllip.Quadrupole(ixx0, iyy0, ixy0)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
102  <a href="#0332997a">0332997a</a> +         m.transform(linTransform)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
103  <a href="#0332997a">0332997a</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
104  <a href="#0332997a">0332997a</a> +         p = pixToTanXYTransform.reverseTransform(pTan)</div>
                        xcen, ycen = xcen0, ycen0 #p.getX(), p.getY()
                        if (xcen < 1.0*edgeBuffer or (nx - xcen) < 1.0*edgeBuffer or
                            ycen < 1.0*edgeBuffer or (ny - ycen) < 1.0*edgeBuffer):
                            continue
                        ixcen, iycen = int(xcen), int(ycen)
                        ixx, iyy, ixy = m.getIxx(), m.getIyy(), m.getIxy()
                
                        # plant the object
                        tmp = 0.25*(ixx-iyy)**2 + ixy**2
                        a2 = 0.5*(ixx+iyy) + numpy.sqrt(tmp)
                        b2 = 0.5*(ixx+iyy) - numpy.sqrt(tmp)
                        #ellip = 1.0 - numpy.sqrt(b2/a2)
                        theta = 0.5*numpy.arctan2(2.0*ixy, ixx-iyy)
                        a = numpy.sqrt(a2)
                        b = numpy.sqrt(b2)
                
                        c, s = math.cos(theta), math.sin(theta)
                        good0, good = True, True
                        for y in range(nky):
                            iy = iycen + y - yhwid
                            iy0 = iycen0 + y - yhwid
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
128  <a href="#1e155218">1e155218</a> -             </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
126  <a href="#6e52ace2">6e52ace2</a> + </div>
                            for x in range(nkx):
                                ix = ixcen + x - xhwid
                                ix0 = ixcen0 + x - xhwid
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
132  <a href="#1e155218">1e155218</a> -                 </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
130  <a href="#6e52ace2">6e52ace2</a> + </div>
                                if ix >= 0 and ix < nx and iy >= 0 and iy < ny:
                                    dx, dy = ix - xcen, iy - ycen
                                    u =  c*dx + s*dy
                                    v = -s*dx + c*dy
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
137  <a href="#1e155218">1e155218</a> -                     I0 = flux/(2*math.pi*a*b)           </div>
              ?                                              -----------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
135  <a href="#6e52ace2">6e52ace2</a> +                     I0 = flux/(2*math.pi*a*b)</div>
                                    val = I0*math.exp(-0.5*((u/a)**2 + (v/b)**2))
                                    if val < 0:
                                        val = 0
                                    prevVal = img.get(ix, iy)
                                    img.set(ix, iy, val+prevVal)
                                else:
                                    good = False
                
                                if ix0 >=0 and ix0 < nx and iy0 >= 0 and iy0 < ny:
                                    dx, dy = ix - xcen, iy - ycen
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
148  <a href="#1e155218">1e155218</a> -                     I0 = flux/(2*math.pi*wid*wid)               </div>
              ?                                                  ---------------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
146  <a href="#6e52ace2">6e52ace2</a> +                     I0 = flux/(2*math.pi*wid*wid)</div>
                                    val = I0*math.exp(-0.5*((dx/wid)**2 + (dy/wid)**2))
                                    if val < 0:
                                        val = 0
                                    prevVal = img0.get(ix0, iy0)
                                    img0.set(ix0, iy0, val+prevVal)
                                else:
                                    good0 = False
                
                        if good0:
                            goodAdded0.append([xcen,ycen])
                        if good:
                            goodAdded.append([xcen,ycen])
                
                    # add sky and noise
                    img += sky
                    img0 += sky
                    noise = afwImage.ImageF(afwGeom.ExtentI(nx, ny))
                    noise0 = afwImage.ImageF(afwGeom.ExtentI(nx, ny))
                    for i in range(nx):
                        for j in range(ny):
                            noise.set(i, j, numpy.random.poisson(img.get(i,j) ))
                            noise0.set(i, j, numpy.random.poisson(img0.get(i,j) ))
                
                
                    edgeWidth = int(0.5*edgeBuffer)
                    mask = afwImage.MaskU(afwGeom.ExtentI(nx, ny))
                    left   = afwGeom.Box2I(afwGeom.Point2I(0,0), afwGeom.ExtentI(edgeWidth, ny))
                    right  = afwGeom.Box2I(afwGeom.Point2I(nx - edgeWidth,0), afwGeom.ExtentI(edgeWidth, ny))
                    top    = afwGeom.Box2I(afwGeom.Point2I(0,ny - edgeWidth), afwGeom.ExtentI(nx, edgeWidth))
                    bottom = afwGeom.Box2I(afwGeom.Point2I(0,0), afwGeom.ExtentI(nx, edgeWidth))
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
179  <a href="#b57422ac">b57422ac</a> -     </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
177  <a href="#6e52ace2">6e52ace2</a> + </div>
                    for pos in [left, right, top, bottom]:
                        msk = afwImage.MaskU(mask, pos, False)
                        msk.set(msk.getPlaneBitMask('EDGE'))
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
183  <a href="#1e155218">1e155218</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
181  <a href="#6e52ace2">6e52ace2</a> + </div>
                    expos = afwImage.makeExposure(afwImage.makeMaskedImage(noise, mask, afwImage.ImageF(noise, True)))
                    expos0 = afwImage.makeExposure(afwImage.makeMaskedImage(noise0, mask, afwImage.ImageF(noise0, True)))
                
                    im = expos.getMaskedImage().getImage()
                    im0 = expos0.getMaskedImage().getImage()
                    im -= sky
                    im0 -= sky
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
192  <a href="#db780c9d">db780c9d</a> -     </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
190  <a href="#6e52ace2">6e52ace2</a> + </div>
                    return expos, goodAdded, expos0, goodAdded0
                
                #################################################################
                # quick and dirty detection (note: we already subtracted background)
                def detectAndMeasure(exposure, detConfig, measConfig):
                    schema = afwTable.SourceTable.makeMinimalSchema()
                    detConfig.validate()
                    measConfig.validate()
                    detTask = measAlg.SourceDetectionTask(config=detConfig, schema=schema)
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
202  <a href="#af708f85">af708f85</a> -     measTask = measAlg.SourceMeasurementTask(config=measConfig, schema=schema)</div>
              ?                    ^^^  ^^ ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
200  <a href="#6e52ace2">6e52ace2</a> +     measTask = measBase.SingleFrameMeasurementTask(config=measConfig, schema=schema)</div>
              ?                    ^^^^  ^^^^^^ ^^
                    # detect
                    table = afwTable.SourceTable.make(schema)
                    sources = detTask.makeSourceCatalog(table, exposure).sources
                    # ... and measure
                    measTask.run(exposure, sources)
                    return sources
                
                #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                
                class PsfSelectionTestCase(unittest.TestCase):
                    """Test the aperture correction."""
                
                    def setUp(self):
                        self.x0, self.y0 = 0, 0
                        self.nx, self.ny = 512, 512 #2048, 4096
                        self.sky = 100.0
                        self.nObj = 100
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
221  <a href="#23486076">23486076</a> -         # make a distorter</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
222  <a href="#23486076">23486076</a> -         # This is a lot of distortion ... from circle r=1, to ellipse with a=1.3 (ie. 30%)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
223  <a href="#23486076">23486076</a> -         # For suprimecam, we expect only about 5%</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
224  <a href="#1e155218">1e155218</a> -         self.distCoeffs = [0.0, 1.0, 2.0e-04, 3.0e-8]</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
225  <a href="#23486076">23486076</a> -         lanczosOrder = 3</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
226  <a href="#55763608">55763608</a> -         coefficientsDistort = True</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
227  <a href="#1e155218">1e155218</a> -         self.distorter = cameraGeom.RadialPolyDistortion(self.distCoeffs, coefficientsDistort, lanczosOrder)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
228  <a href="#23486076">23486076</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
229  <a href="#23486076">23486076</a> -         # make a detector</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
219  <a href="#0332997a">0332997a</a> +         # make a detector with distortion</div>
              ?                          ++++++++++++++++
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
230  <a href="#23486076">23486076</a> -         self.detector = cameraUtils.makeDefaultCcd(afwGeom.Box2I(afwGeom.Point2I(0,0),</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
231  <a href="#23486076">23486076</a> -                                                                  afwGeom.Extent2I(self.nx, self.ny)))</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
232  <a href="#23486076">23486076</a> -         self.detector.setDistortion(self.distorter)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
233  <a href="#75e5f26a">75e5f26a</a> -         self.detector.setCenter(cameraGeom.FpPoint(255.5, 255.5)) # move boresight from center to 0,0</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
220  <a href="#0332997a">0332997a</a> +         self.detector = DetectorWrapper(</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
221  <a href="#0332997a">0332997a</a> +             bbox = afwGeom.Box2I(afwGeom.Point2I(0,0), afwGeom.Extent2I(self.nx, self.ny)),</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
222  <a href="#0332997a">0332997a</a> +             orientation = cameraGeom.Orientation(afwGeom.Point2D(255.0, 255.0)),</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
223  <a href="#0332997a">0332997a</a> +             radialDistortion = 0.925,</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
224  <a href="#0332997a">0332997a</a> +         ).detector</div>
                
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
226  <a href="#0332997a">0332997a</a> +         # make a detector with no distortion</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
227  <a href="#0332997a">0332997a</a> +         self.flatDetector = DetectorWrapper(</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
228  <a href="#0332997a">0332997a</a> +             bbox = afwGeom.Box2I(afwGeom.Point2I(0,0), afwGeom.Extent2I(self.nx, self.ny)),</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
229  <a href="#0332997a">0332997a</a> +             orientation = cameraGeom.Orientation(afwGeom.Point2D(255.0, 255.0)),</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
230  <a href="#0332997a">0332997a</a> +             radialDistortion = 0.0,</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
231  <a href="#0332997a">0332997a</a> +         ).detector</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
235  <a href="#23486076">23486076</a> -         if False:</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
236  <a href="#23486076">23486076</a> -             for x,y in [(0,0), (0, 511), (511,0), (511, 511)]:</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
237  <a href="#23486076">23486076</a> -                 p = afwGeom.Point2D(x, y)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
238  <a href="#23486076">23486076</a> -                 iqq = self.distorter.distort(p, geomEllip.Quadrupole(), self.detector)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
239  <a href="#23486076">23486076</a> -                 print x, y, geomEllip.Axes(iqq)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
240  <a href="#23486076">23486076</a> -                 print self.detector.getPositionFromPixel(p).getMm()</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
241  <a href="#23486076">23486076</a> -         </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
242  <a href="#23486076">23486076</a> -         print "Max distortion on this detector: ", self.distorter.computeMaxShear(self.detector)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
243  <a href="#23486076">23486076</a> -         </div>
                
                        # detection policies
                        self.detConfig = measAlg.SourceDetectionConfig()
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
247  <a href="#2925c3a4">2925c3a4</a> -         # Cannot use default background approximation order (6) for such a small image.</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
248  <a href="#2925c3a4">2925c3a4</a> -         self.detConfig.background.approxOrder = 4</div>
                
                        # measurement policies
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
251  <a href="#b0d8591f">b0d8591f</a> -         self.measSrcConfig = measAlg.SourceMeasurementConfig()</div>
              ?                                  ^^^  ^^ ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
237  <a href="#6e52ace2">6e52ace2</a> +         self.measSrcConfig = measBase.SingleFrameMeasurementConfig()</div>
              ?                                  ^^^^  ^^^^^^ ^^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
252  <a href="#fa9d0612">fa9d0612</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
238  <a href="#6e52ace2">6e52ace2</a> +         self.measSrcConfig.algorithms.names = [</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
239  <a href="#6e52ace2">6e52ace2</a> +                  "base_SdssCentroid",</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
240  <a href="#6e52ace2">6e52ace2</a> +                  "base_SdssShape",</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
241  <a href="#6e52ace2">6e52ace2</a> +                  "base_GaussianFlux",</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
242  <a href="#6e52ace2">6e52ace2</a> +                  "base_PsfFlux",</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
243  <a href="#6e52ace2">6e52ace2</a> +                  ]</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
244  <a href="#6e52ace2">6e52ace2</a> +         self.measSrcConfig.slots.centroid = "base_SdssCentroid"</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
245  <a href="#6e52ace2">6e52ace2</a> +         self.measSrcConfig.slots.shape = "base_SdssShape"</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
246  <a href="#6e52ace2">6e52ace2</a> +         self.measSrcConfig.slots.psfFlux = "base_PsfFlux"</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
247  <a href="#6e52ace2">6e52ace2</a> +         self.measSrcConfig.slots.apFlux = None</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
248  <a href="#6e52ace2">6e52ace2</a> +         self.measSrcConfig.slots.modelFlux = None</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
249  <a href="#6e52ace2">6e52ace2</a> +         self.measSrcConfig.slots.instFlux = None</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
250  <a href="#6e52ace2">6e52ace2</a> + </div>
                        # psf star selector
                        starSelectorFactory = measAlg.starSelectorRegistry["secondMoment"]
                        starSelectorConfig = starSelectorFactory.ConfigClass()
                        starSelectorConfig.fluxLim = 5000.0
                        starSelectorConfig.histSize = 32
                        starSelectorConfig.clumpNSigma = 1.0
                        starSelectorConfig.badFlags = []
                        self.starSelector = starSelectorFactory(starSelectorConfig)
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
261  <a href="#fa9d0612">fa9d0612</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
259  <a href="#6e52ace2">6e52ace2</a> + </div>
                        # psf determiner
                        psfDeterminerFactory = measAlg.psfDeterminerRegistry["pca"]
                        psfDeterminerConfig = psfDeterminerFactory.ConfigClass()
                        width, height = self.nx, self.ny
                        nEigenComponents = 3
                        psfDeterminerConfig.sizeCellX = width//3
                        psfDeterminerConfig.sizeCellY = height//3
                        psfDeterminerConfig.nEigenComponents = nEigenComponents
                        psfDeterminerConfig.spatialOrder = 1
                        psfDeterminerConfig.kernelSizeMin = 31
                        psfDeterminerConfig.nStarPerCell = 0
                        psfDeterminerConfig.nStarPerCellSpatialFit = 0 # unlimited
                        self.psfDeterminer = psfDeterminerFactory(psfDeterminerConfig)
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
275  <a href="#fa9d0612">fa9d0612</a> -         </div>
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
277  <a href="#025bf414">025bf414</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
274  <a href="#6e52ace2">6e52ace2</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
275  <a href="#6e52ace2">6e52ace2</a> + </div>
                    def tearDown(self):
                        del self.detConfig
                        del self.measSrcConfig
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
281  <a href="#1e155218">1e155218</a> -         del self.distorter</div>
                        del self.detector
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
280  <a href="#0332997a">0332997a</a> +         del self.flatDetector</div>
                        del self.starSelector
                        del self.psfDeterminer
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
286  <a href="#23486076">23486076</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
284  <a href="#6e52ace2">6e52ace2</a> + </div>
                    def testPsfCandidate(self):
                
                        detector = self.detector
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
288  <a href="#6e52ace2">6e52ace2</a> + </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
290  <a href="#23486076">23486076</a> -         distorter = self.distorter</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
291  <a href="#23486076">23486076</a> -         </div>
                        # make an exposure
                        print "Planting"
                        psfSigma = 1.5
                        exposDist, nGoodDist, expos0, nGood0 = plantSources(self.x0, self.y0,
                                                                            self.nx, self.ny,
                                                                            self.sky, self.nObj, psfSigma, detector)
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
298  <a href="#23486076">23486076</a> -         </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
299  <a href="#23486076">23486076</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
295  <a href="#6e52ace2">6e52ace2</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
296  <a href="#6e52ace2">6e52ace2</a> + </div>
                        # set the psf
                        kwid = 21
                        psf = measAlg.SingleGaussianPsf(kwid, kwid, psfSigma)
                        exposDist.setPsf(psf)
                        exposDist.setDetector(detector)
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
306  <a href="#23486076">23486076</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
303  <a href="#6e52ace2">6e52ace2</a> + </div>
                        # detect
                        print "detection"
                        sourceList       = detectAndMeasure(exposDist, self.detConfig, self.measSrcConfig)
                
                        # select psf stars
                        print "PSF selection"
                        psfCandidateList = self.starSelector.selectStars(exposDist, sourceList)
                
                        # determine the PSF
                        print "PSF determination"
                        metadata = dafBase.PropertyList()
                        t0 = time.time()
                        psf, cellSet = self.psfDeterminer.determinePsf(exposDist, psfCandidateList, metadata)
                        print "... determination time: ", time.time() - t0
                        print "PSF kernel width: ", psf.getKernel().getWidth()
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
322  <a href="#a668c5fa">a668c5fa</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
319  <a href="#6e52ace2">6e52ace2</a> + </div>
                        #######################################################################
                        # try to subtract off the stars and check the residuals
                
                        imgOrig = exposDist.getMaskedImage().getImage().getArray()
                        maxFlux = imgOrig.max()
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
329  <a href="#025bf414">025bf414</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
326  <a href="#6e52ace2">6e52ace2</a> + </div>
                        ############
                        # first try it with no distortion in the psf
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
332  <a href="#23486076">23486076</a> -         detector.setDistortion(None)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
329  <a href="#0332997a">0332997a</a> +         exposDist.setDetector(self.flatDetector)</div>
                
                        print "uncorrected subtraction"
                        subImg = afwImage.MaskedImageF(exposDist.getMaskedImage(), True)
                        for s in sourceList:
                            x, y = s.getX(), s.getY()
                            measAlg.subtractPsf(psf, subImg, x, y)
                
                        if display:
                            settings = {'scale': 'minmax', 'zoom':"to fit", 'mask':'transparency 80'}
                            ds9.mtv(exposDist, frame=1, title="full", settings=settings)
                            ds9.mtv(subImg, frame=2, title="subtracted", settings=settings)
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
344  <a href="#025bf414">025bf414</a> -             </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
341  <a href="#6e52ace2">6e52ace2</a> + </div>
                        img = subImg.getImage().getArray()
                        norm = img/math.sqrt(maxFlux)
                
                        smin0, smax0, srms0 = norm.min(), norm.max(), norm.std()
                
                        print "min:", smin0, "max: ", smax0, "rms: ", srms0
                
                
                        if False:
                            # This section has been disabled as distortion was removed from PsfCandidate and Psf;
                            # it will be reintroduced in the future with a different API, at which point this
                            # test code should be re-enabled.
                
                            ##############
                            # try it with the correct distortion in the psf
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
360  <a href="#d261a56b">d261a56b</a> -             detector.setDistortion(distorter)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
357  <a href="#0332997a">0332997a</a> +             exposDist.setDetector(self.detector)</div>
                
                            print "corrected subtraction"
                            subImg = afwImage.MaskedImageF(exposDist.getMaskedImage(), True)
                            for s in sourceList:
                                x, y = s.getX(), s.getY()
                                measAlg.subtractPsf(psf, subImg, x, y)
                
                            if display:
                                settings = {'scale': 'minmax', 'zoom':"to fit", 'mask':'transparency 80'}
                                ds9.mtv(exposDist, frame=1, title="full", settings=settings)
                                ds9.mtv(subImg, frame=2, title="subtracted", settings=settings)
                
                            img = subImg.getImage().getArray()
                            norm = img/math.sqrt(maxFlux)
                
                            smin, smax, srms = norm.min(), norm.max(), norm.std()
                
                            # with proper distortion, residuals should be < 4sigma (even for 512x512 pixels)
                            print "min:", smin, "max: ", smax, "rms: ", srms
                
                            # the distrib of residuals should be tighter
                            self.assertTrue(smin0 < smin)
                            self.assertTrue(smax0 > smax)
                            self.assertTrue(srms0 > srms)
                
                    def testDistortedImage(self):
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
388  <a href="#1e155218">1e155218</a> -         distorter = self.distorter</div>
                        detector = self.detector
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
390  <a href="#23486076">23486076</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
386  <a href="#6e52ace2">6e52ace2</a> + </div>
                        psfSigma = 1.5
                        stars = plantSources(self.x0, self.y0, self.nx, self.ny, self.sky, self.nObj, psfSigma, detector)
                        expos, starXy = stars[0], stars[1]
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
394  <a href="#23486076">23486076</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
390  <a href="#6e52ace2">6e52ace2</a> + </div>
                        # add some faint round galaxies ... only slightly bigger than the psf
                        gxy = plantSources(self.x0, self.y0, self.nx, self.ny, self.sky, 10, 1.07*psfSigma, detector)
                        mi = expos.getMaskedImage()
                        mi += gxy[0].getMaskedImage()
                        gxyXy = gxy[1]
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
400  <a href="#23486076">23486076</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
396  <a href="#6e52ace2">6e52ace2</a> + </div>
                        kwid = 15 #int(10*psfSigma) + 1
                        psf = measAlg.SingleGaussianPsf(kwid, kwid, psfSigma)
                        expos.setPsf(psf)
                
                
                        expos.setDetector(detector)
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
407  <a href="#23486076">23486076</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
403  <a href="#6e52ace2">6e52ace2</a> + </div>
                        ########################
                        # try without distorter
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
410  <a href="#1e155218">1e155218</a> -         detector.setDistortion(None)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
406  <a href="#0332997a">0332997a</a> +         expos.setDetector(self.flatDetector)</div>
                        print "Testing PSF selection *without* distortion"
                        sourceList       = detectAndMeasure(expos, self.detConfig, self.measSrcConfig)
                        psfCandidateList = self.starSelector.selectStars(expos, sourceList)
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
414  <a href="#23486076">23486076</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
410  <a href="#6e52ace2">6e52ace2</a> + </div>
                        ########################
                        # try with distorter
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
417  <a href="#1e155218">1e155218</a> -         detector.setDistortion(distorter)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
413  <a href="#0332997a">0332997a</a> +         expos.setDetector(self.detector)</div>
                        print "Testing PSF selection *with* distortion"
                        sourceList       = detectAndMeasure(expos, self.detConfig, self.measSrcConfig)
                        psfCandidateListCorrected = self.starSelector.selectStars(expos, sourceList)
                
                        def countObjects(candList):
                            nStar, nGxy = 0, 0
                            for c in candList:
                                s = c.getSource()
                                x, y = s.getX(), s.getY()
                                for xs,ys in starXy:
                                    if abs(x-xs) < 2.0 and abs(y-ys) < 2.0:
                                        nStar += 1
                                for xg,yg in gxyXy:
                                    if abs(x-xg) < 2.0 and abs(y-yg) < 2.0:
                                        nGxy += 1
                            return nStar, nGxy
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
434  <a href="#23486076">23486076</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
430  <a href="#6e52ace2">6e52ace2</a> + </div>
                        nstar, ngxy = countObjects(psfCandidateList)
                        nstarC, ngxyC = countObjects(psfCandidateListCorrected)
                
                        print "uncorrected nStar, nGxy: ", nstar, "/", len(starXy),"   ", ngxy, '/', len(gxyXy)
                        print "dist-corrected nStar, nGxy: ", nstarC, '/', len(starXy),"   ", ngxyC, '/', len(gxyXy)
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
440  <a href="#1e155218">1e155218</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
436  <a href="#6e52ace2">6e52ace2</a> + </div>
                        ########################
                        # display
                        if display:
                            iDisp = 1
                            ds9.mtv(expos, frame=iDisp)
                            size = 40
                            for c in psfCandidateList:
                                s = c.getSource()
                                ixx, iyy, ixy = size*s.getIxx(), size*s.getIyy(), size*s.getIxy()
                                ds9.dot("@:%g,%g,%g" % (ixx, ixy, iyy), s.getX(), s.getY(),
                                        frame=iDisp, ctype=ds9.RED)
                            size *= 2.0
                            for c in psfCandidateListCorrected:
                                s = c.getSource()
                                ixx, iyy, ixy = size*s.getIxx(), size*s.getIyy(), size*s.getIxy()
                                ds9.dot("@:%g,%g,%g" % (ixx, ixy, iyy), s.getX(), s.getY(),
                                        frame=iDisp, ctype=ds9.GREEN)
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
458  <a href="#23486076">23486076</a> -                 </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
454  <a href="#6e52ace2">6e52ace2</a> + </div>
                        # we shouldn't expect to get all available stars without distortion correcting
                        self.assertTrue(nstar < len(starXy))
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
461  <a href="#23486076">23486076</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
457  <a href="#6e52ace2">6e52ace2</a> + </div>
                        # here we should get all of them, occassionally 1 or 2 might get missed
                        self.assertTrue(nstarC >= 0.95*len(starXy))
                
                        # no contamination by small gxys
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
466  <a href="#23486076">23486076</a> -         self.assertEqual(ngxyC, 0) </div>
              ?                                   -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
462  <a href="#6e52ace2">6e52ace2</a> +         self.assertEqual(ngxyC, 0)</div>
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
468  <a href="#1e155218">1e155218</a> -                 </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
464  <a href="#db780c9d">db780c9d</a> + </div>
                #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                
                def suite():
                    """Returns a suite containing all the test cases in this module."""
                    utilsTests.init()
                
                    suites = []
                    suites += unittest.makeSuite(PsfSelectionTestCase)
                    suites += unittest.makeSuite(utilsTests.MemoryTestCase)
                
                    return unittest.TestSuite(suites)
                
                def run(exit=False):
                    """Run the tests"""
                    utilsTests.run(suite(), exit)
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
484  <a href="#db780c9d">db780c9d</a> -  </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
480  <a href="#6e52ace2">6e52ace2</a> + </div>
                if __name__ == "__main__":
                    run(True)
                
                
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="75e5f26a"/></a>75e5f26a</h3>

<pre>
commit 75e5f26a9a0ae02ba1239af73d0b3d94c2eef4c8
Author: Steven Bickerton <bick@astro.princeton.edu>
Date:   Tue Jan 31 10:52:31 2012 -0600

    updated FpPosition to FpPoint
</pre>
<h3><a name="db780c9d"/></a>db780c9d</h3>

<pre>
commit db780c9d6edeec005939d142a9e4962e4d6d91d8
Author: bick <bick@git.lsstcorp.org>
Date:   Thu Sep 8 18:55:32 2011 +0000

    added distortion correction for psf selection.
</pre>
<h3><a name="b0d8591f"/></a>b0d8591f</h3>

<pre>
commit b0d8591f0e28fd34c95f1548ebda5695e46d2a22
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Mon Feb 20 18:14:44 2012 -0500

    merge from tickets/1843; tests/psf.py is failing, but it appears to be failing on master too
</pre>
<h3><a name="1e155218"/></a>1e155218</h3>

<pre>
commit 1e155218c49dd990bf0ad4ce08f9cc82c8f03672
Author: Steven Bickerton <steven.bickerton@gmail.com>
Date:   Tue Sep 9 14:46:10 2014 +0900

    untabify
</pre>
<h3><a name="23486076"/></a>23486076</h3>

<pre>
commit 23486076c5cd0952678c469d8f80ffc908083cf2
Author: Steven Bickerton <bick@astro.princeton.edu>
Date:   Mon Jan 30 22:17:35 2012 -0600

    psfSelectTest passes ... but slow in determination.
</pre>
<h3><a name="2925c3a4"/></a>2925c3a4</h3>

<pre>
commit 2925c3a4c485f38aa6aec9cc057f844af48d24d1
Author: Steven Bickerton <steven.bickerton@gmail.com>
Date:   Fri Aug 29 12:52:02 2014 +0900

    allow Approx to be selected for background.
</pre>
<h3><a name="83d5d49f"/></a>83d5d49f</h3>

<pre>
commit 83d5d49f22037b8267639328fd168be558d1b50b
Author: Steven Bickerton <bick@astro.princeton.edu>
Date:   Thu Dec 22 19:18:15 2011 -0500

    changed psfcandidate templating to exposure.
</pre>
<h3><a name="af708f85"/></a>af708f85</h3>

<pre>
commit af708f856e01e0c83461449ff5dc92150465be46
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Wed Feb 29 18:05:15 2012 -0500

    fix incorrect config positional argument in Task ctors
</pre>
<h3><a name="b57422ac"/></a>b57422ac</h3>

<pre>
commit b57422acec8894027f9f7698cd8cf5caf2876618
Author: Steven Bickerton <bick@astro.princeton.edu>
Date:   Thu Jan 5 19:13:42 2012 -0500

    let star selector choose clump limits. add edge to test image.
</pre>
<h3><a name="025bf414"/></a>025bf414</h3>

<pre>
commit 025bf41427f7e13511c8dd5a7fdb87e491671d07
Author: Steven Bickerton <bick@astro.princeton.edu>
Date:   Thu Jan 26 17:14:37 2012 -0600

    more distortion updates
</pre>
<h3><a name="d261a56b"/></a>d261a56b</h3>

<pre>
commit d261a56b2c4b54b5e2754ac3fd9929b4af3d9045
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Sat Mar 16 19:19:57 2013 -0400

    Remove cameraGeom distortions from Psf and PsfCandidate.
    
    This will be reimplemented in the future using XYTransform and
    WarpedPsf; the previous implementation was problematic for WarpedPsf,
    CoaddPsf, and persistence (in fact, when distortion was used in a
    constructing a Psf, it was not being saved with the Psf, caused the
    saved Psf to be essentially incorrect).
</pre>
<h3><a name="a668c5fa"/></a>a668c5fa</h3>

<pre>
commit a668c5fa5f3f4184b45fa429090ea19ee3309821
Author: Steven Bickerton <bick@astro.princeton.edu>
Date:   Tue Jan 31 17:32:09 2012 -0600

    added a timer on determination in psfSelectTest.py
</pre>
<h3><a name="55763608"/></a>55763608</h3>

<pre>
commit 557636085b257630418c45c3eae7525f36d7c319
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Sun Feb 19 09:49:29 2012 -0500

    Renamed coefficientsUndistort to coefficientsDistort
</pre>
<h3><a name="fa9d0612"/></a>fa9d0612</h3>

<pre>
commit fa9d0612c926635d705677c2b0d859ad17d65866
Merge: 24f6b19 fe54344
Author: Steven Bickerton <bick@astro.princeton.edu>
Date:   Fri Feb 3 13:16:34 2012 -0600

    merged winter2012c to 1753
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="db780c9d"/></a>db780c9d</h3>

<pre>
commit db780c9d6edeec005939d142a9e4962e4d6d91d8
Author: bick <bick@git.lsstcorp.org>
Date:   Thu Sep 8 18:55:32 2011 +0000

    added distortion correction for psf selection.
</pre>
<h3><a name="0332997a"/></a>0332997a</h3>

<pre>
commit 0332997a6f5430001c459f1cdf986a0ad38607a5
Author: Russell Owen <rowen@uw.edu>
Date:   Fri Mar 7 12:03:52 2014 -0800

    Fixed remaining unit tests
</pre>
<h3><a name="6e52ace2"/></a>6e52ace2</h3>

<pre>
commit 6e52ace2e675ee56403e755754fcaf3e14d21541
Author: pgee <pgee@pgeepc2.physics.ucdavis.edu>
Date:   Mon Dec 8 11:08:39 2014 -0800

    DM-1608 move tests which will remain in meas_alg to new meas_base measurement framework.
    
    Also, delete those which were moved in DM-1456
</pre>
</div>


[Return to list](#homelist)
# <a name="tests/testPsfAttributes.py"/></a>tests/testPsfAttributes.py
### Diff:

<pre>
                #!/usr/bin/env python
                
                # 
                # LSST Data Management System
                # Copyright 2008, 2009, 2010 LSST Corporation.
                # 
                # This product includes software developed by the
                # LSST Project (http://www.lsst.org/).
                #
                # This program is free software: you can redistribute it and/or modify
                # it under the terms of the GNU General Public License as published by
                # the Free Software Foundation, either version 3 of the License, or
                # (at your option) any later version.
                # 
                # This program is distributed in the hope that it will be useful,
                # but WITHOUT ANY WARRANTY; without even the implied warranty of
                # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                # GNU General Public License for more details.
                # 
                # You should have received a copy of the LSST License Statement and 
                # the GNU General Public License along with this program.  If not, 
                # see <http://www.lsstcorp.org/LegalNotices/>.
                #
                
                """
                Tests for PSF code
                
                Run with:
                   python testPsfAttributes.py
                or
                   python
                   >>> import testPsfAttributes; psf.run()
                """
                
                import os, sys
                from math import *
                import numpy
                import unittest
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
39   <a href="#b2464af2">b2464af2</a> - import eups</div>
                import lsst.utils.tests as utilsTests
                import lsst.pex.exceptions as pexExceptions
                import lsst.pex.logging as logging
                import lsst.pex.policy as pexPolicy
                import lsst.afw.image as afwImage
                import lsst.afw.detection as afwDetection
                import lsst.afw.geom as afwGeom
                import lsst.afw.math as afwMath
                import lsst.afw.table as afwTable
                import lsst.afw.display.ds9 as ds9
                import lsst.daf.base as dafBase
                import lsst.afw.display.utils as displayUtils
                import lsst.meas.algorithms as measAlg
                import lsst.meas.algorithms.defects as defects
                import lsst.meas.algorithms.utils as maUtils
                import lsst.afw.cameraGeom as cameraGeom
                
                try:
                    type(verbose)
                except NameError:
                    verbose = 0
                    logging.Trace.setVerbosity("meas.algorithms.Interp", verbose)
                    logging.Trace.setVerbosity("afw.detection.Psf", verbose)
                    display = False
                
                #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                
                class PsfAttributesTestCase(unittest.TestCase):
                
                    def testGaussian(self):
                        """Check that we can measure a single Gaussian's attributes"""
                
                        sigma0 = 5.0
                        aEff0 = 4.0*pi*sigma0**2
                
                        xwid = int(12*sigma0)
                        ywid = xwid
                
                        # set the peak of the outer guassian to 0 so this is really a single gaussian.
                        psf = measAlg.SingleGaussianPsf(xwid, ywid, sigma0);
                
                        if False and display:
                            im = psf.computeImage(afwGeom.PointD(xwid//2, ywid//2))
                            ds9.mtv(im, title="N(%g) psf" % sigma0, frame=0)
                
                        psfAttrib = measAlg.PsfAttributes(psf, xwid//2, ywid//2)
                        sigma = psfAttrib.computeGaussianWidth(psfAttrib.ADAPTIVE_MOMENT)
                        m1    = psfAttrib.computeGaussianWidth(psfAttrib.FIRST_MOMENT)
                        m2    = psfAttrib.computeGaussianWidth(psfAttrib.SECOND_MOMENT)
                        noise = psfAttrib.computeGaussianWidth(psfAttrib.NOISE_EQUIVALENT)
                        bick  = psfAttrib.computeGaussianWidth(psfAttrib.BICKERTON)
                        aEff  = psfAttrib.computeEffectiveArea();
                
                        if verbose:
                            print "Adaptive            %g v %g" % (sigma0, sigma)
                            print "First moment        %g v %g" % (sigma0, m1)
                            print "Second moment       %g v %g" % (sigma0, m2)
                            print "Noise Equivalent    %g v %g" % (sigma0, sigma)
                            print "Bickerton           %g v %g" % (sigma0, bick)
                            print "Effective area      %g v %f" % (aEff0, aEff)
                
                        self.assertTrue(abs(sigma0 - sigma) <= 1.0e-2)
                        self.assertTrue(abs(sigma0 - m1) <= 3.0e-2)
                        self.assertTrue(abs(sigma0 - m2) <= 1.0e-2)
                        self.assertTrue(abs(sigma0 - noise) <= 1.0e-2)
                        self.assertTrue(abs(sigma0 - bick) <= 1.0e-2)
                        self.assertTrue(abs(aEff0 - aEff) <= 1.0e-2)
                
                #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                
                def suite():
                    """Returns a suite containing all the test cases in this module."""
                    utilsTests.init()
                
                    suites = []
                    suites += unittest.makeSuite(PsfAttributesTestCase)
                    suites += unittest.makeSuite(utilsTests.MemoryTestCase)
                    return unittest.TestSuite(suites)
                
                def run(exit = False):
                    """Run the utilsTests"""
                    utilsTests.run(suite(), exit)
                
                if __name__ == "__main__":
                    run(True)
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="b2464af2"/></a>b2464af2</h3>

<pre>
commit b2464af205082256fc5636574304ac6473d18c2c
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Tue Mar 19 14:15:41 2013 -0400

    Move KernelPsf, DoubleGaussianPsf, WarpedPsf, and associated tests to meas_algorithms.
    
    Moving Psf classes to meas_algorithms will let us implement shape and aperture
    flux measurements on Psf models using code in meas_algorithms.
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
</div>


[Return to list](#homelist)
# <a name="src/SingleGaussianPsf.cc"/></a>src/SingleGaussianPsf.cc
### Diff:

<pre>
                // -*- LSST-C++ -*-
                
                /* 
                 * LSST Data Management System
                 * Copyright 2008, 2009, 2010 LSST Corporation.
                 * 
                 * This product includes software developed by the
                 * LSST Project (http://www.lsst.org/).
                 *
                 * This program is free software: you can redistribute it and/or modify
                 * it under the terms of the GNU General Public License as published by
                 * the Free Software Foundation, either version 3 of the License, or
                 * (at your option) any later version.
                 * 
                 * This program is distributed in the hope that it will be useful,
                 * but WITHOUT ANY WARRANTY; without even the implied warranty of
                 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                 * GNU General Public License for more details.
                 * 
                 * You should have received a copy of the LSST License Statement and 
                 * the GNU General Public License along with this program.  If not, 
                 * see <http://www.lsstcorp.org/LegalNotices/>.
                 */
                 
                /*!
                 * Represent a PSF as a circularly symmetrical single Gaussian
                 *
                 * @file
                 *
                 * @ingroup algorithms
                 */
                #include <cmath>
                #include "lsst/afw/math/FunctionLibrary.h"
                #include "lsst/pex/exceptions.h"
                #include "lsst/meas/algorithms/SingleGaussianPsf.h"
                #include "lsst/afw/image/ImageUtils.h"
                #include "lsst/afw/table/io/InputArchive.h"
                #include "lsst/afw/table/io/OutputArchive.h"
                #include "lsst/afw/table/io/CatalogVector.h"
                
                namespace lsst { namespace meas { namespace algorithms {
                
                namespace {
                
                // Read-only singleton struct containing the schema and keys that a single-Gaussian Psf is mapped
                // to in record persistence.
                struct SingleGaussianPsfPersistenceHelper : private boost::noncopyable {
                    afw::table::Schema schema;
                    afw::table::Key< afw::table::Point<int> > dimensions;
                    afw::table::Key<double> sigma;
                
                    static SingleGaussianPsfPersistenceHelper const & get() {
                        static SingleGaussianPsfPersistenceHelper instance;
                        return instance;
                    }
                
                private:
                    SingleGaussianPsfPersistenceHelper() :
                        schema(),
                        dimensions(
                            schema.addField< afw::table::Point<int> >(
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
62   <a href="#0bd636d8">0bd636d8</a> -                 "dimensiosn", "width/height of realization of Psf", "pixels"</div>
              ?                           -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
62   <a href="#d4eb987e">d4eb987e</a> +                 "dimensions", "width/height of realization of Psf", "pixels"</div>
              ?                          +
                            )
                        ),
                        sigma(schema.addField<double>("sigma", "radius of Gaussian", "pixels"))
                    {
                        schema.getCitizen().markPersistent();
                    }
                };
                
                class SingleGaussianPsfFactory : public afw::table::io::PersistableFactory {
                public:
                
                    virtual PTR(afw::table::io::Persistable)
                    read(InputArchive const & archive, CatalogVector const & catalogs) const {
                        static SingleGaussianPsfPersistenceHelper const & keys = SingleGaussianPsfPersistenceHelper::get();
                        LSST_ARCHIVE_ASSERT(catalogs.size() == 1u);
                        LSST_ARCHIVE_ASSERT(catalogs.front().size() == 1u);
                        afw::table::BaseRecord const & record = catalogs.front().front();
                        LSST_ARCHIVE_ASSERT(record.getSchema() == keys.schema);
                        return boost::make_shared<SingleGaussianPsf>(
                            record.get(keys.dimensions.getX()),
                            record.get(keys.dimensions.getY()),
                            record.get(keys.sigma)
                        );
                    }
                
                    SingleGaussianPsfFactory(std::string const & name) : afw::table::io::PersistableFactory(name) {}
                
                };
                
                SingleGaussianPsfFactory registration("SingleGaussianPsf");
                
                PTR(afw::math::Kernel) makeSingleGaussianKernel(int width, int height, double sigma) {
                    if (sigma <= 0) {
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
96   <a href="#1b199e41">1b199e41</a> -         throw LSST_EXCEPT(lsst::pex::exceptions::DomainErrorException,</div>
              ?                                                             ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
96   <a href="#ed246562">ed246562</a> +         throw LSST_EXCEPT(lsst::pex::exceptions::DomainError,</div>
                                          (boost::format("sigma may not be 0: %g") % sigma).str());
                    }
                    afw::math::GaussianFunction1<double> sg(sigma);
                    return boost::make_shared<afw::math::SeparableKernel>(width, height, sg, sg);
                }
                
                } // anonymous
                
                SingleGaussianPsf::SingleGaussianPsf(int width, int height, double sigma) :
                    KernelPsf(makeSingleGaussianKernel(width, height, sigma)), _sigma(sigma)
                {}
                
                PTR(afw::detection::Psf) SingleGaussianPsf::clone() const {
                    return boost::make_shared<SingleGaussianPsf>(
                        getKernel()->getWidth(), getKernel()->getHeight(),
                        _sigma
                    );
                }
                
                std::string SingleGaussianPsf::getPersistenceName() const { return "SingleGaussianPsf"; }
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
118  <a href="#7d137b7e">7d137b7e</a> - std::string SingleGaussianPsf::getPythonModule() const { return "lsst.meas.algorithms"; }</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
119  <a href="#7d137b7e">7d137b7e</a> - </div>
                void SingleGaussianPsf::write(OutputArchiveHandle & handle) const {
                    static SingleGaussianPsfPersistenceHelper const & keys = SingleGaussianPsfPersistenceHelper::get();
                    afw::table::BaseCatalog catalog = handle.makeCatalog(keys.schema);
                    PTR(afw::table::BaseRecord) record = catalog.addNew();
                    (*record)[keys.dimensions.getX()] = getKernel()->getWidth();
                    (*record)[keys.dimensions.getY()] = getKernel()->getHeight();
                    (*record)[keys.sigma] = getSigma();
                    handle.saveCatalog(catalog);
                }
                
                }}} // namespace lsst::meas::algorithms
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="0bd636d8"/></a>0bd636d8</h3>

<pre>
commit 0bd636d8b6b4151e39b7276c9bc6e1a5c3d515c2
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Thu Jan 31 15:35:52 2013 -0500

    Modify SingleGaussianPsf persistence for better consistency with Kernel, better class names (see #2489 review)
</pre>
<h3><a name="1b199e41"/></a>1b199e41</h3>

<pre>
commit 1b199e4163496198e22dda1300afbd53eaabff1b
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Mon Mar 18 15:07:22 2013 -0400

    KernelPsf is now immutable, so we have to modify SingleGaussianPsf ctor implementation.
</pre>
<h3><a name="7d137b7e"/></a>7d137b7e</h3>

<pre>
commit 7d137b7e4539117419bcd70a7e08cdfe7478442f
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Fri Mar 1 17:00:02 2013 +0900

    Set Python modules appropriately for afw::table::io::Persistables.
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="ed246562"/></a>ed246562</h3>

<pre>
commit ed2465629cb2a0b4fe5aedeb9f447da02cf38736
Author: Russell Owen <rowen@uw.edu>
Date:   Tue Jun 17 16:16:40 2014 -0700

    Renamed exceptions
</pre>
<h3><a name="d4eb987e"/></a>d4eb987e</h3>

<pre>
commit d4eb987eb14b736aae7618e010fb27ca2504849c
Author: Michael Wood-Vasey <wmwv@pitt.edu>
Date:   Wed Mar 25 15:16:56 2015 -0700

    Fixes 'dimensiosn' typo in schema field name.
</pre>
</div>


[Return to list](#homelist)
# <a name="include/lsst/meas/algorithms/ShapeletPsfCandidate.h"/></a>include/lsst/meas/algorithms/ShapeletPsfCandidate.h
### Diff:

<pre>
                // -*- LSST-C++ -*-
                #ifndef LSST_MEAS_ALGORITHMS_SHAPELETPSFCANDIDATE_H
                #define LSST_MEAS_ALGORITHMS_SHAPELETPSFCANDIDATE_H
                /* 
                 * LSST Data Management System
                 * Copyright 2008, 2009, 2010 LSST Corporation.
                 * 
                 * This product includes software developed by the
                 * LSST Project (http://www.lsst.org/).
                 *
                 * This program is free software: you can redistribute it and/or modify
                 * it under the terms of the GNU General Public License as published by
                 * the Free Software Foundation, either version 3 of the License, or
                 * (at your option) any later version.
                 * 
                 * This program is distributed in the hope that it will be useful,
                 * but WITHOUT ANY WARRANTY; without even the implied warranty of
                 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                 * GNU General Public License for more details.
                 * 
                 * You should have received a copy of the LSST License Statement and 
                 * the GNU General Public License along with this program.  If not, 
                 * see <http://www.lsstcorp.org/LegalNotices/>.
                 */
                
                /**
                 * @file
                 *
                 * @brief A module for determining which objects are good PSF stars
                 *
                 * @author Mike Jarvis
                 */
                
                #include "lsst/afw/math/SpatialCell.h"
                #include "lsst/afw/table/Source.h"
                #include "boost/shared_ptr.hpp"
                
                namespace lsst {
                namespace meas {
                namespace algorithms {
                
                    class ShapeletPsfCandidate : 
                        public lsst::afw::math::SpatialCellCandidate
                    {
                    public :
                        typedef lsst::afw::math::SpatialCellCandidate base;
                        typedef lsst::afw::table::SourceRecord Source;
                
                        typedef boost::shared_ptr<ShapeletPsfCandidate> Ptr;
                        typedef boost::shared_ptr<const ShapeletPsfCandidate> ConstPtr;
                
                        /*!
                         * @brief Constructor takes position, size, and original source
                         *
                         * The object stores the position, and initial guess of the size
                         * and takes whatever other information is required from 
                         * the Source data.  Currently, only sky is used, but it 
                         * seemed wise to have source in the constructor in case we
                         * decide to store something else too.  For example, we
                         * will eventually want to extract some kind of color 
                         * information.
                         *
                         * I don't store the image, wcs, or weightImage in the 
                         * candidate itself, since all candidates will have the 
                         * same things for these.
                         *
                         * Once we start doing PCA-style interpolations that use
                         * sources from different exposures, we will have to do
                         * something different.  But that algorithm will require
                         * a pretty significant re-thinking of the design anyway, 
                         * so no point in worrying about that yet.
                         *
                         * (No destructor, copy constructor, or op=, since the defaults 
                         * do the right thing.)
                         *
                         */
                        inline ShapeletPsfCandidate(
                            double x,       ///< X position of candidate
                            double y,       ///< Y position of candidate
                            double size,    ///< Initial estimate of size
                            PTR(Source) source   ///< Original source
                        ) : 
                            base(x,y), _size(size), _source(source), _rating(1.)
                        {}
                
                        /*!
                         * @brief Set the shapelet decomposition
                         */
                        inline void setShapelet(Shapelet::ConstPtr shapelet)
                        { 
                            _shapelet = shapelet; 
                            if (_shapelet->hasCovariance())
                                _rating = _shapelet->getValues()(0) / sqrt((*_shapelet->getCovariance())(0,0));
                        }
                
                        /*!
                         * @brief Get position
                         */
                        inline double getX() const { return base::getXCenter(); }
                        inline double getY() const { return base::getYCenter(); }
                
                        /*!
                         * @brief Get size
                         */
                        inline double getSize() const { return _size; }
                
                        /*!
                         * @brief Get source
                         */
                        inline PTR(Source) getSource() const 
                        { 
                            assert(_source);
                            return _source; 
                        }
                
                        /*!
                         * @brief Get the shapelet decomposition
                         */
                        inline Shapelet::ConstPtr getShapelet() const 
                        { 
                            assert(_shapelet);
                            return _shapelet; 
                        }
                
                        /*! 
                         * @brief Check if shapelet decomposition is set
                         */
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
128  <a href="#9fde0d01">9fde0d01</a> -         inline bool hasShapelet() const { return _shapelet; }</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
128  <a href="#17369034">17369034</a> +         inline bool hasShapelet() const { return static_cast<bool>(_shapelet); }</div>
              ?                                                  ++++++++++++++++++         +
                
                        /*!
                         * @brief Define "goodness" of candidate for SpatialCell
                         */
                        inline double getCandidateRating() const { return _rating; }
                
                        /*!
                         * @brief Mark the candidate as BAD.
                         *
                         * SpatialCellCandidate::setStatus is a bit of a pain to use, since
                         * there doesn't seem to be any way around explicitly specifying 
                         * the full namespace and class specification of BAD.
                         * So do it once here.
                         */
                        inline void setBad() 
                        { 
                            lsst::afw::math::SpatialCellCandidate::setStatus(
                                lsst::afw::math::SpatialCellCandidate::BAD);
                        }
                
                    private :
                
                        double _size;
                        PTR(Source) _source;
                        Shapelet::ConstPtr _shapelet;
                        double _rating;
                    };
                
                }}}
                
                #endif
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="9fde0d01"/></a>9fde0d01</h3>

<pre>
commit 9fde0d01a91f9461eb12e264b157ee2088f5eb88
Author: jarvis <jarvis@git.lsstcorp.org>
Date:   Wed Apr 28 00:12:42 2010 +0000

    Forgot to svn add the .h files, so adding them now.  Also, made some changes related to changes in afw API (like use geom::PointD, etc.).
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="17369034"/></a>17369034</h3>

<pre>
commit 173690347a52761036c94163c187c32479329d48
Author: Russell Owen <rowen@uw.edu>
Date:   Tue Oct 7 08:20:08 2014 -0700

    Explicitly cast shared_ptr to bool for C++11 compatibility
</pre>
</div>


[Return to list](#homelist)
# <a name="src/shapelet/Ellipse_meas.cc"/></a>src/shapelet/Ellipse_meas.cc
### Diff:

<pre>
                // -*- LSST-C++ -*-
                
                /* 
                 * LSST Data Management System
                 * Copyright 2008, 2009, 2010 LSST Corporation.
                 * 
                 * This product includes software developed by the
                 * LSST Project (http://www.lsst.org/).
                 *
                 * This program is free software: you can redistribute it and/or modify
                 * it under the terms of the GNU General Public License as published by
                 * the Free Software Foundation, either version 3 of the License, or
                 * (at your option) any later version.
                 * 
                 * This program is distributed in the hope that it will be useful,
                 * but WITHOUT ANY WARRANTY; without even the implied warranty of
                 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                 * GNU General Public License for more details.
                 * 
                 * You should have received a copy of the LSST License Statement and 
                 * the GNU General Public License along with this program.  If not, 
                 * see <http://www.lsstcorp.org/LegalNotices/>.
                 */
                
                #include <cmath>
                #include <fstream>
                
                #include "lsst/meas/algorithms/shapelet/Ellipse.h"
                #include "lsst/meas/algorithms/shapelet/EllipseSolver.h"
                #include "lsst/meas/algorithms/shapelet/dbg.h"
                #include "lsst/meas/algorithms/shapelet/PsiHelper.h"
                #include "lsst/meas/algorithms/shapelet/Params.h"
                
                namespace lsst {
                namespace meas {
                namespace algorithms {
                namespace shapelet {
                
                    bool Ellipse::doMeasure(
                        const std::vector<PixelList>& pix,
                        const std::vector<BVec>* psf,
                        int galOrder, int galOrder2, int maxm,
                        double sigma, long& flag, double thresh, DMatrix* cov)
                    {
                        dbg<<"Start DoMeasure: galOrder = "<<galOrder<<", psf = "<<bool(psf)<<std::endl;
                        dbg<<"fix = "<<_isFixedCen<<"  "<<_isFixedGamma<<"  "<<_isFixedMu<<std::endl;
                        dbg<<"Thresh = "<<thresh<<std::endl;
                        int npix = 0;
                        for(size_t i=0;i<pix.size();++i) {
                            xdbg<<"npix["<<i<<"] = "<<pix[i].size()<<std::endl;
                            npix += pix[i].size();
                        }
                
                        int galSize = (galOrder+1)*(galOrder+2)/2;
                        if (npix <= galSize) {
                            dbg<<"Too few pixels ("<<npix<<") for given gal_order. \n";
                            return false;
                        }
                
                        BVec b(galOrder,sigma);
                
                        if (!doMeasureShapelet(pix,psf,b,galOrder,galOrder2,maxm)) {
                            xdbg<<"Could not measure a shapelet vector.\n";
                            return false;
                        }
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
66   <a href="#7134f640">7134f640</a> -         if (!b(0) > 0) {</div>
              ?             -     ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
66   <a href="#c531f740">c531f740</a> +         if (b(0) <= 0) {</div>
              ?                  ^^
                            xdbg<<"Bad flux in measured shapelet\n";
                            return false;
                        }
                        xdbg<<"b = "<<b<<std::endl;
                
                        return findRoundFrame(b,psf,galOrder2,thresh,flag,cov);
                    }
                
                    bool Ellipse::findRoundFrame(
                        const BVec& b, bool psf, int galOrder2, double thresh,
                        long& flag, DMatrix* cov)
                    {
                        DVector x(5);
                        DVector f(5);
                
                        x.setZero();
                
                        EllipseSolver3 solver(b,galOrder2,_isFixedCen,_isFixedGamma,_isFixedMu);
                
                #ifdef NOTHROW
                        solver.noUseCholesky();
                #endif
                        double ftol = thresh*thresh;
                        double gtol = thresh*ftol;
                        solver.setTol(ftol,gtol);
                        solver.setMinStep(gtol*thresh);
                        solver.setOutput(*dbgout);
                        if (XDEBUG) solver.useVerboseOutput();
                        solver.setMinStep(1.e-6*gtol);
                        solver.setDelta0(0.01);
                        solver.setMaxIter(200);
                        if (psf && !_isFixedMu) {
                            solver.setDelta0(0.01);
                            solver.useDogleg();
                            solver.dontZeroB11();
                            solver.useSVD();
                        } else {
                            solver.useHybrid();
                        }
                        if (solver.solve(x,f)) {
                            dbg<<"Found good round frame:\n";
                            dbg<<"x = "<<EIGEN_Transpose(x)<<std::endl;
                            dbg<<"f = "<<EIGEN_Transpose(f)<<std::endl;
                            double f_normInf = f.TMV_normInf();
                            if (psf && !_isFixedMu && !(f_normInf < solver.getFTol())) {
                                xdbg<<"Oops, Local minimum, not real solution.\n";
                                xdbg<<"f.norm = "<<f.norm()<<std::endl;
                                xdbg<<"f.normInf = "<<f_normInf<<std::endl;
                                xdbg<<"ftol = "<<solver.getFTol()<<std::endl;
                                dbg<<"FLAG SHEAR_LOCAL_MIN\n";
                                flag |= SHEAR_LOCAL_MIN;
                                return false;
                            }
                        }  else {
                            dbg<<"findRoundFrame solver failed:\n";
                            dbg<<"x = "<<EIGEN_Transpose(x)<<std::endl;
                            dbg<<"f = "<<EIGEN_Transpose(f)<<std::endl;
                            //if (XDEBUG) if (!solver.testJ(x,f,dbgout,1.e-5)) exit(1);
                            dbg<<"FLAG SHEAR_DIDNT_CONVERGE\n";
                            flag |= SHEAR_DIDNT_CONVERGE;
                            return false;
                        }
                
                        double sigma = b.getSigma();
                        preShiftBy(std::complex<double>(x(0),x(1))*sigma,
                                   std::complex<double>(x(2),x(3)),
                                   x(4));
                
                        dbg<<"ell => "<<*this<<std::endl;
                
                        if (cov) {
                            solver.useSVD();
                            solver.getCovariance(*cov);
                            xdbg<<"cov = "<<*cov<<std::endl;
                        }
                
                        return true;
                    }
                
                
                }}}}
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="7134f640"/></a>7134f640</h3>

<pre>
commit 7134f6402621b16360a1d04a296ff19cc9613f41
Author: jarvis <jarvis@git.lsstcorp.org>
Date:   Thu Feb 17 05:04:29 2011 +0000

    Merged in latest version of the files in the shapelet subdirectories.
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="c531f740"/></a>c531f740</h3>

<pre>
commit c531f740e177c9f69f0202f43301a853350e6a52
Author: Russell Owen <rowen@uw.edu>
Date:   Tue Oct 7 08:32:41 2014 -0700

    Eliminate compiler warning about logical not only applying to lhs of expr.
</pre>
</div>


[Return to list](#homelist)
# <a name="python/lsst/meas/algorithms/objectSizeStarSelector.py"/></a>python/lsst/meas/algorithms/objectSizeStarSelector.py
### Diff:

<pre>
                # 
                # LSST Data Management System
                # Copyright 2008, 2009, 2010 LSST Corporation.
                # 
                # This product includes software developed by the
                # LSST Project (http://www.lsst.org/).
                #
                # This program is free software: you can redistribute it and/or modify
                # it under the terms of the GNU General Public License as published by
                # the Free Software Foundation, either version 3 of the License, or
                # (at your option) any later version.
                # 
                # This program is distributed in the hope that it will be useful,
                # but WITHOUT ANY WARRANTY; without even the implied warranty of
                # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                # GNU General Public License for more details.
                # 
                # You should have received a copy of the LSST License Statement and 
                # the GNU General Public License along with this program.  If not, 
                # see <http://www.lsstcorp.org/LegalNotices/>.
                #
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
22   <a href="#168da8bf">168da8bf</a> - import collections</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
23   <a href="#a6de0723">a6de0723</a> - import math, sys</div>
              ?        ------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
22   <a href="#0332997a">0332997a</a> + import sys</div>
                
                import numpy
                try:
                    import matplotlib.pyplot as pyplot
                    fig = None
                except ImportError:
                    pyplot = None
                
                import lsst.pex.config as pexConfig
                import lsst.pex.logging as pexLogging
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
34   <a href="#168da8bf">168da8bf</a> - import lsst.afw.detection as afwDetection</div>
                import lsst.afw.display.ds9 as ds9
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
36   <a href="#168da8bf">168da8bf</a> - import lsst.afw.image as afwImage</div>
                import lsst.afw.math as afwMath
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
38   <a href="#168da8bf">168da8bf</a> - import lsst.afw.table as afwTable</div>
                import lsst.afw.geom as afwGeom
                import lsst.afw.geom.ellipses as geomEllip
                import lsst.afw.cameraGeom as cameraGeom
                from . import algorithmsLib
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
43   <a href="#168da8bf">168da8bf</a> - from . import measurement</div>
                from lsst.meas.algorithms.starSelectorRegistry import starSelectorRegistry
                
                class ObjectSizeStarSelectorConfig(pexConfig.Config):
                    fluxMin = pexConfig.Field(
                        doc = "specify the minimum psfFlux for good Psf Candidates",
                        dtype = float,
                        default = 12500.0,
                #        minValue = 0.0,
                        check = lambda x: x >= 0.0,
                    )
                    fluxMax = pexConfig.Field(
                        doc = "specify the maximum psfFlux for good Psf Candidates (ignored if == 0)",
                        dtype = float,
                        default = 0.0,
                        check = lambda x: x >= 0.0,
                    )
                    kernelSize = pexConfig.Field(
                        doc = "size of the Psf kernel to create",
                        dtype = int,
                        default = 21,
                    )
                    borderWidth = pexConfig.Field(
                        doc = "number of pixels to ignore around the edge of PSF candidate postage stamps",
                        dtype = int,
                        default = 0,
                    )
                    badFlags = pexConfig.ListField(
                        doc = "List of flags which cause a source to be rejected as bad",
                        dtype = str,
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
68   <a href="#ddc6bb1f">ddc6bb1f</a> +         default = ["base_PixelFlags_flag_edge",</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
69   <a href="#ddc6bb1f">ddc6bb1f</a> +                    "base_PixelFlags_flag_interpolatedCenter",</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
70   <a href="#ddc6bb1f">ddc6bb1f</a> +                    "base_PixelFlags_flag_saturatedCenter",</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
71   <a href="#ddc6bb1f">ddc6bb1f</a> +                    "base_PixelFlags_flag_crCenter",</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
73   <a href="#ed59a05b">ed59a05b</a> -         default = ["initial.flags.pixel.edge",</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
74   <a href="#ed59a05b">ed59a05b</a> -                    "initial.flags.pixel.interpolated.center",</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
75   <a href="#a774f361">a774f361</a> -                    "initial.flags.pixel.saturated.center",</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
76   <a href="#a774f361">a774f361</a> -                    "initial.flags.pixel.cr.center",</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
77   <a href="#15bb8125">15bb8125</a> -                    "initial.flags.pixel.bad",</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
78   <a href="#ad74fe85">ad74fe85</a> -                    "initial.flags.pixel.interpolated.any",</div>
                                   ]
                        )
                    widthMin = pexConfig.Field(
                        doc = "minimum width to include in histogram",
                        dtype = float,
                        default = 0.0,
                        check = lambda x: x >= 0.0,
                        )
                    widthMax = pexConfig.Field(
                        doc = "maximum width to include in histogram",
                        dtype = float,
                        default = 10.0,
                        check = lambda x: x >= 0.0,
                        )
                    sourceFluxField = pexConfig.Field(
                        doc = "Name of field in Source to use for flux measurement",
                        dtype = str,
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
89   <a href="#ddc6bb1f">ddc6bb1f</a> +         default = "base_GaussianFlux_flux"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
96   <a href="#4789b000">4789b000</a> -         default = "initial.flux.gaussian"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
97   <a href="#4789b000">4789b000</a> -         )</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
98   <a href="#071fcadc">071fcadc</a> -     widthStdAllowed = pexConfig.Field(</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
99   <a href="#071fcadc">071fcadc</a> -         doc = "Standard deviation of width allowed to be interpreted as good stars",</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
100  <a href="#071fcadc">071fcadc</a> -         dtype = float,</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
101  <a href="#071fcadc">071fcadc</a> -         default = 0.15,</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
102  <a href="#071fcadc">071fcadc</a> -         check = lambda x: x >= 0.0,</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
103  <a href="#071fcadc">071fcadc</a> -         )</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
104  <a href="#6b36f4d7">6b36f4d7</a> -     nSigmaClip = pexConfig.Field(</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
105  <a href="#6b36f4d7">6b36f4d7</a> -         doc = "Keep objects within this many sigma of cluster 0's median",</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
106  <a href="#6b36f4d7">6b36f4d7</a> -         dtype = float,</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
107  <a href="#6b36f4d7">6b36f4d7</a> -         default = 2.0,</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
108  <a href="#6b36f4d7">6b36f4d7</a> -         check = lambda x: x >= 0.0,</div>
                        )
                
                    def validate(self):
                        pexConfig.Config.validate(self)
                        if self.widthMin > self.widthMax:
                            raise pexConfig.FieldValidationError("widthMin (%f) > widthMax (%f)"
                                                                 % (self.widthMin, self.widthMax))
                
                class EventHandler(object):
                    """A class to handle key strokes with matplotlib displays"""
                    def __init__(self, axes, xs, ys, x, y, frames=[0]):
                        self.axes = axes
                        self.xs = xs
                        self.ys = ys
                        self.x = x
                        self.y = y
                        self.frames = frames
                
                        self.cid = self.axes.figure.canvas.mpl_connect('key_press_event', self)
                
                    def __call__(self, ev):
                        if ev.inaxes != self.axes:
                            return
                        
                        if ev.key and ev.key in ("p"):
                            dist = numpy.hypot(self.xs - ev.xdata, self.ys - ev.ydata)
                            dist[numpy.where(numpy.isnan(dist))] = 1e30
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
136  <a href="#efb5c053">efb5c053</a> -             dmin = min(dist)</div>
                
                            which = numpy.where(dist == min(dist))
                
                            x = self.x[which][0]
                            y = self.y[which][0]
                            for frame in self.frames:
                                ds9.pan(x, y, frame=frame)
                            ds9.cmdBuffer.flush()
                        else:
                            pass
                
                #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                
                def _assignClusters(yvec, centers):
                    """Return a vector of centerIds based on their distance to the centers"""
                    assert len(centers) > 0
                
                    minDist = numpy.nan*numpy.ones_like(yvec)
                    clusterId = numpy.empty_like(yvec)
                    clusterId.dtype = int               # zeros_like(..., dtype=int) isn't in numpy 1.5
                
                    for i, mean in enumerate(centers):
                        dist = abs(yvec - mean)
                        if i == 0:
                            update = dist == dist       # True for all points
                        else:
                            update = dist < minDist
                
                        minDist[update] = dist[update]
                        clusterId[update] = i
                
                    return clusterId
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
170  <a href="#071fcadc">071fcadc</a> - def _kcenters(yvec, nCluster,  useMedian=False, widthStdAllowed=0.15):</div>
              ?                                               ----------------------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
150  <a href="#d65abfcf">d65abfcf</a> + def _kcenters(yvec, nCluster,  useMedian=False):</div>
                    """A classic k-means algorithm, clustering yvec into nCluster clusters
                
                    Return the set of centres, and the cluster ID for each of the points
                
                    If useMedian is true, use the median of the cluster as its centre, rather than
                    the traditional mean
                
                    Serge Monkewitz points out that there other (maybe smarter) ways of seeding the means:
                       "e.g. why not use the Forgy or random partition initialization methods"
                    however, the approach adopted here seems to work well for the particular sorts of things
                    we're clustering in this application
                    """
                
                    assert nCluster > 0
                
                    mean0 = sorted(yvec)[len(yvec)//10] # guess
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
187  <a href="#071fcadc">071fcadc</a> -     delta = mean0 * widthStdAllowed * 2.0</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
188  <a href="#071fcadc">071fcadc</a> -     centers = mean0 + delta * numpy.arange(nCluster)</div>
              ?                    --------- -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
167  <a href="#efb5c053">efb5c053</a> +     centers = mean0*numpy.arange(1, nCluster + 1)</div>
              ?                                  +++        ++++
                        
                    func = numpy.median if useMedian else numpy.mean
                
                    clusterId = numpy.zeros_like(yvec) - 1            # which cluster the points are assigned to
                    clusterId.dtype = int                             # zeros_like(..., dtype=int) isn't in numpy 1.5
                    while True:
                        oclusterId = clusterId
                        clusterId = _assignClusters(yvec, centers)
                
                        if numpy.all(clusterId == oclusterId):
                            break
                
                        for i in range(nCluster):
                            centers[i] = func(yvec[clusterId == i])
                
                    return centers, clusterId
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
206  <a href="#071fcadc">071fcadc</a> - def _improveCluster(yvec, centers, clusterId, nsigma=2.0, nIteration=10, clusterNum=0, widthStdAllowed=0.15):</div>
              ?                                                                                      ----------------------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
185  <a href="#d65abfcf">d65abfcf</a> + def _improveCluster(yvec, centers, clusterId, nsigma=2.0, nIteration=10, clusterNum=0):</div>
                    """Improve our estimate of one of the clusters (clusterNum) by sigma-clipping around its median"""
                
                    nMember = sum(clusterId == clusterNum)
                    if nMember < 5:  # can't compute meaningful interquartile range, so no chance of improvement
                        return clusterId
                    for iter in range(nIteration):
                        old_nMember = nMember
                        
                        inCluster0 = clusterId == clusterNum
                        yv = yvec[inCluster0]
                        
                        centers[clusterNum] = numpy.median(yv)
                        stdev = numpy.std(yv)
                
                        syv = sorted(yv)
                        stdev_iqr = 0.741*(syv[int(0.75*nMember)] - syv[int(0.25*nMember)])
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
223  <a href="#071fcadc">071fcadc</a> -         median = syv[int(0.5*nMember)]</div>
                
                        sd = stdev if stdev < stdev_iqr else stdev_iqr
                
                        if False:
                            print "sigma(iqr) = %.3f, sigma = %.3f" % (stdev_iqr, numpy.std(yv))
                        newCluster0 = abs(yvec - centers[clusterNum]) < nsigma*sd
                        clusterId[numpy.logical_and(inCluster0, newCluster0)] = clusterNum
                        clusterId[numpy.logical_and(inCluster0, numpy.logical_not(newCluster0))] = -1
                        
                        nMember = sum(clusterId == clusterNum)
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
212  <a href="#efb5c053">efb5c053</a> +         if nMember == old_nMember:</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
234  <a href="#071fcadc">071fcadc</a> -         # 'sd < widthStdAllowed * median' prevents too much rejections</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
235  <a href="#071fcadc">071fcadc</a> -         if nMember == old_nMember or sd < widthStdAllowed * median:</div>
                            break
                
                    return clusterId
                
                def plot(mag, width, centers, clusterId, marker="o", markersize=2, markeredgewidth=0, ltype='-',
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
241  <a href="#6b36f4d7">6b36f4d7</a> -          magType="model", clear=True):</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
218  <a href="#efb5c053">efb5c053</a> +          clear=True):</div>
                
                    global fig
                    if not fig:
                        fig = pyplot.figure()
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
223  <a href="#efb5c053">efb5c053</a> +         newFig = True</div>
                    else:
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
225  <a href="#efb5c053">efb5c053</a> +         newFig = False</div>
                        if clear:
                            fig.clf()
                
                    axes = fig.add_axes((0.1, 0.1, 0.85, 0.80));
                
                    xmin = sorted(mag)[int(0.05*len(mag))]
                    xmax = sorted(mag)[int(0.95*len(mag))]
                
                    axes.set_xlim(-17.5, -13)
                    axes.set_xlim(xmin - 0.1*(xmax - xmin), xmax + 0.1*(xmax - xmin))
                    axes.set_ylim(0, 10)
                
                    colors = ["r", "g", "b", "c", "m", "k",]
                    for k, mean in enumerate(centers):
                        if k == 0:
                            axes.plot(axes.get_xlim(), (mean, mean,), "k%s" % ltype)
                
                        l = (clusterId == k)
                        axes.plot(mag[l], width[l], marker, markersize=markersize, markeredgewidth=markeredgewidth,
                                  color=colors[k%len(colors)])
                
                    l = (clusterId == -1)
                    axes.plot(mag[l], width[l], marker, markersize=markersize, markeredgewidth=markeredgewidth,
                              color='k')
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
272  <a href="#6b36f4d7">6b36f4d7</a> -     if clear:</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
273  <a href="#6b36f4d7">6b36f4d7</a> -         axes.set_xlabel("Instrumental %s mag" % magType)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
251  <a href="#efb5c053">efb5c053</a> +     if newFig:</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
252  <a href="#efb5c053">efb5c053</a> +         axes.set_xlabel("model")</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
274  <a href="#6b36f4d7">6b36f4d7</a> -         axes.set_ylabel(r"$\sqrt{(I_{xx} + I_{yy})/2}$")</div>
              ?                                  -               ---
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
253  <a href="#efb5c053">efb5c053</a> +         axes.set_ylabel(r"$\sqrt{I_{xx} + I_{yy}}$")</div>
                
                    return fig
                        
                #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                
                class ObjectSizeStarSelector(object):
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
260  <a href="#bc4b5c7c">bc4b5c7c</a> +     """!</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
261  <a href="#bc4b5c7c">bc4b5c7c</a> +     A measurePsfTask star selector</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
262  <a href="#bc4b5c7c">bc4b5c7c</a> +     """</div>
                    ConfigClass = ObjectSizeStarSelectorConfig
                
                    def __init__(self, config):
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
284  <a href="#168da8bf">168da8bf</a> -         """Construct a star selector that uses second moments</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
285  <a href="#168da8bf">168da8bf</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
266  <a href="#bc4b5c7c">bc4b5c7c</a> +         """!</div>
              ?         ++++
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
286  <a href="#168da8bf">168da8bf</a> -         This is a naive algorithm and should be used with caution.</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
267  <a href="#bc4b5c7c">bc4b5c7c</a> +         Construct a star selector that looks for a cluster of small objects in a size-magnitude plot.</div>
                        
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
288  <a href="#168da8bf">168da8bf</a> -         @param[in] config: An instance of ObjectSizeStarSelectorConfig</div>
              ?         ^                -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
269  <a href="#bc4b5c7c">bc4b5c7c</a> +         \param[in] config An instance of ObjectSizeStarSelectorConfig</div>
              ?         ^
                        """
                        self._kernelSize  = config.kernelSize
                        self._borderWidth = config.borderWidth
                        self._widthMin = config.widthMin
                        self._widthMax = config.widthMax
                        self._fluxMin  = config.fluxMin
                        self._fluxMax  = config.fluxMax
                        self._badFlags = config.badFlags
                        self._sourceFluxField = config.sourceFluxField
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
298  <a href="#071fcadc">071fcadc</a> -         self._widthStdAllowed = config.widthStdAllowed</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
299  <a href="#6b36f4d7">6b36f4d7</a> -         self._nSigmaClip = config.nSigmaClip</div>
                            
                    def selectStars(self, exposure, catalog, matches=None):
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
302  <a href="#168da8bf">168da8bf</a> -         """Return a list of PSF candidates that represent likely stars</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
281  <a href="#bc4b5c7c">bc4b5c7c</a> +         """!Return a list of PSF candidates that represent likely stars</div>
              ?            +
                        
                        A list of PSF candidates may be used by a PSF fitter to construct a PSF.
                        
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
306  <a href="#168da8bf">168da8bf</a> -         @param[in] exposure: the exposure containing the sources</div>
              ?         ^                  -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
285  <a href="#bc4b5c7c">bc4b5c7c</a> +         \param[in] exposure the exposure containing the sources</div>
              ?         ^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
307  <a href="#168da8bf">168da8bf</a> -         @param[in] catalog: a SourceCatalog containing sources that may be stars</div>
              ?         ^                 -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
286  <a href="#bc4b5c7c">bc4b5c7c</a> +         \param[in] catalog a SourceCatalog containing sources that may be stars</div>
              ?         ^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
308  <a href="#168da8bf">168da8bf</a> -         @param[in] matches: astrometric matches; ignored by this star selector</div>
              ?         ^                 -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
287  <a href="#bc4b5c7c">bc4b5c7c</a> +         \param[in] matches astrometric matches; ignored by this star selector</div>
              ?         ^
                        
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
310  <a href="#168da8bf">168da8bf</a> -         @return psfCandidateList: a list of PSF candidates.</div>
              ?         ^                       -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
289  <a href="#bc4b5c7c">bc4b5c7c</a> +         \return psfCandidateList a list of PSF candidates.</div>
              ?         ^
                        """
                        import lsstDebug
                        display = lsstDebug.Info(__name__).display
                        displayExposure = lsstDebug.Info(__name__).displayExposure     # display the Exposure + spatialCells
                        plotMagSize = lsstDebug.Info(__name__).plotMagSize             # display the magnitude-size relation
                        dumpData = lsstDebug.Info(__name__).dumpData                   # dump data to pickle file?
                
                        # create a log for my application
                        logger = pexLogging.Log(pexLogging.getDefaultLog(), "meas.algorithms.objectSizeStarSelector")
                
                        detector = exposure.getDetector()
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
301  <a href="#0332997a">0332997a</a> +         pixToTanXYTransform = None</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
322  <a href="#1e155218">1e155218</a> -         distorter = None</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
323  <a href="#1e155218">1e155218</a> -         xy0 = afwGeom.Point2D(0,0)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
324  <a href="#1e155218">1e155218</a> -         if not detector is None:</div>
              ?           ----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
302  <a href="#0332997a">0332997a</a> +         if detector is not None:</div>
              ?                       ++++
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
303  <a href="#0332997a">0332997a</a> +             tanSys = detector.makeCameraSys(cameraGeom.TAN_PIXELS)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
304  <a href="#bebc9415">bebc9415</a> +             pixToTanXYTransform = detector.getTransformMap().get(tanSys)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
325  <a href="#1e155218">1e155218</a> -             cPix = detector.getCenterPixel()</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
326  <a href="#1e155218">1e155218</a> -             detSize = detector.getSize()</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
327  <a href="#1e155218">1e155218</a> -             xy0.setX(cPix.getX() - int(0.5*detSize.getMm()[0]))</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
328  <a href="#1e155218">1e155218</a> -             xy0.setY(cPix.getY() - int(0.5*detSize.getMm()[1]))</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
329  <a href="#1e155218">1e155218</a> -             distorter = detector.getDistortion()</div>
                        #
                        # Look at the distribution of stars in the magnitude-size plane
                        #
                        flux = catalog.get(self._sourceFluxField)
                
                        xx = numpy.empty(len(catalog))
                        xy = numpy.empty_like(xx)
                        yy = numpy.empty_like(xx)
                        for i, source in enumerate(catalog):
                            Ixx, Ixy, Iyy = source.getIxx(), source.getIxy(), source.getIyy()
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
340  <a href="#168da8bf">168da8bf</a> -             if distorter:</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
341  <a href="#168da8bf">168da8bf</a> -                 xpix, ypix = source.getX() + xy0.getX(), source.getY() + xy0.getY()</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
342  <a href="#168da8bf">168da8bf</a> -                 p = afwGeom.Point2D(xpix, ypix)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
315  <a href="#0332997a">0332997a</a> +             if pixToTanXYTransform:</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
316  <a href="#0332997a">0332997a</a> +                 p = afwGeom.Point2D(source.getX(), source.getY())</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
317  <a href="#0332997a">0332997a</a> +                 linTransform = pixToTanXYTransform.linearizeForwardTransform(p).getLinear()</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
343  <a href="#168da8bf">168da8bf</a> -                 m = distorter.undistort(p, geomEllip.Quadrupole(Ixx, Iyy, Ixy), detector)</div>
              ?                    -----------------------                                    -----------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
318  <a href="#0332997a">0332997a</a> +                 m = geomEllip.Quadrupole(Ixx, Iyy, Ixy)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
344  <a href="#168da8bf">168da8bf</a> -                 Ixx, Ixy, Iyy = m.getIxx(), m.getIxy(), m.getIyy()</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
319  <a href="#0332997a">0332997a</a> +                 m.transform(linTransform)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
320  <a href="#0332997a">0332997a</a> +                 Ixx, Iyy, Ixy = m.getIxx(), m.getIyy(), m.getIxy()</div>
                
                            xx[i], xy[i], yy[i] = Ixx, Ixy, Iyy
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
347  <a href="#071fcadc">071fcadc</a> - </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
323  <a href="#168da8bf">168da8bf</a> +             </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
348  <a href="#6b36f4d7">6b36f4d7</a> -         width = numpy.sqrt(0.5*(xx + yy))</div>
              ?                            -----        -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
324  <a href="#168da8bf">168da8bf</a> +         width = numpy.sqrt(xx + yy)</div>
                
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
326  <a href="#8cffc17a">8cffc17a</a> +         badFlags = self._badFlags</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
327  <a href="#ddc6bb1f">ddc6bb1f</a> + </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
350  <a href="#168da8bf">168da8bf</a> -         bad = reduce(lambda x, y: numpy.logical_or(x, catalog.get(y)), self._badFlags, False)</div>
              ?                                                                        ------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
328  <a href="#ddc6bb1f">ddc6bb1f</a> +         bad = reduce(lambda x, y: numpy.logical_or(x, catalog.get(y)), badFlags, False)</div>
                        bad = numpy.logical_or(bad, flux < self._fluxMin)
                        bad = numpy.logical_or(bad, numpy.logical_not(numpy.isfinite(width)))
                        bad = numpy.logical_or(bad, numpy.logical_not(numpy.isfinite(flux)))
                        bad = numpy.logical_or(bad, width < self._widthMin)
                        bad = numpy.logical_or(bad, width > self._widthMax)
                        if self._fluxMax > 0:
                            bad = numpy.logical_or(bad, flux > self._fluxMax)
                        good = numpy.logical_not(bad)
                
                        if not numpy.any(good):
                            raise RuntimeError("No objects passed our cuts for consideration as psf stars")
                
                        mag = -2.5*numpy.log10(flux[good])
                        width = width[good]
                        #
                        # Look for the maximum in the size histogram, then search upwards for the minimum that separates
                        # the initial peak (of, we presume, stars) from the galaxies
                        #
                        if dumpData:
                            import os, cPickle as pickle
                            _ii = 0
                            while True:
                                pickleFile = os.path.expanduser(os.path.join("~", "widths-%d.pkl" % _ii))
                                if not os.path.exists(pickleFile):
                                    break
                                _ii += 1
                
                            with open(pickleFile, "wb") as fd:
                                pickle.dump(mag, fd, -1)
                                pickle.dump(width, fd, -1)
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
382  <a href="#071fcadc">071fcadc</a> -         centers, clusterId = _kcenters(width, nCluster=4, useMedian=True,</div>
              ?                                                                         ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
360  <a href="#d65abfcf">d65abfcf</a> +         centers, clusterId = _kcenters(width, nCluster=4, useMedian=True)</div>
              ?                                                                         ^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
383  <a href="#071fcadc">071fcadc</a> -                                        widthStdAllowed=self._widthStdAllowed)</div>
                
                        if display and plotMagSize and pyplot:
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
386  <a href="#6b36f4d7">6b36f4d7</a> -             fig = plot(mag, width, centers, clusterId, magType=self._sourceFluxField.split(".")[-1].title(),</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
363  <a href="#efb5c053">efb5c053</a> +             fig = plot(mag, width, centers, clusterId,</div>
                                       marker="+", markersize=3, markeredgewidth=None, ltype=':', clear=True)
                        else:
                            fig = None
                        
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
391  <a href="#071fcadc">071fcadc</a> -         clusterId = _improveCluster(width, centers, clusterId,</div>
              ?                                                              ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
368  <a href="#d65abfcf">d65abfcf</a> +         clusterId = _improveCluster(width, centers, clusterId)</div>
              ?                                                              ^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
392  <a href="#6b36f4d7">6b36f4d7</a> -                                     nsigma = self._nSigmaClip, widthStdAllowed=self._widthStdAllowed)</div>
                        
                        if display and plotMagSize and pyplot:
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
395  <a href="#6b36f4d7">6b36f4d7</a> -             plot(mag, width, centers, clusterId, marker="x", markersize=3, markeredgewidth=None, clear=False)</div>
              ?                                                                                                -------------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
371  <a href="#efb5c053">efb5c053</a> +             plot(mag, width, centers, clusterId, marker="x", markersize=3, markeredgewidth=None)</div>
                        
                        stellar = (clusterId == 0)
                        #
                        # We know enough to plot, if so requested
                        #
                        frame = 0
                
                        if fig:
                            if display and displayExposure:
                                ds9.mtv(exposure.getMaskedImage(), frame=frame, title="PSF candidates")
                
                                global eventHandler
                                eventHandler = EventHandler(fig.get_axes()[0], mag, width,
                                                            catalog.getX()[good], catalog.getY()[good], frames=[frame])
                
                            fig.show()
                
                            #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                
                            while True:
                                try:
                                    reply = raw_input("continue? [c h(elp) q(uit) p(db)] ").strip()
                                except EOFError:
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
419  <a href="#6b36f4d7">6b36f4d7</a> -                     reply = None</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
420  <a href="#6b36f4d7">6b36f4d7</a> -                 if not reply:</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
421  <a href="#6b36f4d7">6b36f4d7</a> -                     reply = "c"</div>
              ?                              ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
395  <a href="#efb5c053">efb5c053</a> +                     reply = "y"</div>
              ?                              ^
                
                                if reply:
                                    if reply[0] == "h":
                                        print """\
                    We cluster the points; red are the stellar candidates and the other colours are other clusters.
                    Points labelled + are rejects from the cluster (only for cluster 0).
                
                    At this prompt, you can continue with almost any key; 'p' enters pdb, and 'h' prints this text
                
                    If displayExposure is true, you can put the cursor on a point and hit 'p' to see it in ds9.
                    """
                                    elif reply[0] == "p":
                                        import pdb; pdb.set_trace()
                                    elif reply[0] == 'q':
                                        sys.exit(1)
                                    else:
                                        break
                        
                        if display and displayExposure:
                            mi = exposure.getMaskedImage()
                    
                            with ds9.Buffering():
                                for i, source in enumerate(catalog):
                                    if good[i]:
                                        ctype = ds9.GREEN # star candidate
                                    else:
                                        ctype = ds9.RED # not star
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
449  <a href="#1e155218">1e155218</a> -                         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
423  <a href="#0332997a">0332997a</a> + </div>
                                    ds9.dot("+", source.getX() - mi.getX0(),
                                            source.getY() - mi.getY0(), frame=frame, ctype=ctype)
                        #
                        # Time to use that stellar classification to generate psfCandidateList
                        #
                        with ds9.Buffering():
                            psfCandidateList = []
                            for isStellar, source in zip(stellar, [s for g, s in zip(good, catalog) if g]):
                                if not isStellar:
                                    continue
                                
                                try:
                                    psfCandidate = algorithmsLib.makePsfCandidate(source, exposure)
                                    # The setXXX methods are class static, but it's convenient to call them on
                                    # an instance as we don't know Exposure's pixel type
                                    # (and hence psfCandidate's exact type)
                                    if psfCandidate.getWidth() == 0:
                                        psfCandidate.setBorderWidth(self._borderWidth)
                                        psfCandidate.setWidth(self._kernelSize + 2*self._borderWidth)
                                        psfCandidate.setHeight(self._kernelSize + 2*self._borderWidth)
                
                                    im = psfCandidate.getMaskedImage().getImage()
                                    vmax = afwMath.makeStatistics(im, afwMath.MAX).getValue()
                                    if not numpy.isfinite(vmax):
                                        continue
                                    psfCandidateList.append(psfCandidate)
                
                                    if display and displayExposure:
                                        ds9.dot("o", source.getX() - mi.getX0(), source.getY() - mi.getY0(),
                                                size=4, frame=frame, ctype=ds9.CYAN)
                                except Exception as err:
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
455  <a href="#d735d8f4">d735d8f4</a> +                     logger.log(pexLogging.Log.INFO,</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
481  <a href="#44f75bc6">44f75bc6</a> -                     logger.logdebug("Failed to make a psfCandidate from source %d: %s" % (source.getId(), err))</div>
              ?                     ^^^^^^^^^^^^^^^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
456  <a href="#d735d8f4">d735d8f4</a> +                                "Failed to make a psfCandidate from source %d: %s" % (source.getId(), err))</div>
              ?                     ^^^^^^^^^^^
                
                        return psfCandidateList
                
                starSelectorRegistry.register("objectSize", ObjectSizeStarSelector)
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="a774f361"/></a>a774f361</h3>

<pre>
commit a774f361b22c17e634c8f1aec634f0be6741b870
Author: Paul Price <price@astro.princeton.edu>
Date:   Fri Aug 24 16:14:03 2012 +0000

    Use new CR flag, since the first cluster in size can be due to CRs (e.g., suprimecam visit=122351 ccd=5).
</pre>
<h3><a name="4789b000"/></a>4789b000</h3>

<pre>
commit 4789b0003c94562845b73e550684fa8806e1c017
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Wed Nov 7 14:31:24 2012 -0500

    Make the flux slot configurable
    
    E.g. we might want "flux.gaussian" rather than "initial.flux.gaussian"
</pre>
<h3><a name="1e155218"/></a>1e155218</h3>

<pre>
commit 1e155218c49dd990bf0ad4ce08f9cc82c8f03672
Author: Steven Bickerton <steven.bickerton@gmail.com>
Date:   Tue Sep 9 14:46:10 2014 +0900

    untabify
</pre>
<h3><a name="168da8bf"/></a>168da8bf</h3>

<pre>
commit 168da8bf74d4f836a86d391a2b6ba578ad4ce24d
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Wed Jul 25 11:13:16 2012 +0900

    Initial version of a star-selector that simply looks at the RMS size of objects
</pre>
<h3><a name="ad74fe85"/></a>ad74fe85</h3>

<pre>
commit ad74fe8595ec523d6269e36ec2db051534bf3e9a
Author: Naoki Yasuda <yasudank@gmail.com>
Date:   Tue Nov 4 17:01:52 2014 +0900

    Add initial.flags.pixel.interpolated.any to ObjectSizeStarSelectorConfig.badFlags.
    
    This fix will prevent bad objects to be passed to psfDeterminer.
</pre>
<h3><a name="6b36f4d7"/></a>6b36f4d7</h3>

<pre>
commit 6b36f4d757187d30142a7e026754a07ffeb8dea2
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Mon Dec 16 15:27:56 2013 -0500

    Worked on star selector
</pre>
<h3><a name="44f75bc6"/></a>44f75bc6</h3>

<pre>
commit 44f75bc60b41c5f77b323a8d9981048ef7e5f3c4
Author: Paul Price <price@astro.princeton.edu>
Date:   Mon Apr 15 16:01:12 2013 -0400

    ObjectSizeStarSelector: push non-fatal errors to DEBUG level
    
    If a PSF candidate star is near the boundary, we can log:
    2013-04-15T18:49:48: meas.algorithms.objectSizeStarSelector: Failed to make a psfCandidate from source 1205459881033844: 0: lsst::pex::exceptions::LengthErrorException thrown at src/image/Image.cc:88 in static lsst::afw::image::ImageBase<PixelT>::_view_t lsst::afw::image::ImageBase<PixelT>::_makeSubView(const Extent2I&, const Extent2I&, const _view_t&) [with PixelT = float, lsst::afw::image::ImageBase<PixelT>::_view_t = boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<float, boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t> > >*> > >, lsst::afw::geom::Extent2I = lsst::afw::geom::Extent<int, 2>]
    But this is not very useful (and is distracting).  Push it to a lower
    logging level (DEBUG) instead of INFO.
</pre>
<h3><a name="15bb8125"/></a>15bb8125</h3>

<pre>
commit 15bb812578531766199e9a1ee41cc707fb3d9873
Author: Naoki Yasuda <yasudank@gmail.com>
Date:   Fri Apr 12 14:36:30 2013 +0900

    Remove HSC specific codes.
</pre>
<h3><a name="efb5c053"/></a>efb5c053</h3>

<pre>
commit efb5c05319eef475ff5851151217a90410eb3209
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Sat Aug 4 21:49:09 2012 -0400

    Add callback to matplotlib plots (hit p to show object near mouse on ds9)
    
    Use k-means clustering to find the stellar candidates.
    N.b. needs a bit more work, but usually works for decent data.
</pre>
<h3><a name="071fcadc"/></a>071fcadc</h3>

<pre>
commit 071fcadc016908a10583c746f0a8e79df2a45ead
Author: Naoki Yasuda <yasudank@gmail.com>
Date:   Wed Apr 3 14:44:22 2013 +0900

    Updated star selection algorithm.
</pre>
<h3><a name="a6de0723"/></a>a6de0723</h3>

<pre>
commit a6de07239c42c6fcedce220f38fa78ac4107305e
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Tue Jul 31 22:14:32 2012 +0900

    Allow user to quit python from objectSize selector
</pre>
<h3><a name="ed59a05b"/></a>ed59a05b</h3>

<pre>
commit ed59a05b45b5253efbc00ac0d81a81e385db4ce3
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Sat Aug 4 21:43:22 2012 -0400

    The star selector's working on icSrc, so use the "initial." flags
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="ddc6bb1f"/></a>ddc6bb1f</h3>

<pre>
commit ddc6bb1f0709b456161791f61c8ce2854d5fdbc5
Author: pgee <pgee@pgeepc2.physics.ucdavis.edu>
Date:   Thu Jul 3 17:48:20 2014 -0700

    Fixes for DM-545 review and testing
    
    Tested the objectSizeStarSelector and fixed bugs in field naming
    Fixed errors in rebase merge of former tickets/DM-545 branch
</pre>
<h3><a name="bebc9415"/></a>bebc9415</h3>

<pre>
commit bebc94154236dc7c20d5b18796cbee3264bd25cf
Author: Russell Owen <rowen@uw.edu>
Date:   Thu Mar 13 11:28:45 2014 -0700

    Take advantage of TransformMap.get to simplify some code.
</pre>
<h3><a name="168da8bf"/></a>168da8bf</h3>

<pre>
commit 168da8bf74d4f836a86d391a2b6ba578ad4ce24d
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Wed Jul 25 11:13:16 2012 +0900

    Initial version of a star-selector that simply looks at the RMS size of objects
</pre>
<h3><a name="8cffc17a"/></a>8cffc17a</h3>

<pre>
commit 8cffc17a6d7cb20dd0e247c2696750bdc3ccc93c
Author: Perry Gee <pgee@physics.ucdavis.edu>
Date:   Sat Mar 14 21:18:25 2015 -0500

    Changes for review and removal of Version0FlagMapper
    
    Other fixes for review
</pre>
<h3><a name="d65abfcf"/></a>d65abfcf</h3>

<pre>
commit d65abfcf8ae176f0dfaad848318ce4823f19433f
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Wed Nov 7 14:23:52 2012 -0500

    Make k-means code private as it isn't general purpose
    
    Following SMM's comments for #2283
</pre>
<h3><a name="bc4b5c7c"/></a>bc4b5c7c</h3>

<pre>
commit bc4b5c7ccf9fdfa5ccd485cc28e3a5cdd7533276
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Tue Jul 8 10:34:51 2014 -0500

    Updated task docs
</pre>
<h3><a name="0332997a"/></a>0332997a</h3>

<pre>
commit 0332997a6f5430001c459f1cdf986a0ad38607a5
Author: Russell Owen <rowen@uw.edu>
Date:   Fri Mar 7 12:03:52 2014 -0800

    Fixed remaining unit tests
</pre>
<h3><a name="efb5c053"/></a>efb5c053</h3>

<pre>
commit efb5c05319eef475ff5851151217a90410eb3209
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Sat Aug 4 21:49:09 2012 -0400

    Add callback to matplotlib plots (hit p to show object near mouse on ds9)
    
    Use k-means clustering to find the stellar candidates.
    N.b. needs a bit more work, but usually works for decent data.
</pre>
<h3><a name="d735d8f4"/></a>d735d8f4</h3>

<pre>
commit d735d8f4b673a82f0808b508c140c85717b53670
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Wed Nov 7 14:22:05 2012 -0500

    Log failed attempts to make psfCandidates
</pre>
</div>


[Return to list](#homelist)
# <a name="include/lsst/meas/algorithms/Interp.h"/></a>include/lsst/meas/algorithms/Interp.h
### Diff:

<pre>
                // -*- LSST-C++ -*-
                
                /* 
                 * LSST Data Management System
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
5    <a href="#c5720a8e">c5720a8e</a> -  * Copyright 2008, 2009, 2010 LSST Corporation.</div>
              ?                  ^^^^^^^^   ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
5    <a href="#7ad849f2">7ad849f2</a> +  * Copyright 2008-2015 LSST Corporation.</div>
              ?                  ^   ^
                 * 
                 * This product includes software developed by the
                 * LSST Project (http://www.lsst.org/).
                 *
                 * This program is free software: you can redistribute it and/or modify
                 * it under the terms of the GNU General Public License as published by
                 * the Free Software Foundation, either version 3 of the License, or
                 * (at your option) any later version.
                 * 
                 * This program is distributed in the hope that it will be useful,
                 * but WITHOUT ANY WARRANTY; without even the implied warranty of
                 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                 * GNU General Public License for more details.
                 * 
                 * You should have received a copy of the LSST License Statement and 
                 * the GNU General Public License along with this program.  If not, 
                 * see <http://www.lsstcorp.org/LegalNotices/>.
                 */
                 
                #if !defined(LSST_MEAS_ALGORITHMS_INTERP_H)
                #define LSST_MEAS_ALGORITHMS_INTERP_H
                //!
                // Interpolate over defects in a MaskedImage
                //
                #include <limits>
                #include <vector>
                #include "lsst/afw/image/Defect.h"
                #include "lsst/afw/image/MaskedImage.h"
                
                namespace lsst {
                namespace afw {
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
37   <a href="#8d36693e">8d36693e</a> -     namespace detection {</div>
              ? ----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
37   <a href="#7ad849f2">7ad849f2</a> + namespace detection {</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
38   <a href="#7ad849f2">7ad849f2</a> + </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
38   <a href="#8d36693e">8d36693e</a> -         class Psf;</div>
              ? ----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
39   <a href="#7ad849f2">7ad849f2</a> +     class Psf;</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
39   <a href="#8d36693e">8d36693e</a> -     }</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
40   <a href="#8d36693e">8d36693e</a> - }</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
41   <a href="#8d36693e">8d36693e</a> -     </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
40   <a href="#7ad849f2">7ad849f2</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
41   <a href="#7ad849f2">7ad849f2</a> + }} // afw::detection</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
42   <a href="#7ad849f2">7ad849f2</a> + </div>
                namespace meas {
                namespace algorithms {
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
44   <a href="#2aa51658">2aa51658</a> -     </div>
                namespace interp {
                    /**
                     * LPC coefficients for sigma = 1, S/N = infty
                     */
                    double const lpc_1_c1 = 0.7737;
                    double const lpc_1_c2 = -0.2737;
                    /**
                     * LPC coefficients for sigma = 1/sqrt(2), S/N = infty. These are the coeffs
                     * to use when interpolating at 45degrees to the row/column
                     */
                    double const lpc_1s2_c1 = 0.7358;
                    double const lpc_1s2_c2 = -0.2358;
                    /*
                     * Used to debias min(x, y)
                     */
                    double const min2GaussianBias = -0.5641895835; ///< Mean value of the minimum of two N(0,1) variates
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
61   <a href="#4d375e47">4d375e47</a> -     </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
61   <a href="#7ad849f2">7ad849f2</a> + </div>
                    template <typename MaskedImageT>
                    std::pair<bool, typename MaskedImageT::Image::Pixel> singlePixel(int x, int y, MaskedImageT const &image,
                                                                                     bool horizontal, double minval);
                }
                
                /**
                 * @brief Encapsulate information about a bad portion of a detector
                 */
                class Defect : public lsst::afw::image::DefectBase {
                public:
                    typedef boost::shared_ptr<Defect> Ptr; //!< shared pointer to Defect
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
73   <a href="#4d375e47">4d375e47</a> -     </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
73   <a href="#7ad849f2">7ad849f2</a> + </div>
                    enum DefectPosition {
                        LEFT = 1,                       //!< defect is at left boundary
                        NEAR_LEFT,                      //!< defect is near left boundary
                        WIDE_LEFT,                      //!< defect is wide at left boundary
                        MIDDLE,                         //!< defect is in middle of frame
                        WIDE_NEAR_LEFT,                 //!< defect is near left, and wide
                        WIDE,                           //!< defect is in middle, and wide
                        WIDE_NEAR_RIGHT,                //!< defect is near right, and wide
                        NEAR_RIGHT,                     //!< defect is near right boundary
                        WIDE_RIGHT,                     //!< defect is wide at right boundary
                        RIGHT                           //!< defect is at right boundary
                    };
                
                    enum { WIDE_DEFECT = 11 };          //!< minimum width of a WIDE defect
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
88   <a href="#4d375e47">4d375e47</a> -     </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
88   <a href="#7ad849f2">7ad849f2</a> + </div>
                    explicit Defect(const lsst::afw::geom::BoxI& bbox = lsst::afw::geom::BoxI() //!< Region's bounding box
                                   )
                        :
                        lsst::afw::image::DefectBase(bbox), _pos(static_cast<DefectPosition>(0)), _type(0) { }
                    virtual ~Defect() {}
                
                    void classify(DefectPosition pos,   //!< Position of defect in chip
                                  unsigned int type     //!< Type of defect
                                 ) {
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
98   <a href="#4d375e47">4d375e47</a> -         _pos = pos;    </div>
              ?                    ----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
98   <a href="#7ad849f2">7ad849f2</a> +         _pos = pos;</div>
                        _type = type;
                    }
                
                    unsigned int getType() const { return _type; } //!< Return the defect's interpolation type
                    DefectPosition getPos() const { return _pos; } //!< Return the position of the defect
                private:
                    DefectPosition _pos;                //!< Position of defect
                    unsigned int _type;                 //!< Type of defect
                };
                
                template <typename MaskedImageT>
                void interpolateOverDefects(MaskedImageT &image,
                                            lsst::afw::detection::Psf const &psf,
                                            std::vector<Defect::Ptr> &badList,
                                            double fallbackValue = 0.0,
                                            bool useFallbackValueAtEdge=false
                                           );
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
117  <a href="#4d375e47">4d375e47</a> - }}}</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
117  <a href="#7ad849f2">7ad849f2</a> + }}} // lsst::meas::algorithms::interp</div>
                
                #endif
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="8d36693e"/></a>8d36693e</h3>

<pre>
commit 8d36693e1469080d9f3da8f484a6dc576cbfee8d
Author: rhl <rhl@git.lsstcorp.org>
Date:   Thu Jul 8 20:32:01 2010 +0000

    Part way through final integration with afw-#1196 before merge to trunk
</pre>
<h3><a name="2aa51658"/></a>2aa51658</h3>

<pre>
commit 2aa516587d8f86223f3fb33faf5bb6b39f4d96e7
Author: bick <bick@git.lsstcorp.org>
Date:   Fri Oct 23 14:38:18 2009 +0000

    #819 Extensive changes to clean up code.
</pre>
<h3><a name="4d375e47"/></a>4d375e47</h3>

<pre>
commit 4d375e471cf0578e6d47b8c4f86d99ad126700df
Author: rhl <rhl@git.lsstcorp.org>
Date:   Fri Nov 28 21:01:14 2008 +0000

    Merged revisions 6510,6514-6532,6551,6554,6573-6574,6578-6579 via svnmerge (#490) from
    svn+ssh://svn.lsstcorp.org/DMS/meas/algorithms/tickets/490
    
    ........
      r6510 | rhl | 2008-11-25 13:50:24 -0500 (Tue, 25 Nov 2008) | 2 lines
    
      Work on ticket #490
    ........
      r6514 | rhl | 2008-11-25 13:56:39 -0500 (Tue, 25 Nov 2008) | 2 lines
    
      #490
    ........
      r6515 | rhl | 2008-11-25 13:56:48 -0500 (Tue, 25 Nov 2008) | 2 lines
    
      #490
    ........
      r6516 | rhl | 2008-11-25 13:56:55 -0500 (Tue, 25 Nov 2008) | 2 lines
    
      #490
    ........
      r6517 | rhl | 2008-11-25 13:57:04 -0500 (Tue, 25 Nov 2008) | 2 lines
    
      #490
    ........
      r6518 | rhl | 2008-11-25 13:58:55 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6519 | rhl | 2008-11-25 13:58:58 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6520 | rhl | 2008-11-25 13:59:02 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6521 | rhl | 2008-11-25 13:59:05 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6522 | rhl | 2008-11-25 14:04:54 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6523 | rhl | 2008-11-25 14:05:08 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6524 | rhl | 2008-11-25 14:05:11 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6525 | rhl | 2008-11-25 14:05:15 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6526 | rhl | 2008-11-25 14:15:43 -0500 (Tue, 25 Nov 2008) | 1 line
    
      Need to be able to import lsst.meas.algorithms
    ........
      r6527 | rhl | 2008-11-25 14:16:21 -0500 (Tue, 25 Nov 2008) | 1 line
    
      Need to be able to import lsst.meas.algorithms
    ........
      r6528 | rhl | 2008-11-25 14:16:28 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6529 | rhl | 2008-11-25 14:22:35 -0500 (Tue, 25 Nov 2008) | 1 line
    
      We didn't really want lsst.detection (but that was where it was in DMS/detection)
    ........
      r6530 | rhl | 2008-11-25 14:30:30 -0500 (Tue, 25 Nov 2008) | 1 line
    
      Needed for .paf files
    ........
      r6531 | rhl | 2008-11-25 14:31:14 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6532 | rhl | 2008-11-25 14:31:17 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6551 | rhl | 2008-11-25 20:01:04 -0500 (Tue, 25 Nov 2008) | 1 line
    
      Got code back to the shape it was in while at detection/trunk
    ........
      r6554 | rhl | 2008-11-25 21:16:17 -0500 (Tue, 25 Nov 2008) | 1 line
    
      Initial version of FootprintFunctor that passes tests (base class needs to move to afw)
    ........
      r6573 | rhl | 2008-11-26 08:19:17 -0500 (Wed, 26 Nov 2008) | 1 line
    
      Improve FootprintFunctor.apply() to be a little more efficient
    ........
      r6574 | rhl | 2008-11-26 09:45:45 -0500 (Wed, 26 Nov 2008) | 1 line
    
      Abolish the Measure object; it didn't make sense as a unit of packaging
    ........
      r6578 | rhl | 2008-11-26 09:58:15 -0500 (Wed, 26 Nov 2008) | 1 line
    
      Moved FootprintFunctor to afw
    ........
      r6579 | rhl | 2008-11-26 11:14:04 -0500 (Wed, 26 Nov 2008) | 1 line
    
      Use FootprintFunctor to remove CRs
    ........
</pre>
<h3><a name="c5720a8e"/></a>c5720a8e</h3>

<pre>
commit c5720a8ef2c923bc66513bbc602641f7387024d2
Author: dgehrig <dgehrig@git.lsstcorp.org>
Date:   Sun Jul 11 23:51:33 2010 +0000

    adding copyright notices
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="7ad849f2"/></a>7ad849f2</h3>

<pre>
commit 7ad849f28f2906db1696453f8830750b600b325e
Author: Lauren MacArthur <lauren@astro.princeton.edu>
Date:   Tue Feb 17 18:42:36 2015 -0500

    Remove white space, fix copyright year, and minor formatting
</pre>
</div>


[Return to list](#homelist)
# <a name="src/CR.cc"/></a>src/CR.cc
### Diff:

<pre>
                // -*- LSST-C++ -*-
                
                /* 
                 * LSST Data Management System
                 * Copyright 2008, 2009, 2010 LSST Corporation.
                 * 
                 * This product includes software developed by the
                 * LSST Project (http://www.lsst.org/).
                 *
                 * This program is free software: you can redistribute it and/or modify
                 * it under the terms of the GNU General Public License as published by
                 * the Free Software Foundation, either version 3 of the License, or
                 * (at your option) any later version.
                 * 
                 * This program is distributed in the hope that it will be useful,
                 * but WITHOUT ANY WARRANTY; without even the implied warranty of
                 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                 * GNU General Public License for more details.
                 * 
                 * You should have received a copy of the LSST License Statement and 
                 * the GNU General Public License along with this program.  If not, 
                 * see <http://www.lsstcorp.org/LegalNotices/>.
                 */
                 
                /**
                 * @file
                 *
                 * @brief Detect cosmic rays in a MaskedImage
                 *
                 * @ingroup detection
                 */
                #include <stdexcept>
                #include <algorithm>
                #include <cassert>
                #include <string>
                #include <typeinfo>
                
                #include <iostream>
                
                
                #include "boost/format.hpp"
                
                #include "lsst/pex/exceptions.h"
                #include "lsst/pex/logging/Trace.h"
                #include "lsst/pex/exceptions.h"
                #include "lsst/afw/detection/Footprint.h"
                #include "lsst/afw/detection/FootprintFunctor.h"
                #include "lsst/afw/geom.h"
                #include "lsst/afw/detection/Psf.h"
                #include "lsst/afw/image/MaskedImage.h"
                #include "lsst/afw/math/Random.h"
                #include "lsst/meas/algorithms/CR.h"
                #include "lsst/meas/algorithms/Interp.h"
                
                /**
                 * @todo These should go into afw --- actually, there're already there, but
                 * in an anon namespace
                 */
                namespace lsst {
                namespace afw {
                namespace detection {
                /**
                 * run-length code for part of object
                 */
                class IdSpan {
                public:
                    typedef boost::shared_ptr<IdSpan> Ptr;
                    typedef boost::shared_ptr<const IdSpan> ConstPtr;
                    
                    explicit IdSpan(int id, int y, int x0, int x1) : id(id), y(y), x0(x0), x1(x1) {}
                    int id;                         /* ID for object */
                    int y;                          /* Row wherein IdSpan dwells */
                    int x0, x1;                     /* inclusive range of columns */
                };
                /**
                 * comparison functor; sort by ID then row
                 */
                struct IdSpanCompar : public std::binary_function<const IdSpan::ConstPtr, const IdSpan::ConstPtr, bool> {
                    bool operator()(const IdSpan::ConstPtr a, const IdSpan::ConstPtr b) {
                        if (a->id < b->id) {
                            return true;
                        } else if(a->id > b->id) {
                            return false;
                        } else {
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
85   <a href="#2a889c17">2a889c17</a> -             if (a->y < b->y) {</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
86   <a href="#f3e42cc0">f3e42cc0</a> -                 return true;</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
87   <a href="#2a889c17">2a889c17</a> -             } else if (a->y > b->y) {</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
88   <a href="#f3e42cc0">f3e42cc0</a> -                 return false;</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
89   <a href="#2a889c17">2a889c17</a> -             } else {</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
90   <a href="#f3e42cc0">f3e42cc0</a> -                 return (a->x0 < b->x0) ? true : false;</div>
              ? ----                       ^^      ^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
85   <a href="#553f6be7">553f6be7</a> +             return (a->y < b->y) ? true : false;</div>
              ?                        ^      ^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
91   <a href="#2a889c17">2a889c17</a> -             }</div>
                        }
                    }
                };
                /**
                 * Follow a chain of aliases, returning the final resolved value.
                 */
                int resolve_alias(const std::vector<int>& aliases, /* list of aliases */
                                  int id) {         /* alias to look up */
                    int resolved = id;              /* resolved alias */
                    
                    while (id != aliases[id]) {
                        resolved = id = aliases[id];
                    }
                    
                    return(resolved);
                }
                }}}
                
                namespace lsst {
                namespace meas {
                namespace algorithms {
                
                namespace geom = lsst::afw::geom;
                namespace math = lsst::afw::math;
                namespace image = lsst::afw::image;
                namespace detection = lsst::afw::detection;
                namespace pexLogging = lsst::pex::logging; 
                
                namespace {
                
                template<typename ImageT, typename MaskT>
                void removeCR(image::MaskedImage<ImageT, MaskT> & mi, std::vector<detection::Footprint::Ptr> & CRs,
                              double const bkgd, MaskT const , MaskT const saturBit, MaskT const badMask, 
                              bool const debias, bool const grow);
                
                template<typename ImageT>
                bool condition_3(ImageT *estimate, double const peak,       
                                 double const mean_ns, double const mean_we, double const mean_swne, double const mean_nwse,  
                                 double const dpeak,      
                                 double const dmean_ns, double const dmean_we,double const dmean_swne,double const dmean_nwse, 
                                 double const thresH, double const thresV, double const thresD,     
                                 double const cond3Fac    
                                );
                
                /************************************************************************************************************/
                //
                // A class to hold a detected pixel
                template<typename ImageT>
                struct CRPixel {
                    typedef typename boost::shared_ptr<CRPixel> Ptr;
                    
                    CRPixel(int _col, int _row, ImageT _val, int _id = -1) :
                        id(_id), col(_col), row(_row), val(_val) {
                        _i = ++i;
                    }
                    ~CRPixel() {}
                
                    bool operator< (const CRPixel& a) const {
                        return _i < a._i;
                    }
                    
                    int get_i() const {
                        return _i;
                    }
                
                    int id;                             // Unique ID for cosmic ray (not cosmic ray pixel)
                    int col;                            // position
                    int row;                            //    of pixel
                    ImageT val;                         // initial value of pixel
                private:
                    static int i;                       // current value of running index
                    int mutable _i;                     // running index 
                };
                    
                template<typename ImageT>
                int CRPixel<ImageT>::i = 0;
                
                template<typename ImageT>
                struct Sort_CRPixel_by_id {
                    bool operator() (CRPixel<ImageT> const & a, CRPixel<ImageT> const & b) const {
                        return a.id < b.id;
                    }
                };
                
                /*****************************************************************************/
                /*
                 * This is the code to see if a given pixel is bad
                 *
                 * Note that the pixel in question is at index 0, so its value is pt_0[0]
                 */
                template <typename MaskedImageT>
                bool is_cr_pixel(typename MaskedImageT::Image::Pixel *corr,      // corrected value
                                 typename MaskedImageT::xy_locator loc,          // locator for this pixel
                                 double const minSigma, // minSigma, or -threshold if negative
                                 double const thresH, double const thresV, double const thresD, // for condition #3
                                 double const bkgd,     // unsubtracted background level
                                 double const cond3Fac // fiddle factor for condition #3
                                )
                {
                    typedef typename MaskedImageT::Image::Pixel ImagePixel;
                    //
                    // Unpack some values
                    //
                    ImagePixel const v_00 = loc.image(0, 0);
                
                    if (v_00 < 0) {
                        return false;
                    }
                    /*
                     * condition #1 is not applied on a pixel-by-pixel basis
                     */
                    ;
                    /*
                     * condition #2
                     */
                    ImagePixel const mean_we =   (loc.image(-1,  0) + loc.image( 1,  0))/2; // avgs of surrounding 8 pixels
                    ImagePixel const mean_ns =   (loc.image( 0,  1) + loc.image( 0, -1))/2;
                    ImagePixel const mean_swne = (loc.image(-1, -1) + loc.image( 1,  1))/2;
                    ImagePixel const mean_nwse = (loc.image(-1,  1) + loc.image( 1, -1))/2;
                
                    if (minSigma < 0) {         /* |thres_sky_sigma| is threshold */
                        if (v_00 < -minSigma) {
                            return false;
                        }
                    } else {
                        double const thres_sky_sigma = minSigma*sqrt(loc.variance(0, 0));
                
                        if (v_00 < mean_ns   + thres_sky_sigma &&
                            v_00 < mean_we   + thres_sky_sigma &&
                            v_00 < mean_swne + thres_sky_sigma &&
                            v_00 < mean_nwse + thres_sky_sigma) {
                            return false;
                        }
                    }
                /*
                 * condition #3
                 *
                 * Note that this uses mean_ns etc. even if minSigma is negative
                 */
                    double const dv_00 =      sqrt(loc.variance( 0,  0));
                    // standard deviation of means of surrounding pixels
                    double const dmean_we =   sqrt(loc.variance(-1,  0) + loc.variance( 1,  0))/2;
                    double const dmean_ns =   sqrt(loc.variance( 0,  1) + loc.variance( 0, -1))/2;
                    double const dmean_swne = sqrt(loc.variance(-1, -1) + loc.variance( 1,  1))/2;
                    double const dmean_nwse = sqrt(loc.variance(-1,  1) + loc.variance( 1, -1))/2;
                
                    if (!condition_3(corr,
                                     v_00 - bkgd, mean_ns - bkgd, mean_we - bkgd, mean_swne - bkgd, mean_nwse - bkgd,
                                     dv_00,      dmean_ns,       dmean_we,       dmean_swne,       dmean_nwse,
                                     thresH, thresV, thresD, cond3Fac)){
                        return false;
                    }
                /*
                 * OK, it's a contaminated pixel
                 */
                    *corr += static_cast<ImagePixel>(bkgd);
                    
                    return true;
                }
                
                /************************************************************************************************************/
                //
                // Worker routine to process the pixels adjacent to a span (including the points just
                // to the left and just to the right)
                //
                template <typename MaskedImageT>
                void checkSpanForCRs(detection::Footprint *extras, // Extra spans get added to this Footprint
                                     std::vector<CRPixel<typename MaskedImageT::Image::Pixel> >& crpixels,
                                                        // a list of pixels containing CRs
                                     int const y,   // the row to process
                                     int const x0, int const x1, // range of pixels in the span (inclusive)
                                     MaskedImageT& image, ///< Image to search
                                     double const minSigma, // minSigma
                                     double const thresH, double const thresV, double const thresD, // for cond. #3
                                     double const bkgd, // unsubtracted background level
                                     double const cond3Fac, // fiddle factor for condition #3
                                     bool const keep // if true, don't remove the CRs
                                    )
                {
                    typedef typename MaskedImageT::Image::Pixel MImagePixel;
                    typename MaskedImageT::xy_locator loc = image.xy_at(x0 - 1, y); // locator for data
                
                    int const imageX0 = image.getX0();
                    int const imageY0 = image.getY0();
                
                    for (int x = x0 - 1; x <= x1 + 1; ++x) {
                        MImagePixel corr = 0;                // new value for pixel
                        if (is_cr_pixel<MaskedImageT>(&corr, loc, minSigma, thresH, thresV, thresD,
                                                     bkgd, cond3Fac)) {
                            if (keep) {
                                crpixels.push_back(CRPixel<MImagePixel>(x + imageX0, y + imageY0, loc.image()));
                            }
                            loc.image() = corr;
                            
                            extras->addSpan(y + imageY0, x + imageX0, x + imageX0);
                        }
                        ++loc.x();
                    }
                }
                
                /************************************************************************************************************/
                /*
                 * Find the sum of the pixels in a Footprint
                 */
                template <typename ImageT>
                class CountsInCR : public detection::FootprintFunctor<ImageT> {
                public:
                    CountsInCR(ImageT const& mimage, double const bkgd) :
                        detection::FootprintFunctor<ImageT>(mimage),
                        _bkgd(bkgd),
                        _sum(0.0) {}
                
                    // method called for each pixel by apply()
                    void operator()(typename ImageT::xy_locator loc, // locator pointing at the pixel
                                    int, int
                                   ) {
                        _sum += *loc - _bkgd;
                    }
                
                    virtual void reset(detection::Footprint const&) {}
                    virtual void reset() {
                        _sum = 0.0;
                    }
                
                    double getCounts() const { return _sum; }
                private:
                    double const _bkgd;                  // the Image's background level
                    typename ImageT::Pixel _sum;         // the sum of all DN in the Footprint, corrected for bkgd
                };
                }
                
                /*
                 * Restore all the pixels in crpixels to their pristine state
                 */
                template <typename ImageT>
                static void reinstateCrPixels(
                        ImageT *image,                                                // the image in question
                        std::vector<CRPixel<typename ImageT::Pixel> > const& crpixels // a list of pixels with CRs
                                             )
                {
                    if (crpixels.empty()) return;
                
                    typedef typename std::vector<CRPixel<typename ImageT::Pixel> >::const_iterator crpixel_iter;
                    for (crpixel_iter crp = crpixels.begin(), end = crpixels.end(); crp < end - 1 ; ++crp) {
                        *image->at(crp->col - image->getX0(), crp->row - image->getY0()) = crp->val;
                    }
                }
                
                /*!
                 * @brief Find cosmic rays in an Image, and mask and remove them
                 *
                 * @return vector of CR's Footprints
                 */
                template <typename MaskedImageT>
                std::vector<detection::Footprint::Ptr>
                findCosmicRays(MaskedImageT &mimage,      ///< Image to search
                               detection::Psf const &psf, ///< the Image's PSF
                               double const bkgd,         ///< unsubtracted background of frame, DN
                               lsst::pex::policy::Policy const &policy, ///< Policy directing the behavior
                               bool const keep                          ///< if true, don't remove the CRs
                              ) {
                    typedef typename MaskedImageT::Image ImageT;
                    typedef typename ImageT::Pixel ImagePixel;
                    typedef typename MaskedImageT::Mask::Pixel MaskPixel;
                
                    // Parse the Policy
                    double const minSigma = policy.getDouble("minSigma");    // min sigma over sky in pixel for CR candidate
                    double const minDn = policy.getDouble("min_DN");         // min number of DN in an CRs
                    double const cond3Fac = policy.getDouble("cond3_fac");   // fiddle factor for condition #3
                    double const cond3Fac2 = policy.getDouble("cond3_fac2"); // 2nd fiddle factor for condition #3
                    int const niteration = policy.getInt("niteration");      // Number of times to look for contaminated
                                                                             // pixels near CRs
                    int const nCrPixelMax = policy.getInt("nCrPixelMax");    // maximum number of contaminated pixels
                /*
                 * thresholds for 3rd condition
                 *
                 * Realise PSF at center of image
                 */
                    lsst::afw::math::Kernel::ConstPtr kernel = psf.getLocalKernel(
                        afw::geom::Point2D(mimage.getWidth() / 2.0, mimage.getHeight() / 2.0)
                    );
                    if (!kernel) {
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
374  <a href="#a2dbc526">a2dbc526</a> -         throw LSST_EXCEPT(pexExcept::NotFoundException, "Psf is unable to return a kernel");</div>
              ?                                               ^^^^^^ ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
368  <a href="#ed246562">ed246562</a> +         throw LSST_EXCEPT(pexExcept::NotFoundError, "Psf is unable to return a kernel");</div>
              ?                                               ^^ ^
                    }
                    detection::Psf::Image psfImage = detection::Psf::Image(geom::ExtentI(kernel->getWidth(), kernel->getHeight()));
                    kernel->computeImage(psfImage, true);
                
                    int const xc = kernel->getCtrX();   // center of PSF
                    int const yc = kernel->getCtrY();
                
                    double const I0 = psfImage(xc, yc);
                    double const thresH = cond3Fac2*(0.5*(psfImage(xc - 1, yc) + psfImage(xc + 1, yc)))/I0; // horizontal
                    double const thresV = cond3Fac2*(0.5*(psfImage(xc, yc - 1) + psfImage(xc, yc + 1)))/I0; // vertical
                    double const thresD = cond3Fac2*(0.25*(psfImage(xc - 1, yc - 1) + psfImage(xc + 1, yc + 1) +
                                                           psfImage(xc - 1, yc + 1) + psfImage(xc + 1, yc - 1)))/I0; // diag
                /*
                 * Setup desired mask planes
                 */
                    MaskPixel const badBit = mimage.getMask()->getPlaneBitMask("BAD"); // Generic bad pixels
                    MaskPixel const crBit = mimage.getMask()->getPlaneBitMask("CR"); // CR-contaminated pixels
                    MaskPixel const interpBit = mimage.getMask()->getPlaneBitMask("INTRP"); // Interpolated pixels
                    MaskPixel const saturBit = mimage.getMask()->getPlaneBitMask("SAT"); // Saturated pixels
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
394  <a href="#f99eb46f">f99eb46f</a> -     MaskPixel const nodataBit = mimage.getMask()->getPlaneBitMask("NO_DATA"); // Non data pixels</div>
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
396  <a href="#f99eb46f">f99eb46f</a> -     MaskPixel const badMask = (badBit | interpBit | saturBit | nodataBit); // naughty pixels</div>
              ?                                                             ------------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
389  <a href="#553f6be7">553f6be7</a> +     MaskPixel const badMask = (badBit | interpBit | saturBit); // naughty pixels</div>
                /*
                 * Go through the frame looking at each pixel (except the edge ones which we ignore)
                 */
                    int const ncol = mimage.getWidth();
                    int const nrow = mimage.getHeight();
                
                    std::vector<CRPixel<ImagePixel> > crpixels; // storage for detected CR-contaminated pixels
                    typedef typename std::vector<CRPixel<ImagePixel> >::iterator crpixel_iter;
                    typedef typename std::vector<CRPixel<ImagePixel> >::reverse_iterator crpixel_riter;
                
                    for (int j = 1; j < nrow - 1; ++j) {
                        typename MaskedImageT::xy_locator loc = mimage.xy_at(1, j); // locator for data
                
                        for (int i = 1; i < ncol - 1; ++i, ++loc.x()) {
                            ImagePixel corr = 0;
                            if (!is_cr_pixel<MaskedImageT>(&corr, loc, minSigma,
                                                           thresH, thresV, thresD, bkgd, cond3Fac)) {
                                continue;
                            }
                /*
                 * condition #4
                 */
                            if (loc.mask() & badMask) {
                                continue;
                            }
                            if ((loc.mask(-1,  1) | loc.mask(0,  1) | loc.mask(1,  1) |
                                 loc.mask(-1,  0) |                   loc.mask(1,  0) |
                                 loc.mask(-1, -1) | loc.mask(0, -1) | loc.mask(1, -1)) & interpBit) {
                                continue;
                            }
                /*
                 * OK, it's a CR
                 *
                 * replace CR-contaminated pixels with reasonable values as we go through
                 * image, which increases the detection rate
                 */
                            crpixels.push_back(CRPixel<ImagePixel>(i + mimage.getX0(), j + mimage.getY0(), loc.image()));
                            loc.image() = corr;         /* just a preliminary estimate */
                
                            if (static_cast<int>(crpixels.size()) > nCrPixelMax) {
                                reinstateCrPixels(mimage.getImage().get(), crpixels);
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
439  <a href="#9252fed4">9252fed4</a> -                 throw LSST_EXCEPT(lsst::pex::exceptions::LengthErrorException,</div>
              ?                                                                     ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
432  <a href="#ed246562">ed246562</a> +                 throw LSST_EXCEPT(lsst::pex::exceptions::LengthError,</div>
                                                  (boost::format("Too many CR pixels (max %d)") % nCrPixelMax).str());
                            }
                        }
                    }
                /*
                 * We've found them on a pixel-by-pixel basis, now merge those pixels
                 * into cosmic rays
                 */
                    std::vector<int> aliases;           // aliases for initially disjoint parts of CRs
                    aliases.reserve(1 + crpixels.size()/2); // initial size of aliases
                    
                    std::vector<detection::IdSpan::Ptr> spans; // y:x0,x1 for objects
                    spans.reserve(aliases.capacity());  // initial size of spans
                    
                    aliases.push_back(0);               // 0 --> 0
                
                    /**
                     In this loop, we look for strings of CRpixels on the same row and adjoining columns;
                     each of these becomes a Span with a unique ID.
                     */
                    
                    int ncr = 0;                        // number of detected cosmic rays
                    if (!crpixels.empty()) {
                        int id;                         // id number for a CR
                        int x0 = -1, x1 = -1, y = -1;   // the beginning and end column, and row of this span in a CR
                
                        // I am dummy
                        CRPixel<ImagePixel> dummy(0, -1, 0, -1);
                        crpixels.push_back(dummy);
                        //printf("Created dummy CR: i %i, id %i, col %i, row %i, val %g\n", dummy.get_i(), dummy.id, dummy.col, dummy.row, (double)dummy.val);
                        for (crpixel_iter crp = crpixels.begin(); crp < crpixels.end() - 1 ; ++crp) {
                            //printf("Looking at CR: i %i, id %i, col %i, row %i, val %g\n", crp->get_i(), crp->id, crp->col, crp->row, (double)crp->val);
                
                            if (crp->id < 0) {           // not already assigned
                                crp->id = ++ncr;        // a new CR
                                aliases.push_back(crp->id);
                                y = crp->row;
                                x0 = x1 = crp->col;
                                //printf("  Assigned ID %i; looking at row %i, start col %i\n", crp->id, crp->row, crp->col);
                            }
                            id = crp->id;
                            //printf("  Next CRpix has i=%i, id=%i, row %i, col %i\n", crp[1].get_i(), crp[1].id, crp[1].row, crp[1].col);
                
                            if (crp[1].row == crp[0].row && crp[1].col == crp[0].col + 1) {
                                //printf("  Adjoining!  Set next CRpix id = %i; x1=%i\n", crp[1].id, x1);
                                crp[1].id = id;
                                ++x1;
                            } else {
                                assert (y >= 0 && x0 >= 0 && x1 >= 0);
                                spans.push_back(detection::IdSpan::Ptr(new detection::IdSpan(id, y, x0, x1)));
                                //printf("  Not adjoining; adding span id=%i, y=%i, x = [%i, %i]\n", id, y, x0, x1);
                            }
                        }
                    }
                
                    // At the end of this loop, all crpixel entries have been assigned an ID,
                    // except for the "dummy" entry at the end of the array.
                    if (crpixels.size() > 0) {
                        for (crpixel_iter cp = crpixels.begin(); cp != crpixels.end() - 1; cp++) {
                            assert(cp->id >= 0);
                            assert(cp->col >= 0);
                            assert(cp->row >= 0);
                        }
                        // dummy:
                        assert(crpixels[crpixels.size()-1].id == -1);
                        assert(crpixels[crpixels.size()-1].col == 0);
                        assert(crpixels[crpixels.size()-1].row == -1);
                    }
                
                    for (std::vector<detection::IdSpan::Ptr>::iterator sp = spans.begin(), end = spans.end(); sp != end; sp++) {
                        assert((*sp)->id >= 0);
                        assert((*sp)->y >= 0);
                        assert((*sp)->x0 >= 0);
                        assert((*sp)->x1 >= (*sp)->x0);
                        for (std::vector<detection::IdSpan::Ptr>::iterator sp2 = sp + 1; sp2 != end; sp2++) {
                            assert((*sp2)->y >= (*sp)->y);
                            if ((*sp2)->y == (*sp)->y) {
                                assert((*sp2)->x0 > (*sp)->x1);
                            }
                        }
                    }
                
                /*
                 * See if spans touch each other
                 */
                    for (std::vector<detection::IdSpan::Ptr>::iterator sp = spans.begin(), end = spans.end();
                         sp != end; ++sp) {
                        int const y = (*sp)->y;
                        int const x0 = (*sp)->x0;
                        int const x1 = (*sp)->x1;
                
                        // this loop will probably run for only a few steps
                        for (std::vector<detection::IdSpan::Ptr>::iterator sp2 = sp + 1; sp2 != end; ++sp2) {
                            if ((*sp2)->y == y) {
                                // on this row (but not adjoining columns, since it would have been merged into this span);
                                // keep looking.
                                continue;
                            } else if ((*sp2)->y != (y + 1)) {
                                // sp2 is more than one row below; can't be connected.
                                break;
                            } else if ((*sp2)->x0 > (x1 + 1)) {
                                // sp2 is more than one column away to the right; can't be connected
                                break;
                            } else if ((*sp2)->x1 >= (x0 - 1)) {
                                // touches
                                int r1 = detection::resolve_alias(aliases, (*sp)->id);
                                int r2 = detection::resolve_alias(aliases, (*sp2)->id);
                                aliases[r1] = r2;
                            }
                        }
                    }
                
                
                
                
                
                /*
                 * Resolve aliases; first alias chains, then the IDs in the spans
                 */
                    for (unsigned int i = 0; i != spans.size(); ++i) {
                        spans[i]->id = detection::resolve_alias(aliases, spans[i]->id);
                    }
                
                /*
                 * Sort spans by ID, so we can sweep through them once
                 */
                    if (spans.size() > 0) {
                        std::sort(spans.begin(), spans.end(), detection::IdSpanCompar());
                    }
                
                /*
                 * Build Footprints from spans
                 */
                    std::vector<detection::Footprint::Ptr> CRs; // our cosmic rays
                
                    if (spans.size() > 0) {
                        int id = spans[0]->id;
                        unsigned int i0 = 0;            // initial value of i
                        for (unsigned int i = i0; i <= spans.size(); ++i) { // <= size to catch the last object
                            if (i == spans.size() || spans[i]->id != id) {
                                detection::Footprint::Ptr cr(new detection::Footprint(i - i0));
                                
                                for (; i0 < i; ++i0) {
                                    cr->addSpan(spans[i0]->y, spans[i0]->x0, spans[i0]->x1);
                                }
                                CRs.push_back(cr);
                            }
                            
                            if (i < spans.size()) {
                                id = spans[i]->id;
                            }
                        }
                    }
                
                    reinstateCrPixels(mimage.getImage().get(), crpixels);
                /*
                 * apply condition #1
                 */
                    CountsInCR<ImageT> CountDN(*mimage.getImage(), bkgd);
                    for (std::vector<detection::Footprint::Ptr>::iterator cr = CRs.begin(), end = CRs.end();
                         cr != end; ++cr) {
                        CountDN.apply(**cr);            // find the sum of pixel values within the CR
                                
                        pexLogging::TTrace<10>("algorithms.CR", "CR at (%d, %d) has %g DN",
                                               (*cr)->getBBox().getMinX(), (*cr)->getBBox().getMinY(), CountDN.getCounts());
                        if (CountDN.getCounts() < minDn) { /* not bright enough */
                            pexLogging::TTrace<11>("algorithms.CR", "Erasing CR");
                
                            cr = CRs.erase(cr);
                            --cr;                       // back up to previous CR (we're going to increment it)
                            --end;
                        }
                    }
                    ncr = CRs.size();           /* some may have been too faint */
                /*
                 * We've found them all, time to kill them all
                 */
                    bool const debias_values = true;
                    bool grow = false;
                    pexLogging::TTrace<2>("algorithms.CR", "Removing initial list of CRs");
                    removeCR(mimage, CRs, bkgd, crBit, saturBit, badMask, debias_values, grow);
                #if 0                                   // Useful to see phase 2 in ds9; debugging only
                    (void)setMaskFromFootprintList(mimage.getMask().get(), CRs,
                                                   mimage.getMask()->getPlaneBitMask("DETECTED"));
                #endif
                /*
                 * Now that we've removed them, go through image again, examining area around
                 * each CR for extra bad pixels. Note that we set cond3Fac = 0 for this pass
                 *
                 * We iterate niteration times;  niter==1 was sufficient for SDSS data, but megacam
                 * CCDs are different -- who knows for other devices?
                 */
                    bool too_many_crs = false;          // we've seen too many CR pixels
                    int nextra = 0;                     // number of pixels added to list of CRs
                    for (int i = 0; i != niteration && !too_many_crs; ++i) {
                        pexLogging::TTrace<1>("algorithms.CR", "Starting iteration %d", i);
                        for (std::vector<detection::Footprint::Ptr>::iterator fiter = CRs.begin();
                             fiter != CRs.end(); fiter++) {
                            detection::Footprint::Ptr cr = *fiter;
                /*
                 * Are all those `CR' pixels interpolated?  If so, don't grow it
                 */
                            {
                                detection::Footprint::Ptr om = footprintAndMask(cr, mimage.getMask(), interpBit);
                                int const npix = (om) ? om->getNpix() : 0;
                
                                if (npix == cr->getNpix()) {
                                    continue;
                                }
                            }
                /*
                 * No; some of the suspect pixels aren't interpolated
                 */
                            detection::Footprint extra;                     // extra pixels added to cr
                            for (detection::Footprint::SpanList::const_iterator siter = cr->getSpans().begin();
                                 siter != cr->getSpans().end(); siter++) {
                                detection::Span::Ptr const span = *siter;
                
                                /*
                                 * Check the lines above and below the span.  We're going to check a 3x3 region around
                                 * the pixels, so we need a buffer around the edge.  We check the pixels just to the
                                 * left/right of the span, so the buffer needs to be 2 pixels (not just 1) in the
                                 * column direction, but only 1 in the row direction.
                                 */
                                int const y = span->getY() - mimage.getY0();
                                if (y < 2 || y >= nrow - 2) {
                                    continue;
                                }
                                int x0 = span->getX0() - mimage.getX0();
                                int x1 = span->getX1() - mimage.getX0();
                                x0 = (x0 < 2) ? 2 : (x0 > ncol - 3) ? ncol - 3 : x0;
                                x1 = (x1 < 2) ? 2 : (x1 > ncol - 3) ? ncol - 3 : x1;
                
                                checkSpanForCRs(&extra, crpixels, y - 1, x0, x1, mimage,
                                                minSigma/2, thresH, thresV, thresD, bkgd, 0, keep);
                                checkSpanForCRs(&extra, crpixels, y,     x0, x1, mimage,
                                                minSigma/2, thresH, thresV, thresD, bkgd, 0, keep);
                                checkSpanForCRs(&extra, crpixels, y + 1, x0, x1, mimage,
                                                minSigma/2, thresH, thresV, thresD, bkgd, 0, keep);
                            }
                
                            if (extra.getSpans().size() > 0) {      // we added some pixels
                                if (nextra + static_cast<int>(crpixels.size()) > nCrPixelMax) {
                                    too_many_crs = true;
                                    break;
                                }
                
                                nextra += extra.getNpix();
                
                                detection::Footprint::SpanList &espans = extra.getSpans();
                                for (detection::Footprint::SpanList::const_iterator siter = espans.begin();
                                     siter != espans.end(); siter++) {
                                    cr->addSpan(**siter);
                                }
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
694  <a href="#1e155218">1e155218</a> -                 cr->normalize();</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
687  <a href="#0c10fe3f">0c10fe3f</a> + 				cr->normalize();</div>
                            }            
                        }
                
                        if (nextra == 0) {
                            break;
                        }
                    }
                /*
                 * mark those pixels as CRs
                 */
                    if (!too_many_crs) {
                        (void)setMaskFromFootprintList(mimage.getMask().get(), CRs, crBit);
                    }
                /*
                 * Maybe reinstate initial values; n.b. the same pixel may appear twice, so we want the
                 * first value stored (hence the uses of rbegin/rend)
                 *
                 * We have to do this if we decide _not_ to remove certain CRs,
                 * for example those which lie next to saturated pixels
                 */
                    if (keep || too_many_crs) {
                        if (crpixels.size() > 0) {
                            int const imageX0 = mimage.getX0();
                            int const imageY0 = mimage.getY0();
                
                            std::sort(crpixels.begin(), crpixels.end()); // sort into birth order
                        
                            crpixel_riter rend = crpixels.rend();
                            for (crpixel_riter crp = crpixels.rbegin(); crp != rend; ++crp) {
                                if (crp->row == -1)
                                    // dummy; skip it.
                                    continue;
                                mimage.at(crp->col - imageX0, crp->row - imageY0).image() = crp->val;
                            }
                        }
                    } else {
                        if (true || nextra > 0) {
                            grow = true;
                            pexLogging::TTrace<2>("algorithms.CR", "Removing final list of CRs, grow = %d", grow);
                            removeCR(mimage, CRs, bkgd, crBit, saturBit, badMask, debias_values, grow);
                        }
                /*
                 * we interpolated over all CR pixels, so set the interp bits too
                 */
                        (void)setMaskFromFootprintList(mimage.getMask().get(), CRs,
                                                       static_cast<MaskPixel>(crBit | interpBit));
                    }
                
                    if (too_many_crs) {                 // we've cleaned up, so we can throw the exception
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
744  <a href="#9252fed4">9252fed4</a> -         throw LSST_EXCEPT(lsst::pex::exceptions::LengthErrorException,</div>
              ?                                                             ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
737  <a href="#ed246562">ed246562</a> +         throw LSST_EXCEPT(lsst::pex::exceptions::LengthError,</div>
                                          (boost::format("Too many CR pixels (max %d)") % nCrPixelMax).str());
                    }
                
                    return CRs;
                }
                
                /*****************************************************************************/
                namespace {
                /*
                 * Is condition 3 true?
                 */
                template<typename ImageT>
                bool condition_3(ImageT *estimate,        // estimate of true value of pixel
                                 double const peak,       // counts in central pixel (no sky)
                                 double const mean_ns,    // mean in NS direction (no sky)
                                 double const mean_we,    //  "   "  WE    "  "     "   "
                                 double const mean_swne,  //  "   "  SW-NE "  "     "   "
                                 double const mean_nwse,  //  "   "  NW-SE "  "     "   "
                                 double const dpeak,      // standard deviation of peak value
                                 double const dmean_ns,   //   s.d. of mean in NS direction
                                 double const dmean_we,   //    "   "   "   "  WE    "  "
                                 double const dmean_swne, //  "   "   "   "  SW-NE "  "
                                 double const dmean_nwse, //  "   "   "   "  NW-SE "  "
                                 double const thresH,     // horizontal threshold
                                 double const thresV,     // vertical threshold
                                 double const thresD,     // diagonal threshold
                                 double const cond3Fac    // fiddle factor for noise
                                )
                {
                   if (thresV*(peak - cond3Fac*dpeak) > mean_ns + cond3Fac*dmean_ns) {
                       *estimate = (ImageT)mean_ns;
                       return true;
                   }
                
                   if (thresH*(peak - cond3Fac*dpeak) > mean_we + cond3Fac*dmean_we) {
                       *estimate = mean_we;
                       return true;
                   }
                   
                   if (thresD*(peak - cond3Fac*dpeak) > mean_swne + cond3Fac*dmean_swne) {
                       *estimate = mean_swne;
                       return true;
                   }
                   
                   if (thresD*(peak - cond3Fac*dpeak) > mean_nwse + cond3Fac*dmean_nwse) {
                       *estimate = mean_nwse;
                       return true;
                   }
                
                   return false;
                }
                
                /************************************************************************************************************/
                /*
                 * Interpolate over a CR's pixels
                 */
                template <typename MaskedImageT>
                class RemoveCR : public detection::FootprintFunctor<MaskedImageT> {
                public:
                    RemoveCR(MaskedImageT const& mimage,
                             double const bkgd,
                             typename MaskedImageT::Mask::Pixel badMask,
                             bool const debias,
                             lsst::afw::math::Random& rand
                            ) : detection::FootprintFunctor<MaskedImageT>(mimage),
                                _bkgd(bkgd),
                                _ncol(mimage.getWidth()),
                                _nrow(mimage.getHeight()),
                                _badMask(badMask),
                                _debias(debias),
                                _rand(rand) {}
                
                    // method called for each pixel by apply()
                    void operator()(typename MaskedImageT::xy_locator loc, // locator pointing at the pixel
                                    int x,                                 // column-position of pixel
                                    int y                                  // row-position of pixel
                                   ) {
                        typedef typename MaskedImageT::Image::Pixel MImagePixel;
                        MImagePixel min = std::numeric_limits<MImagePixel>::max();
                        int ngood = 0;          // number of good values on min
                
                        MImagePixel const minval = _bkgd - 2*sqrt(loc.variance()); // min. acceptable pixel value after interp
                /*
                 * W-E row
                 */
                        if (x - 2 >= 0 && x + 2 < _ncol) {
                            if ((loc.mask(-2, 0) | _badMask) || (loc.mask(-1, 0) | _badMask) ||
                                (loc.mask( 1, 0) | _badMask) || (loc.mask( 2, 0) | _badMask)) {
                                ;                       // estimate is contaminated
                            } else {
                                MImagePixel const v_m2 = loc.image(-2, 0);
                                MImagePixel const v_m1 = loc.image(-1, 0);
                                MImagePixel const v_p1 = loc.image( 1, 0);
                                MImagePixel const v_p2 = loc.image( 2, 0);
                
                                MImagePixel const tmp =
                                    interp::lpc_1_c1*(v_m1 + v_p1) + interp::lpc_1_c2*(v_m2 + v_p2);
                                        
                                if (tmp > minval && tmp < min) {
                                    min = tmp;
                                    ngood++;
                                }
                            }
                        }
                /*
                 * N-S column
                 */
                        if (y - 2 >= 0 && y + 2 < _nrow) {
                            if ((loc.mask(0, -2) | _badMask) || (loc.mask(0, -1) | _badMask) ||
                                (loc.mask(0,  1) | _badMask) || (loc.mask(0,  2) | _badMask)) {
                                ;                       /* estimate is contaminated */
                            } else {
                                MImagePixel const v_m2 = loc.image(0, -2);
                                MImagePixel const v_m1 = loc.image(0, -1);
                                MImagePixel const v_p1 = loc.image(0,  1);
                                MImagePixel const v_p2 = loc.image(0,  2);
                                        
                                MImagePixel const tmp =
                                    interp::lpc_1_c1*(v_m1 + v_p1) + interp::lpc_1_c2*(v_m2 + v_p2);
                                        
                                if (tmp > minval && tmp < min) {
                                    min = tmp;
                                    ngood++;
                                }
                            }
                        }
                /*
                 * SW--NE diagonal
                 */
                        if (x - 2 >= 0 && x + 2 < _ncol && y - 2 >= 0 && y + 2 < _nrow) {
                            if ((loc.mask(-2, -2) | _badMask) || (loc.mask(-1, -1) | _badMask) ||
                                (loc.mask( 1,  1) | _badMask) || (loc.mask( 2,  2) | _badMask)) {
                                ;                       /* estimate is contaminated */
                            } else {
                                MImagePixel const v_m2 = loc.image(-2, -2);
                                MImagePixel const v_m1 = loc.image(-1, -1);
                                MImagePixel const v_p1 = loc.image( 1,  1);
                                MImagePixel const v_p2 = loc.image( 2,  2);
                                        
                                MImagePixel const tmp =
                                    interp::lpc_1s2_c1*(v_m1 + v_p1) + interp::lpc_1s2_c2*(v_m2 + v_p2);
                                        
                                if (tmp > minval && tmp < min) {
                                    min = tmp;
                                    ngood++;
                                }
                            }
                        }
                /*
                 * SE--NW diagonal
                 */
                        if (x - 2 >= 0 && x + 2 < _ncol && y - 2 >= 0 && y + 2 < _nrow) {
                            if ((loc.mask( 2, -2) | _badMask) || (loc.mask( 1, -1) | _badMask) ||
                                (loc.mask(-1,  1) | _badMask) || (loc.mask(-2,  2) | _badMask)) {
                                ;                       /* estimate is contaminated */
                            } else {
                                MImagePixel const v_m2 = loc.image( 2, -2);
                                MImagePixel const v_m1 = loc.image( 1, -1);
                                MImagePixel const v_p1 = loc.image(-1,  1);
                                MImagePixel const v_p2 = loc.image(-2,  2);
                                        
                                MImagePixel const tmp =
                                    interp::lpc_1s2_c1*(v_m1 + v_p1) + interp::lpc_1s2_c2*(v_m2 + v_p2);
                
                                if (tmp > minval && tmp < min) {
                                    min = tmp;
                                    ngood++;
                                }
                            }
                        }
                /*
                 * Have we altogether failed to find an acceptable value? If so interpolate
                 * using the full-up interpolation code both vertically and horizontally
                 * and take the average. This can fail for large enough defects (e.g. CRs
                 * lying in bad columns), in which case the interpolator returns -1. If
                 * both directions fail, use the background value.
                 */
                        if (ngood == 0) {
                            std::pair<bool, MImagePixel const> val_h =
                                interp::singlePixel(x, y, this->getImage(), true,  minval);
                            std::pair<bool, MImagePixel const> val_v =
                                interp::singlePixel(x, y, this->getImage(), false, minval);
                               
                            if (!val_h.first) {
                                if (!val_v.first) {    // Still no good value. Guess wildly
                                    min = _bkgd + sqrt(loc.variance())*_rand.gaussian();
                                } else {
                                    min = val_v.second;
                                }
                            } else {
                                if (val_v.first) {
                                    min = val_h.second;
                                } else {
                                    min = (val_v.second + val_h.second)/2;
                                }
                            }
                        }
                /*
                 * debias the minimum; If more than one uncontaminated estimate was
                 * available, estimate the bias to be simply that due to choosing the
                 * minimum of two Gaussians. In fact, even some of the "good" pixels
                 * may have some extra charge, so even if ngood > 2, still use this
                 * estimate
                 */
                        if (ngood > 0) {
                            pexLogging::TTrace<5>("algorithms.CR", "Adopted min==%g at (%d, %d) (ngood=%d)",
                                                  static_cast<double>(min), x, y, ngood);
                        }
                
                        if (_debias && ngood > 1) {
                            min -= interp::min2GaussianBias*sqrt(loc.variance())*_rand.gaussian();
                        }
                
                        loc.image() = min;
                    }
                private:
                    double _bkgd;
                    int _ncol, _nrow;
                    typename MaskedImageT::Mask::Pixel _badMask;
                    bool _debias;
                    lsst::afw::math::Random& _rand;
                };
                
                /************************************************************************************************************/
                /*
                 * actually remove CRs from the frame
                 */
                template<typename ImageT, typename MaskT>
                void removeCR(image::MaskedImage<ImageT, MaskT> & mi,  // image to search
                              std::vector<detection::Footprint::Ptr> & CRs, // list of cosmic rays
                              double const bkgd, // non-subtracted background
                              MaskT const , // Bit value used to label CRs
                              MaskT const saturBit, // Bit value used to label saturated pixels
                              MaskT const badMask, // Bit mask for bad pixels
                              bool const debias, // statistically debias values?
                              bool const grow   // Grow CRs?
                             )
                {
                    lsst::afw::math::Random rand;    // a random number generator
                    /*
                     * replace the values of cosmic-ray contaminated pixels with 1-dim 2nd-order weighted means Cosmic-ray
                     * contaminated pixels have already been given a mask value, crBit
                     *
                     * If there are no good options (i.e. all estimates are contaminated), try using just pixels that are not
                     * CRs; failing that, interpolate in the row- or column direction over as large a distance as is required
                     *
                     * XXX SDSS (and we) go through this list backwards; why?
                     */
                
                    // a functor to remove a CR
                    RemoveCR<image::MaskedImage<ImageT, MaskT> > removeCR(mi, bkgd, badMask, debias, rand); 
                
                    for (std::vector<detection::Footprint::Ptr>::reverse_iterator fiter = CRs.rbegin();
                         fiter != CRs.rend(); ++fiter) {
                        detection::Footprint::Ptr cr = *fiter;
                /*
                 * If I grow this CR does it touch saturated pixels?  If so, don't
                 * interpolate and add CR pixels to saturated mask
                 */
                        if (grow && cr->getNpix() < 100) {
                            try {
                                bool const isotropic = false; // use a slow isotropic grow?
                                detection::Footprint::Ptr gcr = growFootprint(cr, 1, isotropic);
                                detection::Footprint::Ptr const saturPixels = footprintAndMask(gcr, mi.getMask(), saturBit);
                                
                             if (saturPixels->getNpix() > 0) { // pixel is adjacent to a saturation trail
                                 setMaskFromFootprint(mi.getMask().get(), *saturPixels, saturBit);
                
                                    continue;
                                }
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
1015 <a href="#2fbce80a">2fbce80a</a> -             } catch(lsst::pex::exceptions::LengthErrorException &) {</div>
              ?                                                       ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
1008 <a href="#ed246562">ed246562</a> +             } catch(lsst::pex::exceptions::LengthError &) {</div>
                                continue;
                            }
                        }
                /*
                 * OK, fix it
                 */
                        removeCR.apply(*cr);
                    }
                }
                }
                
                /************************************************************************************************************/
                //
                // Explicit instantiations
                // \cond
                #define INSTANTIATE(TYPE) \
                    template \
                    std::vector<detection::Footprint::Ptr> \
                    findCosmicRays(lsst::afw::image::MaskedImage<TYPE> &image,  \
                                   detection::Psf const &psf,                   \
                                   double const bkgd,                           \
                                   lsst::pex::policy::Policy const& policy,     \
                                   bool const keep                              \
                                  )
                
                INSTANTIATE(float);
                INSTANTIATE(double);                    // Why do we need double images?
                // \endcond
                }}}
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="f99eb46f"/></a>f99eb46f</h3>

<pre>
commit f99eb46f484609673b45290eaaba47688d7b4a24
Author: Naoki Yasuda <yasudank@gmail.com>
Date:   Fri Oct 3 15:00:59 2014 +0900

    CR code has to take care of 'NO_DATA' mask.
</pre>
<h3><a name="f3e42cc0"/></a>f3e42cc0</h3>

<pre>
commit f3e42cc03ab8a4f1b28d9e0852619cbdbf3b7018
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Mon May 19 15:40:36 2014 -0400

    Replace tabs with spaces
</pre>
<h3><a name="1e155218"/></a>1e155218</h3>

<pre>
commit 1e155218c49dd990bf0ad4ce08f9cc82c8f03672
Author: Steven Bickerton <steven.bickerton@gmail.com>
Date:   Tue Sep 9 14:46:10 2014 +0900

    untabify
</pre>
<h3><a name="a2dbc526"/></a>a2dbc526</h3>

<pre>
commit a2dbc526d2e8e11e8a297c8197407b74454dbb71
Author: price <price@git.lsstcorp.org>
Date:   Tue Apr 12 23:08:48 2011 +0000

    Fixed problems introduced by r20729 due to bad coordinates on psfImage.
</pre>
<h3><a name="9252fed4"/></a>9252fed4</h3>

<pre>
commit 9252fed4f132aea2d2fbd73681e7de4a2b7a1fbd
Author: rhl <rhl@git.lsstcorp.org>
Date:   Fri Dec 11 19:49:46 2009 +0000

    Put a maximum on the number of bad pixels in an image (nCrPixelMax); #976.  Revert some stylistic changes.  Allow CR.py to be run on any image
</pre>
<h3><a name="2a889c17"/></a>2a889c17</h3>

<pre>
commit 2a889c17d47c879dbb4345bafba6aed9869b5984
Author: Naoki Yasuda <yasudank@gmail.com>
Date:   Mon May 19 12:55:24 2014 +0900

    Do not use approximate exponential function.
    Make IdSpanCompar more deterministic.
</pre>
<h3><a name="2fbce80a"/></a>2fbce80a</h3>

<pre>
commit 2fbce80abaea8f32aef5df136af2cb6fb541879d
Author: rhl <rhl@git.lsstcorp.org>
Date:   Tue Jan 26 15:46:33 2010 +0000

    Code is running on gcc on os/x, but not with intel.  Doing a ci so as to be able to try with intel on Linux
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="553f6be7"/></a>553f6be7</h3>

<pre>
commit 553f6be71a44ec13d29ac40b4c41603254f77ba5
Author: bick <bick@git.lsstcorp.org>
Date:   Fri Oct 23 19:23:31 2009 +0000

    #819 clean-up.
</pre>
<h3><a name="0c10fe3f"/></a>0c10fe3f</h3>

<pre>
commit 0c10fe3f012e0eb2a410a6492c159f1396a653fb
Merge: b3a317e a2dbc52
Author: dubcovsky <dubcovsky@git.lsstcorp.org>
Date:   Wed Apr 13 22:17:16 2011 +0000

    #1556 fixes to photometry to pass tests
</pre>
<h3><a name="ed246562"/></a>ed246562</h3>

<pre>
commit ed2465629cb2a0b4fe5aedeb9f447da02cf38736
Author: Russell Owen <rowen@uw.edu>
Date:   Tue Jun 17 16:16:40 2014 -0700

    Renamed exceptions
</pre>
</div>


[Return to list](#homelist)
# <a name="tests/ticket2986.py"/></a>tests/ticket2986.py
### Diff:

<pre>
                #!/usr/bin/env python
                
                #
                # LSST Data Management System
                # Copyright 2008-2013 LSST Corporation.
                #
                # This product includes software developed by the
                # LSST Project (http://www.lsst.org/).
                #
                # This program is free software: you can redistribute it and/or modify
                # it under the terms of the GNU General Public License as published by
                # the Free Software Foundation, either version 3 of the License, or
                # (at your option) any later version.
                #
                # This program is distributed in the hope that it will be useful,
                # but WITHOUT ANY WARRANTY; without even the implied warranty of
                # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                # GNU General Public License for more details.
                #
                # You should have received a copy of the LSST License Statement and
                # the GNU General Public License along with this program.  If not,
                # see <http://www.lsstcorp.org/LegalNotices/>.
                #
                
                import unittest
                
                import lsst.utils.tests as utilsTests
                
                import lsst.afw.image as afwImage
                import lsst.afw.geom as afwGeom
                import lsst.afw.coord as afwCoord
                import lsst.afw.table as afwTable
                import lsst.meas.algorithms as measAlg
                
                class Ticket2986Test(unittest.TestCase):
                    def test(self):
                        schema = afwTable.ExposureTable.makeMinimalSchema()
                        schema.addField("ccd", int, doc="CCD number")
                        schema.addField("visit", long, doc="Visit number")
                        schema.addField("goodpix", int, doc="Number of good pixels")
                        schema.addField("weight", float, doc="Weighting for this CCD")
                        ccds = afwTable.ExposureCatalog(schema)
                
                        wcs = afwImage.makeWcs(afwCoord.Coord(0.0*afwGeom.degrees, 0.0*afwGeom.degrees),
                                               afwGeom.Point2D(0.0, 0.0), 1.0e-4, 0.0, 0.0, 1.0e-4)
                
                        new = ccds.addNew()
                        new.set("id", 0)
                        new.set("bbox.min", afwGeom.Point2I(0,0))
                        new.set("bbox.max", afwGeom.Point2I(1024,1024))
                
                        # The following lines are critical for reproducing the bug, because
                        # the code is reading a double starting at the 'ccd' (offset 24), and
                        # it sees a zero (from the zero in 'ccd' and the leading zeros in 'visit').
                        new.set("ccd", 0)
                        new.set("visit", 6789)
                
                        new.set("goodpix", 987654321)
                        new.set("weight", 1.0)
                        new.setPsf(measAlg.SingleGaussianPsf(23, 23, 2.345))
                        new.setWcs(wcs)
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
63   <a href="#9383b42e">9383b42e</a> -         # In the presence of the bug, the following fails with:</div>
              ?                                                               -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
63   <a href="#8857e07a">8857e07a</a> +         # In the presence of the bug, the following fails with</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
64   <a href="#9383b42e">9383b42e</a> -         # LsstCppException: 0: lsst::pex::exceptions::RuntimeErrorException thrown at src/CoaddPsf.cc:134 in lsst::afw::geom::Point2D lsst::meas::algorithms::{anonymous}::computeAveragePosition(const ExposureCatalog&, const lsst::afw::image::Wcs&, lsst::afw::table::Key<double>)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
64   <a href="#8857e07a">8857e07a</a> + 	# lsst::pex::exceptions::RuntimeError thrown in src/CoaddPsf.cc</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
65   <a href="#9383b42e">9383b42e</a> -         # 0: Message: Could not find a valid average position for CoaddPsf</div>
              ?           ^^^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
65   <a href="#8857e07a">8857e07a</a> +         # with message: "Could not find a valid average position for CoaddPsf"</div>
              ?           ^^^^^^        +                                                    +
                        measAlg.CoaddPsf(ccds, wcs)
                
                def suite():
                    """Returns a suite containing all the test cases in this module."""
                    utilsTests.init()
                
                    suites = []
                    suites += unittest.makeSuite(Ticket2986Test)
                    suites += unittest.makeSuite(utilsTests.MemoryTestCase)
                
                    return unittest.TestSuite(suites)
                
                def run(shouldExit=False):
                    """Run the tests"""
                    utilsTests.run(suite(), shouldExit)
                
                if __name__ == "__main__":
                    run(True)
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="9383b42e"/></a>9383b42e</h3>

<pre>
commit 9383b42ee6027124fca40714b426ddaefd49436c
Author: Paul Price <price@astro.princeton.edu>
Date:   Fri Aug 9 17:09:44 2013 -0400

    CoaddPsf: fix use of weight column in constructor (#2986)
    
    A one-character fix, plus test.
    
    The catalog and weightKey were mismatched (the key was not for
    the catalog actually passed), resulting in the weights being
    incorrect for the average position calculation.
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="8857e07a"/></a>8857e07a</h3>

<pre>
commit 8857e07a6268e5af38162e6186e9338018b07be8
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Thu Jul 17 16:53:01 2014 -0400

    Adapt to changes in exception Python wrappers (DM-827)
</pre>
</div>


[Return to list](#homelist)
# <a name="python/lsst/meas/algorithms/psfSelectionFromMatchList.py"/></a>python/lsst/meas/algorithms/psfSelectionFromMatchList.py
### Diff:

<pre>
                # 
                # LSST Data Management System
                # Copyright 2008, 2009, 2010 LSST Corporation.
                # 
                # This product includes software developed by the
                # LSST Project (http://www.lsst.org/).
                #
                # This program is free software: you can redistribute it and/or modify
                # it under the terms of the GNU General Public License as published by
                # the Free Software Foundation, either version 3 of the License, or
                # (at your option) any later version.
                # 
                # This program is distributed in the hope that it will be useful,
                # but WITHOUT ANY WARRANTY; without even the implied warranty of
                # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                # GNU General Public License for more details.
                # 
                # You should have received a copy of the LSST License Statement and 
                # the GNU General Public License along with this program.  If not, 
                # see <http://www.lsstcorp.org/LegalNotices/>.
                #
                import numpy
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
23   <a href="#40f64506">40f64506</a> - import lsst.afw.image as afwImage</div>
                import lsst.afw.math as afwMath
                import lsst.meas.algorithms as measAlg
                import lsst.afw.display.ds9 as ds9
                
                args = [None, "MatchList", None]        # allow the user to probe for this signature
                
                def selectPsfSources(exposure, matches, psfPolicy):
                    """Get a list of suitable stars to construct a PSF."""
                
                    import lsstDebug
                    display = lsstDebug.Info(__name__).display
                    displayExposure = lsstDebug.Info(__name__).displayExposure     # display the Exposure + spatialCells
                    #
                    # Unpack policy
                    #
                    kernelSize   = psfPolicy.get("kernelSize")
                    borderWidth  = psfPolicy.get("borderWidth")
                    sizePsfCellX = psfPolicy.get("sizeCellX")
                    sizePsfCellY = psfPolicy.get("sizeCellY")
                    #
                    mi = exposure.getMaskedImage()
                
                    if display and displayExposure:
                        frame = 0
                        ds9.mtv(mi, frame=frame, title="PSF candidates")
                
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
49   <a href="#2d3a5fcc">2d3a5fcc</a> +     psfCellSet = afwMath.SpatialCellSet(mi.getBBox(), sizePsfCellX, sizePsfCellY)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
50   <a href="#cb64b3f6">cb64b3f6</a> -     psfCellSet = afwMath.SpatialCellSet(mi.getBBox(afwImage.PARENT),</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
51   <a href="#40f64506">40f64506</a> -                                         sizePsfCellX, sizePsfCellY)</div>
                    psfStars = []
                
                    for val in matches:
                        ref, source = val[0:2]
                        if not (ref.getFlagForDetection() & measAlg.Flags.STAR) or \
                               (source.getFlagForDetection() & measAlg.Flags.BAD):
                            continue
                
                        try:
                            cand = measAlg.makePsfCandidate(source, mi)
                            #
                            # The setXXX methods are class static, but it's convenient to call them on
                            # an instance as we don't know Exposure's pixel type (and hence cand's exact type)
                            if cand.getWidth() == 0:
                                cand.setBorderWidth(borderWidth)
                                cand.setWidth(kernelSize + 2*borderWidth)
                                cand.setHeight(kernelSize + 2*borderWidth)
                
                            im = cand.getMaskedImage().getImage()
                            max = afwMath.makeStatistics(im, afwMath.MAX).getValue()
                            if not numpy.isfinite(max):
                                continue
                
                            psfCellSet.insertCandidate(cand)
                
                            if display and displayExposure:
                                ds9.dot("+", source.getXAstrom() - mi.getX0(), source.getYAstrom() - mi.getY0(),
                                        size=4, frame=frame, ctype=ds9.CYAN)
                                ds9.dot("o", source.getXAstrom() - mi.getX0(), source.getYAstrom() - mi.getY0(),
                                        size=4, frame=frame, ctype=ds9.CYAN)
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
82   <a href="#40f64506">40f64506</a> -         except Exception, e:</div>
              ?                         ---
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
80   <a href="#2d3a5fcc">2d3a5fcc</a> +         except Exception:</div>
                            continue
                
                        source.setFlagForDetection(source.getFlagForDetection() | measAlg.Flags.STAR)
                        psfStars += [source]
                
                    return psfStars, psfCellSet
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="cb64b3f6"/></a>cb64b3f6</h3>

<pre>
commit cb64b3f6cdba20367d333ba95852b15521150611
Author: dubcovsky <dubcovsky@git.lsstcorp.org>
Date:   Tue Apr 12 00:17:02 2011 +0000

    #1556 updates to meas_algorithms to match changes in afw. This revision fails tests
</pre>
<h3><a name="40f64506"/></a>40f64506</h3>

<pre>
commit 40f64506ac2178c9e88646c55f0c84aae1341c66
Author: rhl <rhl@git.lsstcorp.org>
Date:   Wed Mar 2 11:12:20 2011 +0000

    Use an input list of [reference, source] Sources to choose psf candidates
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="2d3a5fcc"/></a>2d3a5fcc</h3>

<pre>
commit 2d3a5fccae9908251c54deaba743fc34137a65f5
Author: Russell Owen <rowen@uw.edu>
Date:   Thu Sep 11 17:45:03 2014 -0700

    Remove explicit use of image origin = PARENT; use default
</pre>
</div>


[Return to list](#homelist)
# <a name="src/WarpedPsf.cc"/></a>src/WarpedPsf.cc
### Diff:

<pre>
                // -*- lsst-c++ -*-
                
                /* 
                 * LSST Data Management System
                 * Copyright 2008, 2009, 2010 LSST Corporation.
                 * 
                 * This product includes software developed by the
                 * LSST Project (http://www.lsst.org/).
                 *
                 * This program is free software: you can redistribute it and/or modify
                 * it under the terms of the GNU General Public License as published by
                 * the Free Software Foundation, either version 3 of the License, or
                 * (at your option) any later version.
                 * 
                 * This program is distributed in the hope that it will be useful,
                 * but WITHOUT ANY WARRANTY; without even the implied warranty of
                 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                 * GNU General Public License for more details.
                 * 
                 * You should have received a copy of the LSST License Statement and 
                 * the GNU General Public License along with this program.  If not, 
                 * see <http://www.lsstcorp.org/LegalNotices/>.
                 */
                
                #include "lsst/pex/exceptions.h"
                #include "lsst/meas/algorithms/WarpedPsf.h"
                #include "lsst/afw/math/warpExposure.h"
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
28   <a href="#b2464af2">b2464af2</a> - #include "lsst/afw/math/detail/SrcPosFunctor.h"</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
28   <a href="#6f4cb65e">6f4cb65e</a> + #include "lsst/afw/image/Image.h"</div>
                
                namespace lsst { namespace meas { namespace algorithms {
                
                namespace {
                
                inline double min4(double a, double b, double c, double d) {
                    return std::min(std::min(a,b), std::min(c,d));
                }
                
                inline double max4(double a, double b, double c, double d) {
                    return std::max(std::max(a,b), std::max(c,d));
                }
                
                // TODO: make this routine externally callable and more generic using templates
                //  (also useful in e.g. math/offsetImage.cc)
                PTR(afw::detection::Psf::Image) zeroPadImage(afw::detection::Psf::Image const &im, int xPad, int yPad) {
                    int nx = im.getWidth();
                    int ny = im.getHeight();
                
                    PTR(afw::detection::Psf::Image) out = boost::make_shared<afw::detection::Psf::Image>(nx+2*xPad, ny+2*yPad);
                    out->setXY0(im.getX0()-xPad, im.getY0()-yPad);
                
                    afw::geom::Box2I box(afw::geom::Point2I(xPad,yPad), afw::geom::Extent2I(nx,ny));
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
52   <a href="#b2464af2">b2464af2</a> -     PTR(afw::detection::Psf::Image) subimage = boost::make_shared<afw::detection::Psf::Image>(*out, box);</div>
              ?                                                                                               -----------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
52   <a href="#6f4cb65e">6f4cb65e</a> +     PTR(afw::detection::Psf::Image) subimage = boost::make_shared<afw::detection::Psf::Image>(</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
53   <a href="#6f4cb65e">6f4cb65e</a> +         *out, box, lsst::afw::image::LOCAL);</div>
                    *subimage <<= im;
                
                    return out;
                }
                
                /**
                 * @brief Alternate interface to afw::math::warpImage()
                 * in which the caller does not need to precompute the output bounding box.
                 *
                 * We preserve the convention of warpImage() that the affine transform is inverted,
                 * so that the output and input images are related by:
                 *   out[p] = in[A^{-1}p]
                 *
                 * The input image is assumed zero-padded.
                 */
                PTR(afw::detection::Psf::Image) warpAffine(
                    afw::detection::Psf::Image const &im, afw::geom::AffineTransform const &t,
                    afw::math::WarpingControl const &wc
                ) {
                    static const int dst_padding = 0;
                
                    afw::math::SeparableKernel const& kernel = *wc.getWarpingKernel();
                    afw::geom::Point2I const& center = kernel.getCtr();
                    int const xPad = std::max(center.getX(), kernel.getWidth() - center.getX());
                    int const yPad = std::min(center.getY(), kernel.getHeight() - center.getY());
                
                    // This is the maximum scaling I can imagine we'd want - it's approximately what you'd
                    // get from trying to coadd 2"-pixel data (e.g. 2MASS) onto a 0.01"-pixel grid (e.g.
                    // from JWST).  Anything beyond that is probably a bug elsewhere in the code, and
                    // catching that can save us from segfaults and catastrophic memory consumption.
                    static const double maxTransformCoeff = 200.0;
                
                    if (t.getLinear().getMatrix().lpNorm<Eigen::Infinity>() > maxTransformCoeff) {
                        throw LSST_EXCEPT(
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
87   <a href="#bc57c90d">bc57c90d</a> -             pex::exceptions::RangeErrorException,</div>
              ?                                        ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
88   <a href="#ed246562">ed246562</a> +             pex::exceptions::RangeError,</div>
                            "Unexpectedly large transform passed to WarpedPsf"
                        );
                    }
                
                    // min/max coordinate values in input image
                    int in_xlo = im.getX0();
                    int in_xhi = im.getX0() + im.getWidth() - 1;
                    int in_ylo = im.getY0();
                    int in_yhi = im.getY0() + im.getHeight() - 1;
                
                    // corners of output image
                    afw::geom::Point2D c00 = t(afw::geom::Point2D(in_xlo,in_ylo));
                    afw::geom::Point2D c01 = t(afw::geom::Point2D(in_xlo,in_yhi));
                    afw::geom::Point2D c10 = t(afw::geom::Point2D(in_xhi,in_ylo));
                    afw::geom::Point2D c11 = t(afw::geom::Point2D(in_xhi,in_yhi));
                
                    //
                    // bounding box for output image
                    //
                    int out_xlo = floor(min4(c00.getX(),c01.getX(),c10.getX(),c11.getX())) - dst_padding;
                    int out_ylo = floor(min4(c00.getY(),c01.getY(),c10.getY(),c11.getY())) - dst_padding;
                    int out_xhi = ceil(max4(c00.getX(),c01.getX(),c10.getX(),c11.getX())) + dst_padding;
                    int out_yhi = ceil(max4(c00.getY(),c01.getY(),c10.getY(),c11.getY())) + dst_padding;
                
                    // allocate output image
                    PTR(afw::detection::Psf::Image) ret 
                        = boost::make_shared<afw::detection::Psf::Image>(out_xhi-out_xlo+1, out_yhi-out_ylo+1);
                    ret->setXY0(afw::geom::Point2I(out_xlo,out_ylo));
                
                    // zero-pad input image
                    PTR(afw::detection::Psf::Image) im_padded = zeroPadImage(im, xPad, yPad);
                
                    // warp it!
                    afw::math::warpImage(*ret, *im_padded, t, wc, 0.0);
                    return ret;
                }
                
                } // anonymous
                
                WarpedPsf::WarpedPsf(
                    PTR(afw::detection::Psf const) undistortedPsf,
                    PTR(afw::geom::XYTransform const) distortion,
                    CONST_PTR(afw::math::WarpingControl) control
                    ) :
                    ImagePsf(false),
                    _undistortedPsf(undistortedPsf),
                    _distortion(distortion),
                    _warpingControl(control)
                {
                    _init();
                }
                
                WarpedPsf::WarpedPsf(
                    PTR(afw::detection::Psf const) undistortedPsf,
                    PTR(afw::geom::XYTransform const) distortion,
                    std::string const& kernelName,
                    unsigned int cache
                    ) :
                    ImagePsf(false),
                    _undistortedPsf(undistortedPsf),
                    _distortion(distortion),
                    _warpingControl(new afw::math::WarpingControl(kernelName, "", cache))
                {
                    _init();
                }
                
                void WarpedPsf::_init()
                {
                    if (!_undistortedPsf) {
                        throw LSST_EXCEPT(
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
158  <a href="#b2464af2">b2464af2</a> -             pex::exceptions::LogicErrorException,</div>
              ?                                        ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
159  <a href="#ed246562">ed246562</a> +             pex::exceptions::LogicError,</div>
                            "Undistorted Psf passed to WarpedPsf must not be None/NULL"
                        );
                    }
                    if (!_distortion) {
                        throw LSST_EXCEPT(
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
164  <a href="#b2464af2">b2464af2</a> -             pex::exceptions::LogicErrorException,</div>
              ?                                        ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
165  <a href="#ed246562">ed246562</a> +             pex::exceptions::LogicError,</div>
                            "XYTransform passed to WarpedPsf must not be None/NULL"
                        );
                    }
                    if (!_warpingControl) {
                        throw LSST_EXCEPT(
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
170  <a href="#9435b5c9">9435b5c9</a> -             pex::exceptions::LogicErrorException,</div>
              ?                                        ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
171  <a href="#ed246562">ed246562</a> +             pex::exceptions::LogicError,</div>
                            "WarpingControl passed to WarpedPsf must not be None/NULL"
                        );
                    }
                }
                
                afw::geom::Point2D WarpedPsf::getAveragePosition() const {
                    return _distortion->forwardTransform(_undistortedPsf->getAveragePosition());
                }
                
                PTR(afw::detection::Psf) WarpedPsf::clone() const {
                    return boost::make_shared<WarpedPsf>(_undistortedPsf->clone(), _distortion->clone(), _warpingControl);
                }
                
                PTR(afw::detection::Psf::Image) WarpedPsf::doComputeKernelImage(
                    afw::geom::Point2D const & position, afw::image::Color const & color
                ) const {
                    afw::geom::AffineTransform t = _distortion->linearizeReverseTransform(position);
                    afw::geom::Point2D tp = t(position);
                
                    PTR(Image) im = _undistortedPsf->computeKernelImage(tp, color);
                
                    // Go to the warped coordinate system with 'p' at the origin
                    PTR(afw::detection::Psf::Psf::Image) ret
                        = warpAffine(*im, afw::geom::AffineTransform(t.invert().getLinear()), *_warpingControl);
                
                    double normFactor = 1.0;
                    // 
                    // Normalize the output image to sum 1
                    // FIXME defining a member function Image::getSum() would be convenient here and in other places
                    //
                    normFactor = 0.0;
                    for (int y = 0; y != ret->getHeight(); ++y) {
                        afw::detection::Psf::Image::x_iterator imEnd = ret->row_end(y);
                        for (afw::detection::Psf::Image::x_iterator imPtr = ret->row_begin(y); imPtr != imEnd; imPtr++) {
                            normFactor += *imPtr;
                        }
                    }
                    if (normFactor == 0.0) {
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
209  <a href="#b2464af2">b2464af2</a> -         throw LSST_EXCEPT(pex::exceptions::InvalidParameterException, "psf image has sum 0");</div>
              ?                                                             ^^^^^^ ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
210  <a href="#ed246562">ed246562</a> +         throw LSST_EXCEPT(pex::exceptions::InvalidParameterError, "psf image has sum 0");</div>
              ?                                                             ^^ ^
                    }
                    *ret /= normFactor;
                    return ret;
                }
                
                }}} // namepace lsst::meas::algorithms
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="9435b5c9"/></a>9435b5c9</h3>

<pre>
commit 9435b5c98479353fc42c311863ff3b8897362ff2
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed Jun 5 14:30:49 2013 -0500

    CoaddPsf, WarpedPsf: optimise warping execution time by 15x
    
    Picking some low-hanging fruit to speed up use of CoaddPsf when there
    are lots of inputs.
    
    97% of 1818 sec was being spent in warping.  Two ways I found to speed
    this up by an order of magnitude:
     * Use a less expensive warping kernel than lanczos5 (lanczos3 by default)
     * Cache the warping kernels in the CoaddPsf (10000 samples by default)
    I also tried converting the images being warped to float and warping
    those, but that resulted in a net increase in execution time.
    
    The default warping kernel and cache sizes are configurable in the Ctor.
    
    After the optimisation, the execution time is 116 sec.
</pre>
<h3><a name="bc57c90d"/></a>bc57c90d</h3>

<pre>
commit bc57c90dc9fa28867a9e81bd73327f34f5902dd1
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Thu May 30 12:19:54 2013 -0400

    Document and change exception for WarpedPsf checks (#2875)
</pre>
<h3><a name="b2464af2"/></a>b2464af2</h3>

<pre>
commit b2464af205082256fc5636574304ac6473d18c2c
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Tue Mar 19 14:15:41 2013 -0400

    Move KernelPsf, DoubleGaussianPsf, WarpedPsf, and associated tests to meas_algorithms.
    
    Moving Psf classes to meas_algorithms will let us implement shape and aperture
    flux measurements on Psf models using code in meas_algorithms.
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="6f4cb65e"/></a>6f4cb65e</h3>

<pre>
commit 6f4cb65efac63f0dea888246c91ae601897e800c
Author: Russell Owen <rowen@uw.edu>
Date:   Tue Sep 9 13:28:19 2014 -0700

    Specify image origin in a few cases where it was missing.
</pre>
<h3><a name="ed246562"/></a>ed246562</h3>

<pre>
commit ed2465629cb2a0b4fe5aedeb9f447da02cf38736
Author: Russell Owen <rowen@uw.edu>
Date:   Tue Jun 17 16:16:40 2014 -0700

    Renamed exceptions
</pre>
</div>


[Return to list](#homelist)
# <a name="tests/psfIO.py"/></a>tests/psfIO.py
### Diff:

<pre>
                #!/usr/bin/env python
                
                # 
                # LSST Data Management System
                # Copyright 2008, 2009, 2010 LSST Corporation.
                # 
                # This product includes software developed by the
                # LSST Project (http://www.lsst.org/).
                #
                # This program is free software: you can redistribute it and/or modify
                # it under the terms of the GNU General Public License as published by
                # the Free Software Foundation, either version 3 of the License, or
                # (at your option) any later version.
                # 
                # This program is distributed in the hope that it will be useful,
                # but WITHOUT ANY WARRANTY; without even the implied warranty of
                # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                # GNU General Public License for more details.
                # 
                # You should have received a copy of the LSST License Statement and 
                # the GNU General Public License along with this program.  If not, 
                # see <http://www.lsstcorp.org/LegalNotices/>.
                #
                
                """
                Tests for bad pixel interpolation code
                
                Run with:
                   python psfIO.py
                or
                   python
                   >>> import psfIO; psfIO.run()
                """
                
                import os, sys
                from math import *
                import unittest
                
                import numpy
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
41   <a href="#175584fa">175584fa</a> - import eups</div>
                import lsst.utils.tests as utilsTests
                import lsst.daf.base as dafBase
                import lsst.daf.persistence as dafPersist
                import lsst.pex.exceptions as pexExceptions
                import lsst.pex.logging as logging
                import lsst.pex.config as pexConf
                import lsst.pex.policy as policy
                import lsst.afw.geom as afwGeom
                import lsst.afw.image as afwImage
                import lsst.afw.detection as afwDetection
                import lsst.afw.math as afwMath
                import lsst.afw.table as afwTable
                import lsst.afw.display.ds9 as ds9
                import lsst.afw.display.utils as displayUtils
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
55   <a href="#6e52ace2">6e52ace2</a> + import lsst.meas.base as measBase</div>
                import lsst.meas.algorithms as algorithms
                import lsst.meas.algorithms.defects as defects
                
                try:
                    type(verbose)
                except NameError:
                    display = False
                    verbose = 0
                    logging.Trace_setVerbosity("algorithms.psf", verbose)
                
                psfFileNum = 1
                def roundTripPsf(key, psf):
                    global psfFileNum
                    pol = policy.Policy()
                    additionalData = dafBase.PropertySet()
                
                    if psfFileNum % 2 == 1:
                        storageType = "Boost"
                    else:
                        storageType = "Xml"
                    loc = dafPersist.LogicalLocation(
                            "tests/data/psf%d-%d.%s" % (psfFileNum, key, storageType))
                    psfFileNum += 1
                    persistence = dafPersist.Persistence.getPersistence(pol)
                
                    storageList = dafPersist.StorageList()
                    storage = persistence.getPersistStorage("%sStorage" % (storageType), loc)
                    storageList.append(storage)
                    persistence.persist(psf, storageList, additionalData)
                
                    storageList2 = dafPersist.StorageList()
                    storage2 = persistence.getRetrieveStorage("%sStorage" % (storageType), loc)
                    storageList2.append(storage2)
                    psfptr = persistence.unsafeRetrieve("Psf", storageList2, additionalData)
                    psf2 = afwDetection.Psf.swigConvert(psfptr)
                
                    return psf2
                
                #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                
                class SpatialModelPsfTestCase(unittest.TestCase):
                    """A test case for SpatialModelPsf"""
                
                    def setUp(self):
                        width, height = 100, 300
                        self.mi = afwImage.MaskedImageF(afwGeom.ExtentI(width, height))
                        self.mi.set(0)
                        self.mi.getVariance().set(10)
                        self.mi.getMask().addMaskPlane("DETECTED")
                
                        self.FWHM = 5
                        self.ksize = 25                      # size of desired kernel
                
                        self.exposure = afwImage.makeExposure(self.mi)
                
                        psf = roundTripPsf(2, algorithms.DoubleGaussianPsf(self.ksize, self.ksize,
                                                                             self.FWHM/(2*sqrt(2*log(2))), 1, 0.1))
                        self.exposure.setPsf(psf)
                
                        for x, y in [(20, 20),
                                     #(30, 35), (50, 50),
                                     (60, 20), (60, 210), (20, 210)]:
                
                
                            flux = 10000 - 0*x - 10*y
                
                            sigma = 3 + 0.01*(y - self.mi.getHeight()/2)
                            psf = roundTripPsf(3, algorithms.DoubleGaussianPsf(self.ksize, self.ksize, sigma, 1, 0.1))
                            im = psf.computeImage().convertF()
                            im *= flux
                            smi = self.mi.getImage().Factory(self.mi.getImage(),
                                                             afwGeom.BoxI(afwGeom.PointI(x - self.ksize/2, y - self.ksize/2),
                                                                          afwGeom.ExtentI(self.ksize)), 
                                                             afwImage.LOCAL)
                
                            if False:                   # Test subtraction with non-centered psfs
                                im = afwMath.offsetImage(im, 0.5, 0.5)
                
                            smi += im
                            del psf; del im; del smi
                
                        psf = roundTripPsf(4, algorithms.DoubleGaussianPsf(self.ksize, self.ksize,
                                                                             self.FWHM/(2*sqrt(2*log(2))), 1, 0.1))
                
                        self.cellSet = afwMath.SpatialCellSet(afwGeom.BoxI(afwGeom.PointI(0, 0), afwGeom.ExtentI(width, height)), 100)
                        ds = afwDetection.FootprintSet(self.mi, afwDetection.Threshold(10), "DETECTED")
                        #
                        # Prepare to measure
                        #
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
145  <a href="#b0d8591f">b0d8591f</a> -         msConfig = algorithms.SourceMeasurementConfig()</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
146  <a href="#c5501d71">c5501d71</a> -         msConfig.load("tests/config/MeasureSources.py")</div>
                        schema = afwTable.SourceTable.makeMinimalSchema()
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
148  <a href="#b0d8591f">b0d8591f</a> -         measureSources = msConfig.makeMeasureSources(schema)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
146  <a href="#6e52ace2">6e52ace2</a> +         sfm_config = measBase.SingleFrameMeasurementConfig()</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
147  <a href="#e9706731">e9706731</a> +         sfm_config.plugins = ["base_SdssCentroid", "base_CircularApertureFlux", "base_PsfFlux",</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
148  <a href="#6e52ace2">6e52ace2</a> +                               "base_SdssShape", "base_GaussianFlux",</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
149  <a href="#6e52ace2">6e52ace2</a> +                               "base_ClassificationExtendedness", "base_PixelFlags"]</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
150  <a href="#6e52ace2">6e52ace2</a> +         sfm_config.slots.centroid = "base_SdssCentroid"</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
151  <a href="#6e52ace2">6e52ace2</a> +         sfm_config.slots.shape = "base_SdssShape"</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
152  <a href="#6e52ace2">6e52ace2</a> +         sfm_config.slots.psfFlux = "base_PsfFlux"</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
153  <a href="#6e52ace2">6e52ace2</a> +         sfm_config.slots.instFlux = None</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
154  <a href="#e9706731">e9706731</a> +         sfm_config.slots.apFlux = "base_CircularApertureFlux_0"</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
155  <a href="#6e52ace2">6e52ace2</a> +         sfm_config.slots.modelFlux = "base_GaussianFlux"</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
156  <a href="#6e52ace2">6e52ace2</a> +         sfm_config.plugins["base_SdssShape"].maxShift = 10.0</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
157  <a href="#e9706731">e9706731</a> +         sfm_config.plugins["base_CircularApertureFlux"].radii = [3.0]</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
158  <a href="#6e52ace2">6e52ace2</a> +         task = measBase.SingleFrameMeasurementTask(schema, config=sfm_config)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
149  <a href="#0fa9ad60">0fa9ad60</a> -         catalog = afwTable.SourceCatalog(schema)</div>
              ?         ^  ----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
159  <a href="#6e52ace2">6e52ace2</a> +         measCat = afwTable.SourceCatalog(schema)</div>
              ?         ^^^^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
160  <a href="#6e52ace2">6e52ace2</a> +         # detect the sources and run with the measurement task</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
150  <a href="#f5b81018">f5b81018</a> -         msConfig.slots.calibFlux = None</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
151  <a href="#0fa9ad60">0fa9ad60</a> -         msConfig.slots.setupTable(catalog.table)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
152  <a href="#0fa9ad60">0fa9ad60</a> -         ds.makeSources(catalog)</div>
              ?                        ^  ----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
161  <a href="#6e52ace2">6e52ace2</a> +         ds.makeSources(measCat)</div>
              ?                        ^^^^^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
153  <a href="#0fa9ad60">0fa9ad60</a> -         for i, source in enumerate(catalog):</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
154  <a href="#85ab1211">85ab1211</a> -             measureSources.applyWithPeak(source, self.exposure)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
162  <a href="#6e52ace2">6e52ace2</a> +         task.run(measCat, self.exposure)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
163  <a href="#6e52ace2">6e52ace2</a> +         for source in measCat:</div>
                            self.cellSet.insertCandidate(algorithms.makePsfCandidate(source, self.exposure))
                
                    def tearDown(self):
                        del self.cellSet
                        del self.mi
                        del self.exposure
                
                    def testGetPcaKernel(self):
                        """Convert our cellSet to a LinearCombinationKernel"""
                
                        nEigenComponents = 2
                        spatialOrder  =    1
                        kernelSize =      21
                        nStarPerCell =     2
                        nStarPerCellSpatialFit = 2
                        tolerance =     1e-5
                
                        if display:
                            ds9.mtv(self.mi, frame=0)
                            #
                            # Show the candidates we're using
                            #
                            for cell in self.cellSet.getCellList():
                                i = 0
                                for cand in cell:
                                    i += 1
                                    source = algorithms.cast_PsfCandidateF(cand).getSource()
                                    
                                    xc, yc = source.getXAstrom() - self.mi.getX0(), source.getYAstrom() - self.mi.getY0()
                                    if i <= nStarPerCell:
                                        ds9.dot("o", xc, yc, ctype=ds9.GREEN)
                                    else:
                                        ds9.dot("o", xc, yc, ctype=ds9.YELLOW)
                
                        pair = algorithms.createKernelFromPsfCandidates(self.cellSet, self.exposure.getDimensions(),
                                                                        self.exposure.getXY0(), nEigenComponents, spatialOrder,
                                                                        kernelSize, nStarPerCell)
                
                        kernel, eigenValues = pair[0], pair[1]; del pair
                
                        print "lambda", " ".join(["%g" % l for l in eigenValues])
                
                        pair = algorithms.fitSpatialKernelFromPsfCandidates(kernel, self.cellSet, nStarPerCellSpatialFit, tolerance)
                        status, chi2 = pair[0], pair[1]; del pair
                        print "Spatial fit: %s chi^2 = %.2g" % (status, chi2)
                
                        psf = algorithms.PcaPsf.swigConvert(roundTripPsf(5, algorithms.PcaPsf(kernel))) # Hurrah!
                
                        self.assertTrue(afwMath.cast_AnalyticKernel(psf.getKernel()) is None)
                        self.assertTrue(afwMath.cast_LinearCombinationKernel(psf.getKernel()) is not None)
                
                        self.checkTablePersistence(psf)
                
                        if display:
                            #print psf.getKernel().toString()
                
                            eImages = []
                            for k in afwMath.cast_LinearCombinationKernel(psf.getKernel()).getKernelList():
                                im = afwImage.ImageD(k.getDimensions())
                                k.computeImage(im, False)
                                eImages.append(im)
                
                            mos = displayUtils.Mosaic()
                            frame = 3
                            ds9.mtv(mos.makeMosaic(eImages), frame=frame)
                            ds9.dot("Eigen Images", 0, 0, frame=frame)
                            #
                            # Make a mosaic of PSF candidates
                            #
                            stamps = []
                            stampInfo = []
                
                            for cell in self.cellSet.getCellList():
                                for cand in cell:
                                    #
                                    # Swig doesn't know that we inherited from SpatialCellMaskedImageCandidate;  all
                                    # it knows is that we have a SpatialCellCandidate, and SpatialCellCandidates
                                    # don't know about getMaskedImage;  so cast the pointer to PsfCandidate
                                    #
                                    cand = algorithms.cast_PsfCandidateF(cand)
                                    s = cand.getSource()
                
                                    im = cand.getMaskedImage()
                
                                    stamps.append(im)
                                    stampInfo.append("[%d 0x%x]" % (s.getId(), s.getFlagForDetection()))
                        
                                    mos = displayUtils.Mosaic()
                            frame = 1
                            ds9.mtv(mos.makeMosaic(stamps), frame=frame, lowOrderBits=True)
                            for i in range(len(stampInfo)):
                                ds9.dot(stampInfo[i], mos.getBBox(i).getX0(), mos.getBBox(i).getY0(), frame=frame, ctype=ds9.RED)
                
                            psfImages = []
                            labels = []
                            if False:
                                nx, ny = 3, 4
                                for iy in range(ny):
                                    for ix in range(nx):
                                        x = int((ix + 0.5)*self.mi.getWidth()/nx)
                                        y = int((iy + 0.5)*self.mi.getHeight()/ny)
                
                                        im = psf.getImage(x, y)
                                        psfImages.append(im.Factory(im, True))
                                        labels.append("PSF(%d,%d)" % (int(x), int(y)))
                
                                        if True:
                                            print x, y, "PSF parameters:", psf.getKernel().getKernelParameters()
                            else:
                                nx, ny = 2, 2
                                for x, y in [(20, 20), (60, 20), 
                                             (60, 210), (20, 210)]:
                
                                    im = psf.computeImage(afwGeom.PointD(x, y))
                                    psfImages.append(im.Factory(im, True))
                                    labels.append("PSF(%d,%d)" % (int(x), int(y)))
                                    
                                    if True:
                                        print x, y, "PSF parameters:", psf.getKernel().getKernelParameters()
                                    
                            frame = 2
                            mos.makeMosaic(psfImages, frame=frame, mode=nx)
                            mos.drawLabels(labels, frame=frame)
                
                        if display:
                            
                            ds9.mtv(self.mi, frame=0)
                
                            psfImages = []
                            labels = []
                            if False:
                                nx, ny = 3, 4
                                for iy in range(ny):
                                    for ix in range(nx):
                                        x = int((ix + 0.5)*self.mi.getWidth()/nx)
                                        y = int((iy + 0.5)*self.mi.getHeight()/ny)
                
                                        algorithms.subtractPsf(psf, self.mi, x, y)
                            else:
                                nx, ny = 2, 2
                                for x, y in [(20, 20), (60, 20), 
                                             (60, 210), (20, 210)]:
                                        
                                    if False:               # Test subtraction with non-centered psfs
                                        x += 0.5; y -= 0.5
                
                                    #algorithms.subtractPsf(psf, self.mi, x, y)
                
                            ds9.mtv(self.mi, frame=1)
                            
                    def testCandidateList(self):
                        if False and display:
                            ds9.mtv(self.mi)
                
                            for cell in self.cellSet.getCellList():
                                x0, y0, x1, y1 = \
                                    cell.getBBox().getX0(), cell.getBBox().getY0(), cell.getBBox().getX1(), cell.getBBox().getY1()
                                print x0, y0, " ", x1, y1
                                x0 -= 0.5; y0 -= 0.5
                                x1 += 0.5; y1 += 0.5
                
                                ds9.line([(x0, y0), (x1, y0), (x1, y1), (x0, y1), (x0, y0)], ctype=ds9.RED)
                
                        self.assertFalse(self.cellSet.getCellList()[0].empty())
                        self.assertTrue(self.cellSet.getCellList()[1].empty())
                        self.assertFalse(self.cellSet.getCellList()[2].empty())
                
                        stamps = []
                        stampInfo = []
                        for cell in self.cellSet.getCellList():
                            for cand in cell:
                                #
                                # Swig doesn't know that we inherited from SpatialCellMaskedImageCandidate;  all
                                # it knows is that we have a SpatialCellCandidate, and SpatialCellCandidates
                                # don't know about getMaskedImage;  so cast the pointer to SpatialCellMaskedImageCandidate<float>
                                # and all will be well
                                #
                                cand = afwMath.cast_SpatialCellMaskedImageCandidateF(cell[0])
                                width, height = 15, 17
                                cand.setWidth(width); cand.setHeight(height);
                
                                im = cand.getMaskedImage()
                                stamps.append(im)
                
                                self.assertEqual(im.getWidth(), width)
                                self.assertEqual(im.getHeight(), height)
                        
                        if display:
                            mos = displayUtils.Mosaic()
                            ds9.mtv(mos.makeMosaic(stamps), frame=1)
                
                    def checkTablePersistence(self, psf1):
                        """Called by testGetPcaKernel to test table-based persistence; it's a pain to
                        build a PcaPsf, so we don't want to repeat it all for each test case.
                        
                        We just verify here that we get a LinearCombinationKernel; all the details of
                        testing that we get the *right* one are tested more thoroughly in afw.
                        """
                        print "Testing PcaPsf!"
                        filename = "PcaPsf.fits"
                        psf1.writeFits(filename)
                        psf2 = algorithms.PcaPsf.readFits(filename)
                        self.assert_(psf2 is not None)
                        self.assert_(psf2.getKernel() is not None)
                        self.assert_(afwMath.LinearCombinationKernel.swigConvert(psf2.getKernel()) is not None)
                        os.remove(filename)
                
                #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                
                class SingleGaussianPsfTestCase(unittest.TestCase):
                
                    def testTablePersistence(self):
                        filename = "SingleGaussianPsf.fits"
                        psf1 = algorithms.SingleGaussianPsf(5, 7, 4.2)
                        psf1.writeFits(filename)
                        psf2 = algorithms.SingleGaussianPsf.readFits(filename)
                        self.assertEqual(psf1.getSigma(), psf2.getSigma())
                        os.remove(filename)
                
                
                class DoubleGaussianPsfTestCase(unittest.TestCase):
                    """A test case for DoubleGaussianPsf"""
                
                    def assertClose(self, a, b):
                        self.assert_(numpy.allclose(a, b), "%s != %s" % (a, b))
                
                    def comparePsfs(self, psf1, psf2):
                        self.assert_(isinstance(psf1, algorithms.DoubleGaussianPsf))
                        self.assert_(isinstance(psf2, algorithms.DoubleGaussianPsf))
                        self.assertEqual(psf1.getKernel().getWidth(), psf2.getKernel().getWidth())
                        self.assertEqual(psf1.getKernel().getHeight(), psf2.getKernel().getHeight())
                        self.assertEqual(psf1.getSigma1(), psf2.getSigma1())
                        self.assertEqual(psf1.getSigma2(), psf2.getSigma2())
                        self.assertEqual(psf1.getB(), psf2.getB())
                        
                    def setUp(self):
                        self.ksize = 25                      # size of desired kernel
                        FWHM = 5
                        self.sigma1 = FWHM/(2*numpy.sqrt(2*numpy.log(2)))
                        self.sigma2 = 2*self.sigma1
                        self.b = 0.1
                
                    def testBoostPersistence(self):
                        psf1 = algorithms.DoubleGaussianPsf(self.ksize, self.ksize, self.sigma1, self.sigma2, self.b)
                        psf2 = roundTripPsf(1, psf1)
                        psf3 = roundTripPsf(1, psf1)
                        self.comparePsfs(psf1, algorithms.DoubleGaussianPsf.swigConvert(psf2))
                        self.comparePsfs(psf1, algorithms.DoubleGaussianPsf.swigConvert(psf3))
                
                    def testFitsPersistence(self):
                        psf1 = algorithms.DoubleGaussianPsf(self.ksize, self.ksize, self.sigma1, self.sigma2, self.b)
                        filename = "tests/data/psf1-1.fits"
                        psf1.writeFits("tests/data/psf1-1.fits")
                        psf2 = algorithms.DoubleGaussianPsf.readFits("tests/data/psf1-1.fits")
                        self.comparePsfs(psf1, psf2)
                
                #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                
                def suite():
                    """Returns a suite containing all the test cases in this module."""
                    utilsTests.init()
                
                    suites = []
                    suites += unittest.makeSuite(SpatialModelPsfTestCase)
                    suites += unittest.makeSuite(SingleGaussianPsfTestCase)
                    suites += unittest.makeSuite(DoubleGaussianPsfTestCase)
                    suites += unittest.makeSuite(utilsTests.MemoryTestCase)
                    return unittest.TestSuite(suites)
                
                def run(exit=False):
                    """Run the utilsTests"""
                    utilsTests.run(suite(), exit)
                
                if __name__ == "__main__":
                    run(True)
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="0fa9ad60"/></a>0fa9ad60</h3>

<pre>
commit 0fa9ad6092b97c9cd0e29827d107cfb1b2dd76fc
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Thu Feb 23 12:28:57 2012 -0500

    updated to reflect VectorT->CatalogT name change in afw
</pre>
<h3><a name="b0d8591f"/></a>b0d8591f</h3>

<pre>
commit b0d8591f0e28fd34c95f1548ebda5695e46d2a22
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Mon Feb 20 18:14:44 2012 -0500

    merge from tickets/1843; tests/psf.py is failing, but it appears to be failing on master too
</pre>
<h3><a name="85ab1211"/></a>85ab1211</h3>

<pre>
commit 85ab1211e8e50166554d0f5b1b70d95f9849901c
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Thu Jan 31 01:13:07 2013 -0500

    Give source measurement drivers a more uniform and readable API
    
    MeasureSources must now be informed upon creation whether it will be used for forced measurement.
    Renamed apply(source, exposure) to applyWithPeak.
    Renamed apply(...) with references to applyForced.
    All applyXX() methods now support centroid tweak-ups (with different defaults).
    Centroids are tweaked if centroider.name!=None even in forced photometry mode.
    Test code modified to test new centroid-tweaking options; see also #2612.
</pre>
<h3><a name="c5501d71"/></a>c5501d71</h3>

<pre>
commit c5501d71c18b9d1d0bd1f70dae5851acd5ce5312
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Tue Jan 31 17:48:26 2012 -0500

    fix to reflect change in Config.load semantics
</pre>
<h3><a name="f5b81018"/></a>f5b81018</h3>

<pre>
commit f5b810185e334994c0858ae6b617620d69aca510
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Wed Dec 10 16:34:07 2014 -0500

    Add support for new CalibFlux slot in measurement configuration
    
    By default, we'll use flux.naive for this slot, as that's appropriate for
    large apertures, and it's not being used for anything else.
</pre>
<h3><a name="175584fa"/></a>175584fa</h3>

<pre>
commit 175584fa54727da95e1b57e313e88628a6888614
Author: ktlim <ktlim@git.lsstcorp.org>
Date:   Fri Mar 6 08:26:28 2009 +0000

    Make PSFs Persistable: subclass from dafBase::Persistable, add PsfFormatter,
    arrange for serialization of dgPSF, invoke %lsst_persistable() in SWIG
    interface.  Move two implementation header files from src directory to
    include/details.
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="e9706731"/></a>e9706731</h3>

<pre>
commit e970673179cb0625f6efe5b78be04d6b96ad9f16
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Thu Jan 22 18:15:49 2015 -0500

    Update tests to adapt to removal of NaiveFlux and SincFlux
    
    These have now been replaced by CircularApertureFlux.
</pre>
<h3><a name="6e52ace2"/></a>6e52ace2</h3>

<pre>
commit 6e52ace2e675ee56403e755754fcaf3e14d21541
Author: pgee <pgee@pgeepc2.physics.ucdavis.edu>
Date:   Mon Dec 8 11:08:39 2014 -0800

    DM-1608 move tests which will remain in meas_alg to new meas_base measurement framework.
    
    Also, delete those which were moved in DM-1456
</pre>
</div>


[Return to list](#homelist)
# <a name="tests/Interp.py"/></a>tests/Interp.py
### Diff:

<pre>
                #!/usr/bin/env python
                
                # 
                # LSST Data Management System
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
5    <a href="#c5720a8e">c5720a8e</a> - # Copyright 2008, 2009, 2010 LSST Corporation.</div>
              ?                 ^^^^^^^^   ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
5    <a href="#7ad849f2">7ad849f2</a> + # Copyright 2008-2015 LSST Corporation.</div>
              ?                 ^   ^
                # 
                # This product includes software developed by the
                # LSST Project (http://www.lsst.org/).
                #
                # This program is free software: you can redistribute it and/or modify
                # it under the terms of the GNU General Public License as published by
                # the Free Software Foundation, either version 3 of the License, or
                # (at your option) any later version.
                # 
                # This program is distributed in the hope that it will be useful,
                # but WITHOUT ANY WARRANTY; without even the implied warranty of
                # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                # GNU General Public License for more details.
                # 
                # You should have received a copy of the LSST License Statement and 
                # the GNU General Public License along with this program.  If not, 
                # see <http://www.lsstcorp.org/LegalNotices/>.
                #
                
                """
                Tests for bad pixel interpolation code
                
                Run with:
                   python Interp.py
                or
                   python
                   >>> import Interp; Interp.run()
                """
                
                import os
                from math import *
                import unittest
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
38   <a href="#4d375e47">4d375e47</a> - import eups</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
38   <a href="#21af0bb5">21af0bb5</a> + import lsst.utils</div>
                import math, numpy
                import lsst.utils.tests as tests
                import lsst.pex.logging as logging
                import lsst.afw.detection as afwDetection
                import lsst.afw.image as afwImage
                import lsst.afw.geom as afwGeom
                import lsst.afw.display.ds9 as ds9
                import lsst.meas.algorithms as algorithms
                import lsst.meas.algorithms.defects as defects
                
                try:
                    type(verbose)
                except NameError:
                    verbose = 0
                    logging.Trace_setVerbosity("algorithms.Interp", verbose)
                
                try:
                    type(display)
                except NameError:
                    display = False
                
                class interpolationTestCase(unittest.TestCase):
                    """A test case for interpolation"""
                    def setUp(self):
                        self.FWHM = 5
                        self.psf = algorithms.DoubleGaussianPsf(15, 15, self.FWHM/(2*sqrt(2*log(2))))
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
65   <a href="#21af0bb5">21af0bb5</a> +         afwdataDir = lsst.utils.getPackageDir('afwdata')</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
65   <a href="#6af8510f">6af8510f</a> -         maskedImageFile = os.path.join(eups.productDir("afwdata"), "CFHT", "D4", "cal-53535-i-797722_1.fits")</div>
              ?                                        -----------------       ^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
66   <a href="#21af0bb5">21af0bb5</a> +         maskedImageFile = os.path.join(afwdataDir, "CFHT", "D4", "cal-53535-i-797722_1.fits")</div>
              ?                                               ^^^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
66   <a href="#4d375e47">4d375e47</a> -             </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
67   <a href="#7ad849f2">7ad849f2</a> + </div>
                        self.mi = afwImage.MaskedImageF(maskedImageFile)
                        if False:                       # use sub-image?
                            self.mi = self.mi.Factory(self.mi, afwImage.BBox(afwImage.PointI(760, 20), 256, 256))
                        self.mi.getMask().addMaskPlane("INTERP")
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
72   <a href="#4d375e47">4d375e47</a> -         self.badPixels = defects.policyToBadRegionList(os.path.join(eups.productDir("meas_algorithms"),</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
73   <a href="#f98f7592">f98f7592</a> -                                                                     "policy", "BadPixels.paf"))</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
73   <a href="#21af0bb5">21af0bb5</a> +         measAlgorithmsDir = lsst.utils.getPackageDir('meas_algorithms')</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
74   <a href="#21af0bb5">21af0bb5</a> +         self.badPixels = defects.policyToBadRegionList(</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
75   <a href="#21af0bb5">21af0bb5</a> +             os.path.join(measAlgorithmsDir, "policy", "BadPixels.paf"))</div>
                
                    def tearDown(self):
                        del self.mi
                        del self.psf
                        del self.badPixels
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
80   <a href="#bc71e63a">bc71e63a</a> -     def XXXtestDetection(self):</div>
              ?         ---
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
82   <a href="#ccba703b">ccba703b</a> +     def testDetection(self):</div>
                        """Test Interp algorithms"""
                
                        if display:
                            frame = 0
                            ds9.mtv(self.mi, frame=frame, title="Original")
                
                        algorithms.interpolateOverDefects(self.mi, self.psf, self.badPixels)
                
                        if display:
                            ds9.mtv(self.mi, frame = frame + 1, title="Interpolated")
                            ds9.mtv(self.mi.getVariance(), frame = frame + 2, title="Variance")
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
93   <a href="#bc71e63a">bc71e63a</a> -     def XXXtest818(self):</div>
              ?         ---
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
95   <a href="#ccba703b">ccba703b</a> +     def test818(self):</div>
                        """A test case for #818; the full test is in /lsst/DC3root/ticketFiles/818"""
                
                        badPixels = algorithms.DefectListT()
                        defects = [((82, 663), 6, 8),
                                   ((83, 659), 9, 6),
                                   ((85, 660), 10, 11),
                                   ((87, 669), 3, 3),
                                   ]
                
                        for xy0, width, height in defects:
                            x0, y0 = xy0
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
105  <a href="#7359ed89">7359ed89</a> -             bbox = afwImage.BBox(afwImage.PointI(x0, y0), width, height)</div>
              ?                       ^ --- -       ^ ---
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
107  <a href="#ccba703b">ccba703b</a> +             bbox = afwGeom.BoxI(afwGeom.PointI(x0, y0), afwGeom.ExtentI(width, height))</div>
              ?                       ^^^     +    ^^^                  ++++++++++++++++              +
                            badPixels.push_back(algorithms.Defect(bbox))
                
                        mi = afwImage.MaskedImageF(517, 800)
                
                        algorithms.interpolateOverDefects(mi, self.psf, badPixels)
                
                    def test1295(self):
                        """A test case for #1295 (failure to interpolate over groups of defects"""
                
                        im = afwImage.ImageF(afwGeom.ExtentI(100, 100))
                        mi = afwImage.makeMaskedImage(im)
                        mi.set(100)
                        flat = afwImage.ImageF(im.getDimensions())
                        flat.set(1)
                        for i in range(100):
                            for j in range(100):
                                if i == 50 or i == 55 or i == 58:
                                    flat.set(i,j,0)
                                if i < 60 and i > 50 and j > 50:
                                    flat.set(i,j,0)
                
                        mi /= flat
                
                        if display:
                            ds9.mtv(mi, frame=0, title="Raw")
                
                        defectList = algorithms.DefectListT()
                        bbox = afwGeom.BoxI(afwGeom.PointI(50,0), afwGeom.ExtentI(1,100))
                        defectList.append(algorithms.Defect(bbox))
                        bbox = afwGeom.BoxI(afwGeom.PointI(55,0), afwGeom.ExtentI(1,100))
                        defectList.append(algorithms.Defect(bbox))
                        bbox = afwGeom.BoxI(afwGeom.PointI(58,0), afwGeom.ExtentI(1,100))
                        defectList.append(algorithms.Defect(bbox))
                        bbox = afwGeom.BoxI(afwGeom.PointI(51,51), afwGeom.ExtentI(9,49))
                        defectList.append(algorithms.Defect(bbox))
                
                        psf = algorithms.DoubleGaussianPsf(15, 15, 1./(2*math.sqrt(2*math.log(2))))
                        algorithms.interpolateOverDefects(mi, psf, defectList, 50.)
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
144  <a href="#bc71e63a">bc71e63a</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
146  <a href="#7ad849f2">7ad849f2</a> + </div>
                        if display:
                            ds9.mtv(mi, frame=1, title="Interpolated")
                
                        self.assertTrue(numpy.isfinite(mi.getImage().get(56, 51)))
                
                    def testEdge(self):
                        """Test that we can interpolate to the edge"""
                        mi = afwImage.MaskedImageF(80, 30)
                
                        ima = mi.getImage().getArray()
                        #
                        # Loop over number of bad columns at left or right edge of image
                        #
                        for nBadCol in range(0, 20):
                            mi.set((0, 0x0, 0))
                
                            numpy.random.seed(666)
                            ima[:] = numpy.random.uniform(-1, 1, ima.shape)
                
                            defects = []
                
                            if nBadCol > 0:
                                #
                                # Bad left edge
                                #
                                ima[:, 0:nBadCol] = 10
                                defects.append(afwGeom.BoxI(afwGeom.PointI(0,0),
                                                            afwGeom.ExtentI(nBadCol, mi.getHeight())))
                                #
                                # With another bad set of columns next to bad left edge
                                #
                                ima[:, -nBadCol:] = 10
                                defects.append(afwGeom.BoxI(afwGeom.PointI(mi.getWidth() - nBadCol, 0),
                                                            afwGeom.ExtentI(nBadCol, mi.getHeight())))
                                #
                                # Bad right edge
                                #
                                ima[0:10, nBadCol+1:nBadCol+4] = 100
                                defects.append(afwGeom.BoxI(afwGeom.PointI(nBadCol+1,0),
                                                            afwGeom.ExtentI(3, 10)))
                                #
                                # With another bad set of columns next to bad right edge
                                #
                                ima[0:10, -nBadCol-4:-nBadCol-1] = 100
                                defects.append((afwGeom.BoxI(afwGeom.PointI(mi.getWidth() - nBadCol - 4,0),
                                                             afwGeom.ExtentI(3, 10))))
                            #
                            # Test cases that left and right bad patches nearly (or do) coalesce
                            #
                            ima[-3:, 0:mi.getWidth()//2-1] = 100
                            defects.append(afwGeom.BoxI(afwGeom.PointI(0, mi.getHeight() - 3),
                                                        afwGeom.ExtentI(mi.getWidth()//2-1, 1)))
                
                            ima[-3:, mi.getWidth()//2+1:] = 100
                            defects.append(afwGeom.BoxI(afwGeom.PointI(mi.getWidth()//2 + 1, mi.getHeight() - 3),
                                                        afwGeom.ExtentI(mi.getWidth()//2 - 1, 1)))
                
                            ima[-2:, 0:mi.getWidth()//2] = 100
                            defects.append(afwGeom.BoxI(afwGeom.PointI(0, mi.getHeight() - 2),
                                                        afwGeom.ExtentI(mi.getWidth()//2, 1)))
                
                            ima[-2:, mi.getWidth()//2+1:] = 100
                            defects.append(afwGeom.BoxI(afwGeom.PointI(mi.getWidth()//2 + 1, mi.getHeight() - 2),
                                                                       afwGeom.ExtentI(mi.getWidth()//2 - 1, 1)))
                
                            ima[-1:, :] = 100
                            defects.append(afwGeom.BoxI(afwGeom.PointI(0, mi.getHeight() - 1),
                                                        afwGeom.ExtentI(mi.getWidth(), 1)))
                
                            # Test fix for HSC-978: long defect stops one pixel shy of the edge (when nBadCol == 0)
                            ima[13, :-1] = 100
                            defects.append(afwGeom.BoxI(afwGeom.PointI(0, 13), afwGeom.ExtentI(mi.getWidth() - 1, 1)))
                            ima[14, 1:] = 100
                            defects.append(afwGeom.BoxI(afwGeom.PointI(1, 14), afwGeom.ExtentI(mi.getWidth() - 1, 1)))
                
                            #
                            # Build list of defects to interpolate over
                            #
                            defectList = algorithms.DefectListT()
                
                            for bbox in defects:
                                defectList.append(algorithms.Defect(bbox))
                            #
                            # Guess a PSF and do the work
                            #
                            if display:
                                ds9.mtv(mi, frame=0)
                
                            psf = algorithms.DoubleGaussianPsf(15, 15, 1./(2*math.sqrt(2*math.log(2))))
                            algorithms.interpolateOverDefects(mi, psf, defectList, 0, True)
                
                            if display:
                                ds9.mtv(mi, frame=1)
                
                            self.assertGreater(numpy.min(ima), -2)
                            self.assertGreater(2, numpy.max(ima))
                
                #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                
                def suite():
                    """Returns a suite containing all the test cases in this module."""
                    tests.init()
                
                    suites = []
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
249  <a href="#46fc5caf">46fc5caf</a> -     if eups.productDir("afwdata"):</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
251  <a href="#21af0bb5">21af0bb5</a> +     try:</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
252  <a href="#21af0bb5">21af0bb5</a> +         lsst.utils.getPackageDir('afwdata')</div>
                        suites += unittest.makeSuite(interpolationTestCase)
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
251  <a href="#46fc5caf">46fc5caf</a> -     else:</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
254  <a href="#21af0bb5">21af0bb5</a> +     except Exception:</div>
                        print "Skipping interpolation test case as afwdata isn't set up"
                    suites += unittest.makeSuite(tests.MemoryTestCase)
                    return unittest.TestSuite(suites)
                
                
                def run(exit = False):
                    """Run the tests"""
                    tests.run(suite(), exit)
                
                if __name__ == "__main__":
                    run(True)
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="7359ed89"/></a>7359ed89</h3>

<pre>
commit 7359ed891e1ef4c62117f980bddc0b42801db58e
Author: rhl <rhl@git.lsstcorp.org>
Date:   Sat May 23 01:53:28 2009 +0000

    The classification didn't handle defects of finite row extent correctly; #818
</pre>
<h3><a name="4d375e47"/></a>4d375e47</h3>

<pre>
commit 4d375e471cf0578e6d47b8c4f86d99ad126700df
Author: rhl <rhl@git.lsstcorp.org>
Date:   Fri Nov 28 21:01:14 2008 +0000

    Merged revisions 6510,6514-6532,6551,6554,6573-6574,6578-6579 via svnmerge (#490) from
    svn+ssh://svn.lsstcorp.org/DMS/meas/algorithms/tickets/490
    
    ........
      r6510 | rhl | 2008-11-25 13:50:24 -0500 (Tue, 25 Nov 2008) | 2 lines
    
      Work on ticket #490
    ........
      r6514 | rhl | 2008-11-25 13:56:39 -0500 (Tue, 25 Nov 2008) | 2 lines
    
      #490
    ........
      r6515 | rhl | 2008-11-25 13:56:48 -0500 (Tue, 25 Nov 2008) | 2 lines
    
      #490
    ........
      r6516 | rhl | 2008-11-25 13:56:55 -0500 (Tue, 25 Nov 2008) | 2 lines
    
      #490
    ........
      r6517 | rhl | 2008-11-25 13:57:04 -0500 (Tue, 25 Nov 2008) | 2 lines
    
      #490
    ........
      r6518 | rhl | 2008-11-25 13:58:55 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6519 | rhl | 2008-11-25 13:58:58 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6520 | rhl | 2008-11-25 13:59:02 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6521 | rhl | 2008-11-25 13:59:05 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6522 | rhl | 2008-11-25 14:04:54 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6523 | rhl | 2008-11-25 14:05:08 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6524 | rhl | 2008-11-25 14:05:11 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6525 | rhl | 2008-11-25 14:05:15 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6526 | rhl | 2008-11-25 14:15:43 -0500 (Tue, 25 Nov 2008) | 1 line
    
      Need to be able to import lsst.meas.algorithms
    ........
      r6527 | rhl | 2008-11-25 14:16:21 -0500 (Tue, 25 Nov 2008) | 1 line
    
      Need to be able to import lsst.meas.algorithms
    ........
      r6528 | rhl | 2008-11-25 14:16:28 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6529 | rhl | 2008-11-25 14:22:35 -0500 (Tue, 25 Nov 2008) | 1 line
    
      We didn't really want lsst.detection (but that was where it was in DMS/detection)
    ........
      r6530 | rhl | 2008-11-25 14:30:30 -0500 (Tue, 25 Nov 2008) | 1 line
    
      Needed for .paf files
    ........
      r6531 | rhl | 2008-11-25 14:31:14 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6532 | rhl | 2008-11-25 14:31:17 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6551 | rhl | 2008-11-25 20:01:04 -0500 (Tue, 25 Nov 2008) | 1 line
    
      Got code back to the shape it was in while at detection/trunk
    ........
      r6554 | rhl | 2008-11-25 21:16:17 -0500 (Tue, 25 Nov 2008) | 1 line
    
      Initial version of FootprintFunctor that passes tests (base class needs to move to afw)
    ........
      r6573 | rhl | 2008-11-26 08:19:17 -0500 (Wed, 26 Nov 2008) | 1 line
    
      Improve FootprintFunctor.apply() to be a little more efficient
    ........
      r6574 | rhl | 2008-11-26 09:45:45 -0500 (Wed, 26 Nov 2008) | 1 line
    
      Abolish the Measure object; it didn't make sense as a unit of packaging
    ........
      r6578 | rhl | 2008-11-26 09:58:15 -0500 (Wed, 26 Nov 2008) | 1 line
    
      Moved FootprintFunctor to afw
    ........
      r6579 | rhl | 2008-11-26 11:14:04 -0500 (Wed, 26 Nov 2008) | 1 line
    
      Use FootprintFunctor to remove CRs
    ........
</pre>
<h3><a name="c5720a8e"/></a>c5720a8e</h3>

<pre>
commit c5720a8ef2c923bc66513bbc602641f7387024d2
Author: dgehrig <dgehrig@git.lsstcorp.org>
Date:   Sun Jul 11 23:51:33 2010 +0000

    adding copyright notices
</pre>
<h3><a name="f98f7592"/></a>f98f7592</h3>

<pre>
commit f98f7592c24b635edc4c680e51ebfb72780dea34
Author: rhl <rhl@git.lsstcorp.org>
Date:   Wed Dec 16 20:56:08 2009 +0000

    Policy files moved from ./pipeline to ./policy
</pre>
<h3><a name="6af8510f"/></a>6af8510f</h3>

<pre>
commit 6af8510feeb3912b023eb1922e90755ffa21653c
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Wed Nov 21 17:24:17 2012 -0500

    update tests to use afwdata MEFs instead of split MaskedImages
</pre>
<h3><a name="46fc5caf"/></a>46fc5caf</h3>

<pre>
commit 46fc5caff034e82aa25c1aa6bd301f126d437a5c
Author: rhl <rhl@git.lsstcorp.org>
Date:   Wed Mar 11 22:23:40 2009 +0000

    Misc PSF changes
</pre>
<h3><a name="bc71e63a"/></a>bc71e63a</h3>

<pre>
commit bc71e63affbee923092ce051d745dc0831769547
Author: rhl <rhl@git.lsstcorp.org>
Date:   Thu May 27 02:04:48 2010 +0000

    Wide followed by narrow defects caused some bad pixels to be missed; #1295
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="7ad849f2"/></a>7ad849f2</h3>

<pre>
commit 7ad849f28f2906db1696453f8830750b600b325e
Author: Lauren MacArthur <lauren@astro.princeton.edu>
Date:   Tue Feb 17 18:42:36 2015 -0500

    Remove white space, fix copyright year, and minor formatting
</pre>
<h3><a name="21af0bb5"/></a>21af0bb5</h3>

<pre>
commit 21af0bb557d73ee16cc3a02e547739e1cd6def5d
Author: Joshua Hoblitt <josh@hoblitt.com>
Date:   Tue May 26 15:42:16 2015 -0700

    replace eups.productDir() calls with lsst.utils.getPackageDir()
</pre>
<h3><a name="ccba703b"/></a>ccba703b</h3>

<pre>
commit ccba703b9d1a4061763219c5971a7e13d80c7eb2
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Wed May 21 17:02:20 2014 -0400

    Reenable tests; DM-735
</pre>
</div>


[Return to list](#homelist)
# <a name="include/lsst/meas/algorithms/shapelet/Params.h"/></a>include/lsst/meas/algorithms/shapelet/Params.h
### Diff:

<pre>
                #ifndef MeasAlgoShapeletParams_H
                #define MeasAlgoShapeletParams_H
                
                #include <stdexcept>
                #include <vector>
                #include <ostream>
                
                namespace lsst {
                namespace meas {
                namespace algorithms {
                namespace shapelet {
                
                    // Default value for various measured quantities
                #define DEFVALPOS 9999
                #define DEFVALNEG -9999
                
                    //
                    // Flags 
                    //
                    static const long INPUT_FLAG              = 0x1;
                    static const long TRANSFORM_EXCEPTION     = 0x2;
                    static const long FITTEDPSF_EXCEPTION     = 0x4;
                    static const long TMV_EXCEPTION           = 0x8;
                    static const long STD_EXCEPTION           = 0x10;
                    static const long UNKNOWN_EXCEPTION       = 0x20;
                    static const long EDGE                    = 0x40;
                    static const long LT10PIX                 = 0x80;
                    static const long MEASURE_PSF_FAILED      = 0x100;
                    static const long NATIVE_FAILED           = 0x200;
                    static const long TOO_SMALL               = 0x400;
                    static const long DECONV_FAILED           = 0x800;
                    static const long SHEAR_FAILED            = 0x1000;
                    static const long SHAPELET_FAILED         = 0x2000;
                    static const long SHEAR_REDUCED_ORDER     = 0x4000;
                    static const long SHAPE_REDUCED_ORDER     = 0x8000;
                    static const long SHEAR_LOCAL_MIN         = 0x10000;
                    static const long SHEAR_POOR_FIT          = 0x20000;
                    static const long SHAPE_LOCAL_MIN         = 0x40000;
                    static const long SHAPE_POOR_FIT          = 0x80000;
                    static const long SHEAR_BAD_COVAR         = 0x100000;
                    static const long NO_SINGLE_EPOCH_IMAGES  = 0x200000;
                    static const long BKG_NOPIX               = 0x400000;
                    static const long PSF_INTERP_OUTLIER      = 0x800000;
                    static const long SHEAR_BAD_FLUX          = 0x1000000;
                    static const long PSF_BAD_FLUX            = 0x2000000;
                    static const long SHAPE_BAD_FLUX          = 0x4000000;
                    static const long CENTROID_FAILED         = 0x8000000;
                    static const long SHAPELET_NOT_DECONV     = 0x10000000;
                    static const long SHEAR_DIDNT_CONVERGE    = 0x20000000;
                
                    static const long NFLAGS = 30;
                
                    static const char*const flagName[NFLAGS] = {
                        "INPUT_FLAG",
                        "TRANSFORM_EXCEPTION",
                        "FITTEDPSF_EXCEPTION",
                        "TMV_EXCEPTION",
                        "STD_EXCEPTION",
                        "UNKNOWN_EXCEPTION",
                        "EDGE",
                        "LT10PIX",
                        "MEASURE_PSF_FAILED",
                        "NATIVE_FAILED",
                        "TOO_SMALL",
                        "DECONV_FAILED",
                        "SHEAR_FAILED",
                        "SHAPELET_FAILED",
                        "SHEAR_REDUCED_ORDER",
                        "SHAPE_REDUCED_ORDER",
                        "SHEAR_LOCAL_MIN",
                        "SHEAR_POOR_FIT",
                        "SHAPE_LOCAL_MIN",
                        "SHAPE_POOR_FIT",
                        "SHEAR_BAD_COVAR",
                        "NO_SINGLE_EPOCH_IMAGES",
                        "BKG_NOPIX",
                        "PSF_INTERP_OUTLIER",
                        "SHEAR_BAD_FLUX",
                        "PSF_BAD_FLUX",
                        "SHAPE_BAD_FLUX",
                        "CENTROID_FAILED",
                        "SHAPELET_NOT_DECONV",
                        "SHEAR_DIDNT_CONVERGE"
                    };
                
                    void PrintFlags(const std::vector<long>& flags, std::ostream& os);
                
                    // Errors specific to the weak lensing code
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
90   <a href="#7134f640">7134f640</a> -     struct FileNotFoundException : public std::runtime_error </div>
              ?                         ^^^^^^ ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
90   <a href="#ed246562">ed246562</a> +     struct FileNotFoundError : public std::runtime_error </div>
              ?                         ^^ ^
                    {
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
92   <a href="#7134f640">7134f640</a> -         FileNotFoundException(const std::string& filename) throw() :</div>
              ?                      ^^^^^^ ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
92   <a href="#ed246562">ed246562</a> +         FileNotFoundError(const std::string& filename) throw() :</div>
              ?                      ^^ ^
                            std::runtime_error("Error: file "+filename+" not found") 
                        {} 
                    };
                
                    struct ParameterException : public std::runtime_error 
                    {
                        ParameterException(const std::string& msg) throw() :
                            std::runtime_error(msg) 
                        {}
                    };
                
                    struct ReadException : public std::runtime_error
                    {
                        ReadException(const std::string& msg) throw() :
                            std::runtime_error(msg) 
                        {}
                    };
                
                    struct WriteException : public std::runtime_error 
                    {
                        WriteException(const std::string& msg) throw() :
                            std::runtime_error(msg) 
                        {}
                    };
                
                    struct ProcessingException : public std::runtime_error 
                    {
                        ProcessingException(const std::string& msg) throw() :
                            std::runtime_error(msg) 
                        {}
                    };
                
                    // Errors that may be thrown by the weak lensing code, but 
                    // defined in other files
                
                    // StarFinderException        -- Treat as ProcessingException
                    // AssertFailure              -- Treat as ProcessingException
                    // tmv::Error                 -- Treat as ProcessingException
                    // std::exception             -- Treat as ProcessingException
                
                
                
                    //
                    // Exit codes
                    //
                
                    enum ExitCode { 
                        SUCCESS = 0,
                        FAILURE,
                        FAILURE_FILE_NOT_FOUND,
                        FAILURE_PARAMETER_ERROR,
                        FAILURE_READ_ERROR,
                        FAILURE_WRITE_ERROR,
                        FAILURE_PROCESSING_ERROR
                    };
                
                    const char* Text(const ExitCode& code);
                
                    class ConfigFile;
                    int Status(ExitCode code, const ConfigFile& params);
                
                
                    // tolerance for testing output files
                #define TEST_TOL 1.e-6
                
                }}}}
                
                #endif
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="7134f640"/></a>7134f640</h3>

<pre>
commit 7134f6402621b16360a1d04a296ff19cc9613f41
Author: jarvis <jarvis@git.lsstcorp.org>
Date:   Thu Feb 17 05:04:29 2011 +0000

    Merged in latest version of the files in the shapelet subdirectories.
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="ed246562"/></a>ed246562</h3>

<pre>
commit ed2465629cb2a0b4fe5aedeb9f447da02cf38736
Author: Russell Owen <rowen@uw.edu>
Date:   Tue Jun 17 16:16:40 2014 -0700

    Renamed exceptions
</pre>
</div>


[Return to list](#homelist)
# <a name="include/lsst/meas/algorithms/DoubleGaussianPsf.h"/></a>include/lsst/meas/algorithms/DoubleGaussianPsf.h
### Diff:

<pre>
                // -*- lsst-c++ -*-
                /*
                 * LSST Data Management System
                 * Copyright 2008-2013 LSST Corporation.
                 *
                 * This product includes software developed by the
                 * LSST Project (http://www.lsst.org/).
                 *
                 * This program is free software: you can redistribute it and/or modify
                 * it under the terms of the GNU General Public License as published by
                 * the Free Software Foundation, either version 3 of the License, or
                 * (at your option) any later version.
                 *
                 * This program is distributed in the hope that it will be useful,
                 * but WITHOUT ANY WARRANTY; without even the implied warranty of
                 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                 * GNU General Public License for more details.
                 *
                 * You should have received a copy of the LSST License Statement and
                 * the GNU General Public License along with this program.  If not,
                 * see <http://www.lsstcorp.org/LegalNotices/>.
                 */
                
                #ifndef LSST_MEAS_ALGORITHMS_DoubleGaussianPsf_h_INCLUDED
                #define LSST_MEAS_ALGORITHMS_DoubleGaussianPsf_h_INCLUDED
                
                #include "lsst/meas/algorithms/KernelPsf.h"
                
                #include "boost/serialization/nvp.hpp"
                #include "boost/serialization/void_cast.hpp"
                
                namespace lsst { namespace meas { namespace algorithms {
                
                /// Represent a Psf as a circularly symmetrical double Gaussian
                class DoubleGaussianPsf : public afw::table::io::PersistableFacade<DoubleGaussianPsf>, public KernelPsf {
                public:
                
                    /**
                     *  Constructor for a DoubleGaussianPsf
                     *
                     *  @param[in] width    Number of columns in realisations of Psf
                     *  @param[in] height   Number of rows in realisations of Psf
                     *  @param[in] sigma1   Radius of inner Gaussian
                     *  @param[in] sigma2   Radius of outer Gaussian
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
45   <a href="#1c6e3903">1c6e3903</a> -      *  @param[in] b        Peak-amplitude</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
45   <a href="#e11ad0c8">e11ad0c8</a> +      *  @param[in] b        Ratio of Gaussian peak amplitudes: outer/inner</div>
                     */
                    DoubleGaussianPsf(int width, int height, double sigma1, double sigma2=0.0, double b=0.0);
                
                    /// Polymorphic deep copy.  Usually unnecessary, as Psfs are immutable.
                    virtual PTR(afw::detection::Psf) clone() const;
                
                    /// Return the radius of the inner Gaussian.
                    double getSigma1() const { return _sigma1; }
                
                    /// Return the radius of the outer Gaussian.
                    double getSigma2() const { return _sigma2; }
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
58   <a href="#1c6e3903">1c6e3903</a> -     /// Return the peak-amplitude ratio of the outer Gaussian to the inner Gaussian.</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
58   <a href="#e11ad0c8">e11ad0c8</a> +     /// Return the ratio of Gaussian peak amplitudes: outer/inner</div>
                    double getB() const { return _b; }
                
                    /// Whether this Psf is persistable (always true for DoubleGaussianPsf).
                    virtual bool isPersistable() const { return true; }
                
                protected:
                
                    virtual std::string getPersistenceName() const;
                
                    virtual void write(OutputArchiveHandle & handle) const;
                
                private:
                    double _sigma1;
                    double _sigma2;
                    double _b;
                
                    friend class boost::serialization::access;
                    template <class Archive>
                    void serialize(Archive&, unsigned int const) {
                        boost::serialization::void_cast_register<DoubleGaussianPsf, Psf>(
                            static_cast<DoubleGaussianPsf*>(0), static_cast<Psf*>(0)
                        );
                    }
                };
                
                }}} // namespace lsst::meas::algorithms
                
                namespace boost { namespace serialization {
                
                template <class Archive>
                inline void save_construct_data(
                    Archive& ar, lsst::meas::algorithms::DoubleGaussianPsf const* p,
                    unsigned int const
                ) {
                    int width = p->getKernel()->getWidth();
                    int height = p->getKernel()->getHeight();
                    double sigma1 = p->getSigma1();
                    double sigma2 = p->getSigma2();
                    double b = p->getB();
                    ar << make_nvp("width", width);
                    ar << make_nvp("height", height);
                    ar << make_nvp("sigma1", sigma1);
                    ar << make_nvp("sigma2", sigma2);
                    ar << make_nvp("b", b);
                }
                
                template <class Archive>
                inline void load_construct_data(
                        Archive& ar, lsst::meas::algorithms::DoubleGaussianPsf* p,
                        unsigned int const
                ) {
                    int width;
                    int height;
                    double sigma1;
                    double sigma2;
                    double b;
                    ar >> make_nvp("width", width);
                    ar >> make_nvp("height", height);
                    ar >> make_nvp("sigma1", sigma1);
                    ar >> make_nvp("sigma2", sigma2);
                    ar >> make_nvp("b", b);
                    ::new(p) lsst::meas::algorithms::DoubleGaussianPsf(width, height, sigma1, sigma2, b);
                }
                
                }} // namespace boost::serialization
                
                #endif // !LSST_MEAS_ALGORITHMS_DoubleGaussianPsf_h_INCLUDED
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="1c6e3903"/></a>1c6e3903</h3>

<pre>
commit 1c6e39036afef709181f63e04ea00908cf5175ca
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Wed Mar 20 15:34:15 2013 -0400

    Documentation and other minor cleanups for Psf classes.
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="e11ad0c8"/></a>e11ad0c8</h3>

<pre>
commit e11ad0c8d0d60b2e556483f24d9d14d4ee21c99c
Author: Russell Owen <rowen@uw.edu>
Date:   Thu Feb 20 17:20:43 2014 -0800

    Add a Gaussian PSF factory that can produce single or double Gaussians
    
    Try a PSF factory
    
    Updated __init__
    
    Updatd to use gaussianPsfFactory
    
    Get rid uf unused analytic PSF registry.
    For the Gaussian PSF factory change units of FWHM from arcsec to pixels.
    
    Add a unit test for GaussianPsfFactory and fix various bugs.
</pre>
</div>


[Return to list](#homelist)
# <a name="tests/testDoubleGaussianPsf.py"/></a>tests/testDoubleGaussianPsf.py
### Diff:

<pre>
                #!/usr/bin/env python
                """
                Tests for PSF code
                
                Run with:
                   python psf.py
                or
                   python
                   >>> import psf; psf.run()
                """
                
                import os, sys
                from math import *
                import unittest
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
15   <a href="#b2464af2">b2464af2</a> - import eups</div>
                import lsst.utils.tests as utilsTests
                import lsst.pex.exceptions as pexExceptions
                import lsst.pex.logging as logging
                import lsst.afw.geom as afwGeom
                import lsst.afw.image as afwImage
                import lsst.afw.detection as afwDetect
                import lsst.meas.algorithms as measAlg
                import lsst.afw.math as afwMath
                import lsst.afw.display.ds9 as ds9
                import lsst.afw.display.utils as displayUtils
                import numpy
                
                try:
                    type(verbose)
                except NameError:
                    verbose = 0
                    logging.Trace_setVerbosity("algorithms.Interp", verbose)
                
                try:
                    type(display)
                except NameError:
                    display = False
                
                class DoubleGaussianPsfTestCase(unittest.TestCase):
                
                    def setUp(self):
                        FWHM = 5
                        self.ksize = 25                      # size of desired kernel
                        self.psf = measAlg.DoubleGaussianPsf(self.ksize, self.ksize, FWHM/(2*sqrt(2*log(2))), 1, 0.1)
                
                    def tearDown(self):
                        del self.psf
                
                    def testComputeImage(self):
                        """Test the computation of the PSF's image at a point"""
                
                        ccdXY = afwGeom.Point2D(0, 0)
                        kIm = self.psf.computeImage(ccdXY)
                
                        if False:
                            ds9.mtv(kIm)        
                
                        self.assertTrue(kIm.getWidth() == self.ksize)
                        xcen, ycen = self.ksize/2, self.ksize/2
                        kIm = self.psf.computeImage(ccdXY)
                        self.assertAlmostEqual(afwMath.makeStatistics(kIm, afwMath.SUM).getValue(), 1.0)
                
                    def testComputeImage2(self):
                        """Test the computation of the PSF's image at a point"""
                
                        color = afwImage.Color(1.0)
                        ccdXY = afwGeom.Point2D(0, 0)
                        kIm = self.psf.computeImage(ccdXY)
                        self.assertTrue(kIm.getWidth() == self.ksize)
                        self.assertAlmostEqual(afwMath.makeStatistics(kIm, afwMath.SUM).getValue(), 1.0)
                
                    def testKernel(self):
                        """Test the creation of the dgPsf's kernel"""
                
                        kIm = afwImage.ImageD(self.psf.getKernel().getDimensions())
                        self.psf.getKernel().computeImage(kIm, False)
                
                        self.assertTrue(kIm.getWidth() == self.ksize)
                        self.assertAlmostEqual(afwMath.makeStatistics(kIm, afwMath.SUM).getValue(), 1.0)
                
                        if False:
                            ds9.mtv(kIm)
                
                    def testInvalidDgPsf(self):
                        """Test parameters of dgPsfs, both valid and not"""
                        sigma1, sigma2, b = 1, 0, 0                     # sigma2 may be 0 iff b == 0
                        measAlg.DoubleGaussianPsf(self.ksize, self.ksize, sigma1, sigma2, b)
                
                        def badSigma1():
                            sigma1 = 0
                            measAlg.DoubleGaussianPsf(self.ksize, self.ksize, sigma1, sigma2, b)
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
93   <a href="#b2464af2">b2464af2</a> -         utilsTests.assertRaisesLsstCpp(self, pexExceptions.DomainErrorException, badSigma1)</div>
              ?         ^^^ ^^^^^^             ------- ------                         ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
92   <a href="#8857e07a">8857e07a</a> +         self.assertRaises(pexExceptions.DomainError, badSigma1)</div>
              ?         ^^ ^
                
                        def badSigma2():
                            sigma2, b = 0, 1
                            measAlg.DoubleGaussianPsf(self.ksize, self.ksize, sigma1, sigma2, b)
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
99   <a href="#b2464af2">b2464af2</a> -         utilsTests.assertRaisesLsstCpp(self, pexExceptions.DomainErrorException, badSigma2)</div>
              ?         ^^^ ^^^^^^             ------- ------                         ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
98   <a href="#8857e07a">8857e07a</a> +         self.assertRaises(pexExceptions.DomainError, badSigma2)</div>
              ?         ^^ ^
                
                    def testGetImage(self):
                        """Test returning a realisation of the dgPsf"""
                
                        xcen = self.psf.getKernel().getWidth()//2
                        ycen = self.psf.getKernel().getHeight()//2
                
                        stamps = []
                        trueCenters = []
                        for x, y in ([10, 10], [9.4999, 10.4999], [10.5001, 10.5001]):
                            fx, fy = x - int(x), y - int(y)
                            if fx >= 0.5:
                                fx -= 1.0
                            if fy >= 0.5:
                                fy -= 1.0
                
                            im = self.psf.computeImage(afwGeom.Point2D(x, y)).convertF()
                
                            stamps.append(im.Factory(im, True))
                            trueCenters.append([xcen + fx, ycen + fy])
                
                        if display:
                            mos = displayUtils.Mosaic()     # control mosaics
                            ds9.mtv(mos.makeMosaic(stamps))
                
                            for i in range(len(trueCenters)):
                                bbox = mos.getBBox(i)
                
                                ds9.dot("+",
                                        bbox.getMinX() + xcen, bbox.getMinY() + ycen, ctype = ds9.RED, size = 1)
                                ds9.dot("+",
                                        bbox.getMinX() + trueCenters[i][0], bbox.getMinY() + trueCenters[i][1])
                
                                ds9.dot("%.2f, %.2f" % (trueCenters[i][0], trueCenters[i][1]),
                                        bbox.getMinX() + xcen, bbox.getMinY() + 2)
                
                    def testKernelPsf(self):
                        """Test creating a Psf from a Kernel"""
                
                        x,y = 10.4999, 10.4999
                        ksize = 15
                        sigma1 = 1
                        #
                        # Make a PSF from that kernel
                        #
                        kPsf = measAlg.KernelPsf(afwMath.AnalyticKernel(ksize, ksize,
                                                                        afwMath.GaussianFunction2D(sigma1, sigma1)))
                
                        kIm = kPsf.computeImage(afwGeom.Point2D(x, y))
                        #
                        # And now via the dgPsf model
                        #
                        dgPsf = measAlg.DoubleGaussianPsf(ksize, ksize, sigma1)
                        dgIm = dgPsf.computeImage(afwGeom.Point2D(x, y))
                        #
                        # Check that they're the same
                        #
                        diff = type(kIm)(kIm, True); diff -= dgIm
                        stats = afwMath.makeStatistics(diff, afwMath.MAX | afwMath.MIN)
                        self.assertAlmostEqual(stats.getValue(afwMath.MAX), 0.0, places=16)
                        self.assertAlmostEqual(stats.getValue(afwMath.MIN), 0.0, places=16)
                
                        if display:
                            mos = displayUtils.Mosaic()
                            mos.setBackground(-0.1)
                            ds9.mtv(mos.makeMosaic([kIm, dgIm, diff], mode="x"), frame=1)
                
                    def testCast(self):
                        base1 = self.psf.clone()
                        self.assertEqual(type(base1), afwDetect.Psf)
                        base2 = measAlg.ImagePsf.cast(base1)
                        self.assertEqual(type(base2), measAlg.ImagePsf)
                        base3 = measAlg.KernelPsf.cast(base2)
                        self.assertEqual(type(base3), measAlg.KernelPsf)
                        derived = measAlg.DoubleGaussianPsf.cast(base3)
                        self.assertEqual(type(derived), measAlg.DoubleGaussianPsf)
                
                #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                
                def suite():
                    """Returns a suite containing all the test cases in this module."""
                    utilsTests.init()
                
                    suites = []
                    suites += unittest.makeSuite(DoubleGaussianPsfTestCase)
                    suites += unittest.makeSuite(utilsTests.MemoryTestCase)
                    return unittest.TestSuite(suites)
                
                def run(exit = False):
                    """Run the utilsTests"""
                    utilsTests.run(suite(), exit)
                
                if __name__ == "__main__":
                    run(True)
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="b2464af2"/></a>b2464af2</h3>

<pre>
commit b2464af205082256fc5636574304ac6473d18c2c
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Tue Mar 19 14:15:41 2013 -0400

    Move KernelPsf, DoubleGaussianPsf, WarpedPsf, and associated tests to meas_algorithms.
    
    Moving Psf classes to meas_algorithms will let us implement shape and aperture
    flux measurements on Psf models using code in meas_algorithms.
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="8857e07a"/></a>8857e07a</h3>

<pre>
commit 8857e07a6268e5af38162e6186e9338018b07be8
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Thu Jul 17 16:53:01 2014 -0400

    Adapt to changes in exception Python wrappers (DM-827)
</pre>
</div>


[Return to list](#homelist)
# <a name="tests/testImagePsf.cc"/></a>tests/testImagePsf.cc
### Diff:

<pre>
                // -*- LSST-C++ -*-
                /* 
                 * LSST Data Management System
                 * Copyright 2008-2011 LSST Corporation.
                 * 
                 * This product includes software developed by the
                 * LSST Project (http://www.lsst.org/).
                 *
                 * This program is free software: you can redistribute it and/or modify
                 * it under the terms of the GNU General Public License as published by
                 * the Free Software Foundation, either version 3 of the License, or
                 * (at your option) any later version.
                 * 
                 * This program is distributed in the hope that it will be useful,
                 * but WITHOUT ANY WARRANTY; without even the implied warranty of
                 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                 * GNU General Public License for more details.
                 * 
                 * You should have received a copy of the LSST License Statement and 
                 * the GNU General Public License along with this program.  If not, 
                 * see <http://www.lsstcorp.org/LegalNotices/>.
                 */
                 
                #include <iostream>
                #include <cmath>
                
                #include "lsst/meas/algorithms/ImagePsf.h"
                #include "lsst/afw/geom/Angle.h"
                
                #define BOOST_TEST_DYN_LINK
                #define BOOST_TEST_MODULE ImagePsf
                
                #pragma clang diagnostic push
                #pragma clang diagnostic ignored "-Wunused-variable"
                #include "boost/test/unit_test.hpp"
                #pragma clang diagnostic pop
                #include "boost/test/floating_point_comparison.hpp"
                
                using namespace lsst::meas::algorithms;
                using namespace lsst::afw::detection;
                using namespace lsst::afw::image;
                using namespace lsst::afw::geom;
                using namespace lsst::afw::geom::ellipses;
                
                class TestGaussianPsf : public lsst::meas::algorithms::ImagePsf {
                public:
                
                    TestGaussianPsf(int size, Quadrupole const & ellipse) :
                        ImagePsf(true), _size(size), _ellipse(ellipse)
                    {
                        assert(size % 2);
                    }
                
                    TestGaussianPsf(int size, double radius) :
                        ImagePsf(true), _size(size), _ellipse(1.0, 1.0, 0.0)
                    {
                        assert(size % 2);
                        _ellipse.scale(radius);
                    }
                
                    PTR(Psf) clone() const {
                        return boost::make_shared<TestGaussianPsf>(*this);
                    }
                
                private:
                    virtual PTR(Image) doComputeKernelImage(
                        Point2D const & position, Color const & color
                    ) const {
                        PTR(Image) result(new Image(_size, _size));
                        result->setXY0(-_size / 2, -_size / 2);
                        Eigen::Matrix2d cInv = _ellipse.getMatrix().inverse();
                        double norm = std::sqrt(cInv.determinant()) / (2.0 * M_PI);
                        for (int row = 0; row < _size; ++row) {
                            for (int col = 0; col < _size; ++col) {
                                Eigen::Vector2d xy(col + result->getX0(), row + result->getY0());
                                double z = norm * std::exp(-0.5 * xy.dot(cInv * xy));
                                (*result)(col, row) = z;
                            }
                        }
                        return result;
                    }
                
                    int _size;
                    Quadrupole _ellipse;
                };
                
                void checkShape(int size, Quadrupole const & ellipse, double tol) {
                    TestGaussianPsf psf(size, ellipse);
                    Quadrupole shape = psf.computeShape();
                    BOOST_CHECK_CLOSE(ellipse.getIxx(), shape.getIxx(), tol);
                    BOOST_CHECK_CLOSE(ellipse.getIyy(), shape.getIyy(), tol);
                    BOOST_CHECK_CLOSE(ellipse.getIxy(), shape.getIxy(), tol);
                }
                
                void checkApertureFlux(int size, double sigma, double radius, double tol) {
                    TestGaussianPsf psf(size, sigma);
                    double flux = psf.computeApertureFlux(radius);
                    double check = 1.0 - std::exp(-0.5*(radius*radius)/(sigma*sigma));
                    BOOST_CHECK_CLOSE(flux, check, tol);
                }
                
                // n.b. tolerance is in %, so values are closer than they appear
                
                BOOST_AUTO_TEST_CASE(PsfShape) {
                    checkShape(25, Quadrupole(7.0, 7.0, 0.0), 1E-2);
                    checkShape(25, Quadrupole(7.0, 5.0, 1.0), 1E-2);
                    checkShape(25, Quadrupole(5.0, 7.0, -1.0), 1E-2);
                }
                
                BOOST_AUTO_TEST_CASE(PsfApertureFlux) {
                    checkApertureFlux(25, 5.0, 3.0, 1E-2);
                    checkApertureFlux(25, 5.0, 5.0, 1E-2);
                    checkApertureFlux(25, 5.0, 10.0, 1E-2);
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
114  <a href="#e961b43c">e961b43c</a> -     checkApertureFlux(25, 5.0, 20.0, 3.0); // radius is larger than image, so 3% isn't that bad</div>
                }
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="e961b43c"/></a>e961b43c</h3>

<pre>
commit e961b43c518e366be3fcd13e2b44eb09b9737bb9
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Tue Mar 19 17:49:10 2013 -0400

    Add ImagePsf as intermediate base class for all Psfs.
    
    ImagePsf implements aperture and shape calculation for its derived
    classes, using Sinc photometry and SdssShape.
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
</div>


[Return to list](#homelist)
# <a name="python/lsst/meas/algorithms/pcaPsfDeterminer.py"/></a>python/lsst/meas/algorithms/pcaPsfDeterminer.py
### Diff:

<pre>
                # 
                # LSST Data Management System
                # Copyright 2008, 2009, 2010 LSST Corporation.
                # 
                # This product includes software developed by the
                # LSST Project (http://www.lsst.org/).
                #
                # This program is free software: you can redistribute it and/or modify
                # it under the terms of the GNU General Public License as published by
                # the Free Software Foundation, either version 3 of the License, or
                # (at your option) any later version.
                # 
                # This program is distributed in the hope that it will be useful,
                # but WITHOUT ANY WARRANTY; without even the implied warranty of
                # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                # GNU General Public License for more details.
                # 
                # You should have received a copy of the LSST License Statement and 
                # the GNU General Public License along with this program.  If not, 
                # see <http://www.lsstcorp.org/LegalNotices/>.
                #
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
22   <a href="#40f7793b">40f7793b</a> + import math</div>
                import sys
                
                import numpy
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
26   <a href="#845de94d">845de94d</a> - import lsst.daf.base as dafBase</div>
                import lsst.pex.config as pexConfig
                import lsst.pex.exceptions as pexExceptions
                import lsst.pex.logging as pexLog
                import lsst.afw.geom as afwGeom
                import lsst.afw.geom.ellipses as afwEll
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
32   <a href="#845de94d">845de94d</a> - import lsst.afw.detection as afwDetection</div>
                import lsst.afw.display.ds9 as ds9
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
34   <a href="#845de94d">845de94d</a> - import lsst.afw.image as afwImage</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
35   <a href="#b0d8591f">b0d8591f</a> - import lsst.afw.table as afwTable</div>
                import lsst.afw.math as afwMath
                from . import algorithmsLib
                from . import utils as maUtils
                
                class PcaPsfDeterminerConfig(pexConfig.Config):
                    nonLinearSpatialFit = pexConfig.Field(
                        doc = "Use non-linear fitter for spatial variation of Kernel",
                        dtype = bool,
                        default = False,
                    )
                    nEigenComponents = pexConfig.Field(
                        doc = "number of eigen components for PSF kernel creation",
                        dtype = int,
                        default = 4,
                    )
                    spatialOrder = pexConfig.Field(
                        doc = "specify spatial order for PSF kernel creation",
                        dtype = int,
                        default = 2,
                    )
                    sizeCellX = pexConfig.Field(
                        doc = "size of cell used to determine PSF (pixels, column direction)",
                        dtype = int,
                        default = 256,
                #        minValue = 10,
                        check = lambda x: x >= 10,
                    )
                    sizeCellY = pexConfig.Field(
                        doc = "size of cell used to determine PSF (pixels, row direction)",
                        dtype = int,
                        default = sizeCellX.default,
                #        minValue = 10,
                        check = lambda x: x >= 10,
                    )
                    nStarPerCell = pexConfig.Field(
                        doc = "number of stars per psf cell for PSF kernel creation",
                        dtype = int,
                        default = 3,
                    )
                    kernelSize = pexConfig.Field(
                        doc = "radius of the kernel to create, relative to the square root of the stellar quadrupole moments",
                        dtype = float,
                        default = 10.0,
                    )
                    kernelSizeMin = pexConfig.Field(
                        doc = "Minimum radius of the kernel",
                        dtype = int,
                        default = 25,
                    )
                    kernelSizeMax = pexConfig.Field(
                        doc = "Maximum radius of the kernel",
                        dtype = int,
                        default = 45,
                    )
                    borderWidth = pexConfig.Field(
                        doc = "Number of pixels to ignore around the edge of PSF candidate postage stamps",
                        dtype = int,
                        default = 0,
                    )
                    nStarPerCellSpatialFit = pexConfig.Field(
                        doc = "number of stars per psf Cell for spatial fitting",
                        dtype = int,
                        default = 5,
                    )
                    constantWeight = pexConfig.Field(
                        doc = "Should each PSF candidate be given the same weight, independent of magnitude?",
                        dtype = bool,
                        default = True,
                    )
                    nIterForPsf = pexConfig.Field(
                        doc = "number of iterations of PSF candidate star list",
                        dtype = int,
                        default = 3,
                    )
                    tolerance = pexConfig.Field(
                        doc = "tolerance of spatial fitting",
                        dtype = float,
                        default = 1e-2,
                    )
                    lam = pexConfig.Field(
                        doc = "floor for variance is lam*data",
                        dtype = float,
                        default = 0.05,
                    )
                    reducedChi2ForPsfCandidates = pexConfig.Field(
                        doc = "for psf candidate evaluation",
                        dtype = float,
                        default = 2.0,
                    )
                    spatialReject = pexConfig.Field(
                        doc = "Rejection threshold (stdev) for candidates based on spatial fit",
                        dtype = float,
                        default = 3.0,
                    )
                    pixelThreshold = pexConfig.Field(
                        doc = "Threshold (stdev) for rejecting extraneous pixels around candidate; applied if positive",
                        dtype = float,
                        default = 0.0,
                    )
                    doRejectBlends = pexConfig.Field(
                        doc = "Reject candidates that are blended?",
                        dtype = bool,
                        default = False,
                    )
                    doMaskBlends = pexConfig.Field(
                        doc = "Mask blends in image?",
                        dtype = bool,
                        default = True,
                    )
                
                class PcaPsfDeterminer(object):
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
144  <a href="#bc4b5c7c">bc4b5c7c</a> +     """!</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
145  <a href="#bc4b5c7c">bc4b5c7c</a> +     A measurePsfTask psf estimator</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
146  <a href="#bc4b5c7c">bc4b5c7c</a> +     """</div>
                    ConfigClass = PcaPsfDeterminerConfig
                
                    def __init__(self, config):
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
150  <a href="#845de94d">845de94d</a> -         """Construct a PCA PSF Fitter</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
150  <a href="#bc4b5c7c">bc4b5c7c</a> +         """!Construct a PCA PSF Fitter</div>
              ?            +
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
152  <a href="#99952c0f">99952c0f</a> -         @param[in] config: instance of PcaPsfDeterminerConfig</div>
              ?         ^                -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
152  <a href="#bc4b5c7c">bc4b5c7c</a> +         \param[in] config instance of PcaPsfDeterminerConfig</div>
              ?         ^
                        """
                        self.config = config
                        # N.b. name of component is meas.algorithms.psfDeterminer so you can turn on psf debugging
                        # independent of which determiner is active
                        self.debugLog = pexLog.Debug("meas.algorithms.psfDeterminer")
                        self.warnLog = pexLog.Log(pexLog.getDefaultLog(), "meas.algorithms.psfDeterminer")
                
                    def _fitPsf(self, exposure, psfCellSet, kernelSize, nEigenComponents):
                        algorithmsLib.PsfCandidateF.setPixelThreshold(self.config.pixelThreshold)
                        algorithmsLib.PsfCandidateF.setMaskBlends(self.config.doMaskBlends)
                        #
                        # Loop trying to use nEigenComponents, but allowing smaller numbers if necessary
                        #
                        for nEigen in range(nEigenComponents, 0, -1):
                            # Determine KL components
                            try:
                                kernel, eigenValues = algorithmsLib.createKernelFromPsfCandidates(
                                    psfCellSet, exposure.getDimensions(), exposure.getXY0(), nEigen,
                                    self.config.spatialOrder, kernelSize, self.config.nStarPerCell,
                                    bool(self.config.constantWeight))
                
                                break                   # OK, we can get nEigen components
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
175  <a href="#f1a570aa">f1a570aa</a> -             except pexExceptions.LsstCppException, e:</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
176  <a href="#f1a570aa">f1a570aa</a> -                 if not isinstance(e.message, pexExceptions.LengthErrorException):</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
175  <a href="#8857e07a">8857e07a</a> +             except pexExceptions.LengthError as e:</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
176  <a href="#f1a570aa">f1a570aa</a> +                 if nEigen == 1:         # can't go any lower</div>
                                    raise
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
179  <a href="#f1a570aa">f1a570aa</a> -                 if nEigen == 1:         # can't go any lower</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
180  <a href="#69f5db0e">69f5db0e</a> -                     raise IndexError("No viable PSF candidates survive")</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
181  <a href="#f1a570aa">f1a570aa</a> -                     </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
182  <a href="#f1a570aa">f1a570aa</a> -                 msg = e.message.what().strip().split("\n")[-1] # message from exception</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
183  <a href="#f1a570aa">f1a570aa</a> -                 msg = msg.split(":")[-1].strip()               # remove "0: Message: " prefix</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
184  <a href="#f1a570aa">f1a570aa</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
185  <a href="#f1a570aa">f1a570aa</a> -                 self.warnLog.log(pexLog.Log.WARN, "%s: reducing number of eigen components" % msg)</div>
              ?                                                                                               ^^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
179  <a href="#8857e07a">8857e07a</a> +                 self.warnLog.log(pexLog.Log.WARN, "%s: reducing number of eigen components" % e.what())</div>
              ?                                                                                               ^^^^^^^^
                        #
                        # We got our eigen decomposition so let's use it
                        #
                        # Express eigenValues in units of reduced chi^2 per star
                        size = kernelSize + 2*self.config.borderWidth
                        nu = size*size - 1                  # number of degrees of freedom/star for chi^2    
                        eigenValues = [l/float(algorithmsLib.countPsfCandidates(psfCellSet, self.config.nStarPerCell)*nu)
                                       for l in eigenValues]
                
                        # Fit spatial model
                        status, chi2 = algorithmsLib.fitSpatialKernelFromPsfCandidates(
                            kernel, psfCellSet, bool(self.config.nonLinearSpatialFit),
                            self.config.nStarPerCellSpatialFit, self.config.tolerance, self.config.lam)
                
                        psf = algorithmsLib.PcaPsf(kernel)
                
                        return psf, eigenValues, nEigen, chi2
                
                
                    def determinePsf(self, exposure, psfCandidateList, metadata=None, flagKey=None):
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
206  <a href="#845de94d">845de94d</a> -         """Determine a PCA PSF model for an exposure given a list of PSF candidates</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
200  <a href="#bc4b5c7c">bc4b5c7c</a> +         """!Determine a PCA PSF model for an exposure given a list of PSF candidates</div>
              ?            +
                        
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
208  <a href="#845de94d">845de94d</a> -         @param[in] exposure: exposure containing the psf candidates (lsst.afw.image.Exposure)</div>
              ?         ^                  -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
202  <a href="#bc4b5c7c">bc4b5c7c</a> +         \param[in] exposure exposure containing the psf candidates (lsst.afw.image.Exposure)</div>
              ?         ^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
209  <a href="#845de94d">845de94d</a> -         @param[in] psfCandidateList: a sequence of PSF candidates (each an lsst.meas.algorithms.PsfCandidate);</div>
              ?         ^                          -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
203  <a href="#bc4b5c7c">bc4b5c7c</a> +         \param[in] psfCandidateList a sequence of PSF candidates (each an lsst.meas.algorithms.PsfCandidate);</div>
              ?         ^
                            typically obtained by detecting sources and then running them through a star selector
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
211  <a href="#37c820c3">37c820c3</a> -         @param[in,out] metadata  a home for interesting tidbits of information</div>
              ?         ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
205  <a href="#bc4b5c7c">bc4b5c7c</a> +         \param[in,out] metadata  a home for interesting tidbits of information</div>
              ?         ^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
212  <a href="#09ac2b9a">09ac2b9a</a> -         @param[in] flagKey: schema key used to mark sources actually used in PSF determination</div>
              ?         ^                 -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
206  <a href="#bc4b5c7c">bc4b5c7c</a> +         \param[in] flagKey schema key used to mark sources actually used in PSF determination</div>
              ?         ^
                    
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
208  <a href="#bc4b5c7c">bc4b5c7c</a> +         \return a list of</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
214  <a href="#845de94d">845de94d</a> -         @return psf: an lsst.meas.algorithms.PcaPsf</div>
              ?         ^^^^^^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
209  <a href="#bc4b5c7c">bc4b5c7c</a> +          - psf: the measured PSF, an lsst.meas.algorithms.PcaPsf</div>
              ?         ^^      ++++++++++++++++++
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
210  <a href="#bc4b5c7c">bc4b5c7c</a> +          - cellSet: an lsst.afw.math.SpatialCellSet containing the PSF candidates</div>
                        """
                        import lsstDebug
                        display = lsstDebug.Info(__name__).display 
                        displayExposure = lsstDebug.Info(__name__).displayExposure     # display the Exposure + spatialCells 
                        displayPsfCandidates = lsstDebug.Info(__name__).displayPsfCandidates # show the viable candidates 
                        displayIterations = lsstDebug.Info(__name__).displayIterations # display on each PSF iteration 
                        displayPsfComponents = lsstDebug.Info(__name__).displayPsfComponents # show the PCA components
                        displayResiduals = lsstDebug.Info(__name__).displayResiduals         # show residuals
                        displayPsfMosaic = lsstDebug.Info(__name__).displayPsfMosaic   # show mosaic of reconstructed PSF(x,y)
                        matchKernelAmplitudes = lsstDebug.Info(__name__).matchKernelAmplitudes # match Kernel amplitudes for spatial plots
                        keepMatplotlibPlots = lsstDebug.Info(__name__).keepMatplotlibPlots # Keep matplotlib alive post mortem
                        displayPsfSpatialModel = lsstDebug.Info(__name__).displayPsfSpatialModel # Plot spatial model?
                        showBadCandidates = lsstDebug.Info(__name__).showBadCandidates # Include bad candidates 
                        normalizeResiduals = lsstDebug.Info(__name__).normalizeResiduals # Normalise residuals by object amplitude 
                        pause = lsstDebug.Info(__name__).pause                         # Prompt user after each iteration?
                         
                        if display > 1:
                            pause = True
                
                        mi = exposure.getMaskedImage()
                        
                        if len(psfCandidateList) == 0:
                            raise RuntimeError("No PSF candidates supplied.")
                
                        # construct and populate a spatial cell set
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
240  <a href="#cb64b3f6">cb64b3f6</a> -         bbox = mi.getBBox(afwImage.PARENT)</div>
              ?                           ---------------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
236  <a href="#2d3a5fcc">2d3a5fcc</a> +         bbox = mi.getBBox()</div>
                        psfCellSet = afwMath.SpatialCellSet(bbox, self.config.sizeCellX, self.config.sizeCellY)
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
242  <a href="#04202ab0">04202ab0</a> -         sizes = numpy.ndarray(len(psfCandidateList))</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
238  <a href="#00686ff6">00686ff6</a> +         sizes = []</div>
                        for i, psfCandidate in enumerate(psfCandidateList):
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
244  <a href="#4a0d59e1">4a0d59e1</a> -             if psfCandidate.getSource().getPsfFluxFlag(): # bad measurement</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
245  <a href="#4a0d59e1">4a0d59e1</a> -                 continue</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
246  <a href="#4a0d59e1">4a0d59e1</a> - </div>
                            try:
                                psfCellSet.insertCandidate(psfCandidate)
                            except Exception, e:
                                self.debugLog.debug(2, "Skipping PSF candidate %d of %d: %s" % (i, len(psfCandidateList), e))
                                continue
                            source = psfCandidate.getSource()
                
                            quad = afwEll.Quadrupole(source.getIxx(), source.getIyy(), source.getIxy())
                            axes = afwEll.Axes(quad)
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
256  <a href="#04202ab0">04202ab0</a> -             sizes[i] = axes.getA()</div>
              ?                  ^^^^^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
249  <a href="#00686ff6">00686ff6</a> +             sizes.append(axes.getA())</div>
              ?                  ^^^^^^^^           +
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
257  <a href="#98d4d20d">98d4d20d</a> -             </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
250  <a href="#00686ff6">00686ff6</a> +         if len(sizes) == 0:</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
251  <a href="#00686ff6">00686ff6</a> +             raise RuntimeError("No usable PSF candidates supplied")</div>
                        nEigenComponents = self.config.nEigenComponents # initial version
                
                        if self.config.kernelSize >= 15:
                            self.debugLog.debug(1, \
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
262  <a href="#98d4d20d">98d4d20d</a> -                 "WARNING: NOT scaling kernelSize by stellar quadrupole moment, but using absolute value")</div>
              ?                                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
256  <a href="#40f7793b">40f7793b</a> +                 "WARNING: NOT scaling kernelSize by stellar quadrupole moment " +</div>
              ?                                                                              ^ ^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
257  <a href="#40f7793b">40f7793b</a> +                 "because config.kernelSize=%s >= 15; using config.kernelSize as as the width, instead" \</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
258  <a href="#40f7793b">40f7793b</a> +                 % (self.config.kernelSize,)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
259  <a href="#40f7793b">40f7793b</a> +             )</div>
                            actualKernelSize = int(self.config.kernelSize)
                        else:
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
262  <a href="#40f7793b">40f7793b</a> +             medSize = numpy.median(sizes)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
265  <a href="#98d4d20d">98d4d20d</a> -             actualKernelSize = 2 * int(self.config.kernelSize * numpy.sqrt(numpy.median(sizes)) + 0.5) + 1</div>
              ?                                                                 -- ^^      ------   ^^^^^   - -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
263  <a href="#00686ff6">00686ff6</a> +             actualKernelSize = 2 * int(self.config.kernelSize * math.sqrt(medSize) + 0.5) + 1</div>
              ?                                                                  ^^^         ^
                            if actualKernelSize < self.config.kernelSizeMin:
                                actualKernelSize = self.config.kernelSizeMin
                            if actualKernelSize > self.config.kernelSizeMax:
                                actualKernelSize = self.config.kernelSizeMax
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
268  <a href="#40f7793b">40f7793b</a> + </div>
                            if display:
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
271  <a href="#98d4d20d">98d4d20d</a> -                 print "Median size=%s" % (numpy.median(sizes),)</div>
              ?                                           ------   ^^^^^   --
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
270  <a href="#40f7793b">40f7793b</a> +                 print "Median size=%s" % (medSize,)</div>
              ?                                              ^
                        self.debugLog.debug(3, "Kernel size=%s" % (actualKernelSize,))
                
                        # Set size of image returned around candidate
                        psfCandidateList[0].setHeight(actualKernelSize)
                        psfCandidateList[0].setWidth(actualKernelSize)
                
                        if self.config.doRejectBlends:
                            # Remove blended candidates completely
                            blendedCandidates = [] # Candidates to remove; can't do it while iterating
                            for cell, cand in candidatesIter(psfCellSet, False):
                                if len(cand.getSource().getFootprint().getPeaks()) > 1:
                                    blendedCandidates.append((cell, cand))
                                    continue
                            if display:
                                print "Removing %d blended Psf candidates" % len(blendedCandidates)
                            for cell, cand in blendedCandidates:
                                cell.removeCandidate(cand)
                            if sum(1 for cand in candidatesIter(psfCellSet, False)) == 0:
                                raise RuntimeError("All PSF candidates removed as blends")
                
                        if display:
                            frame = 0
                            if displayExposure:
                                ds9.mtv(exposure, frame=frame, title="psf determination")
                                maUtils.showPsfSpatialCells(exposure, psfCellSet, self.config.nStarPerCell,
                                                            symb="o", ctype=ds9.CYAN, ctypeUnused=ds9.YELLOW,
                                                            size=4, frame=frame)
                            
                        #
                        # Do a PCA decomposition of those PSF candidates
                        #
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
303  <a href="#98d4d20d">98d4d20d</a> -         size = actualKernelSize + 2*self.config.borderWidth</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
304  <a href="#845de94d">845de94d</a> -         nu = size*size - 1                  # number of degrees of freedom/star for chi^2    </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
305  <a href="#845de94d">845de94d</a> -     </div>
                        reply = "y"                         # used in interactive mode
                        for iter in range(self.config.nIterForPsf):
                            if display and displayPsfCandidates: # Show a mosaic of usable PSF candidates
                                #
                                import lsst.afw.display.utils as displayUtils
                
                                stamps = []
                                for cell in psfCellSet.getCellList():
                                    for cand in cell.begin(not showBadCandidates): # maybe include bad candidates
                                        cand = algorithmsLib.cast_PsfCandidateF(cand)
                
                                        try:
                                            im = cand.getMaskedImage()
                
                                            chi2 = cand.getChi2()
                                            if chi2 > 1e100:
                                                chi2 = numpy.nan
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
324  <a href="#ee6048a3">ee6048a3</a> -                             stamps.append((im, "%d,%.1e" %</div>
              ?                                                   - ^^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
320  <a href="#eae489bf">eae489bf</a> +                             stamps.append((im, "%d%s" %</div>
              ?                                                    ^
                                                           (maUtils.splitId(cand.getSource().getId(), True)["objId"], chi2),
                                                           cand.getStatus()))
                                        except Exception, e:
                                            continue
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
330  <a href="#a54b1ac5">a54b1ac5</a> -                 if len(stamps) == 0:</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
331  <a href="#a54b1ac5">a54b1ac5</a> -                     print "WARNING: No PSF candidates to show; try setting showBadCandidates=True"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
332  <a href="#a54b1ac5">a54b1ac5</a> -                 else:</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
333  <a href="#a54b1ac5">a54b1ac5</a> -                     mos = displayUtils.Mosaic()</div>
              ? ----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
326  <a href="#99bfdfcb">99bfdfcb</a> +                 mos = displayUtils.Mosaic()</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
334  <a href="#a54b1ac5">a54b1ac5</a> -                     for im, label, status in stamps:</div>
              ? ----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
327  <a href="#99bfdfcb">99bfdfcb</a> +                 for im, label, status in stamps:</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
335  <a href="#a54b1ac5">a54b1ac5</a> -                         im = type(im)(im, True)</div>
              ? ----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
328  <a href="#845de94d">845de94d</a> +                     im = type(im)(im, True)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
336  <a href="#a54b1ac5">a54b1ac5</a> -                         try:</div>
              ? ----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
329  <a href="#845de94d">845de94d</a> +                     try:</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
337  <a href="#a54b1ac5">a54b1ac5</a> -                             im /= afwMath.makeStatistics(im, afwMath.MAX).getValue()</div>
              ? ----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
330  <a href="#845de94d">845de94d</a> +                         im /= afwMath.makeStatistics(im, afwMath.MAX).getValue()</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
338  <a href="#a54b1ac5">a54b1ac5</a> -                         except NotImplementedError:</div>
              ? ----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
331  <a href="#845de94d">845de94d</a> +                     except NotImplementedError:</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
339  <a href="#a54b1ac5">a54b1ac5</a> -                             pass</div>
              ? ----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
332  <a href="#845de94d">845de94d</a> +                         pass</div>
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
341  <a href="#a54b1ac5">a54b1ac5</a> -                         mos.append(im, label,</div>
              ? ----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
334  <a href="#99bfdfcb">99bfdfcb</a> +                     mos.append(im, label,</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
342  <a href="#a54b1ac5">a54b1ac5</a> -                                    ds9.GREEN if status == afwMath.SpatialCellCandidate.GOOD else</div>
              ? ----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
335  <a href="#99bfdfcb">99bfdfcb</a> +                                ds9.GREEN if status == afwMath.SpatialCellCandidate.GOOD else</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
343  <a href="#a54b1ac5">a54b1ac5</a> -                                    ds9.YELLOW if status == afwMath.SpatialCellCandidate.UNKNOWN else ds9.RED)</div>
              ? ----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
336  <a href="#99bfdfcb">99bfdfcb</a> +                                ds9.YELLOW if status == afwMath.SpatialCellCandidate.UNKNOWN else ds9.RED)</div>
                
                
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
339  <a href="#a9de71ed">a9de71ed</a> +                 if mos.images:</div>
                                    mos.makeMosaic(frame=8, title="Psf Candidates")
                
                            # Re-fit until we don't have any candidates with naughty chi^2 values influencing the fit
                            cleanChi2 = False # Any naughty (negative/NAN) chi^2 values?
                            while not cleanChi2:
                                cleanChi2 = True
                                #
                                # First, estimate the PSF
                                #
                                psf, eigenValues, nEigenComponents, fitChi2 = \
                                    self._fitPsf(exposure, psfCellSet, actualKernelSize, nEigenComponents)
                                #
                                # In clipping, allow all candidates to be innocent until proven guilty on this iteration.
                                # Throw out any prima facie guilty candidates (naughty chi^2 values)
                                # 
                                for cell in psfCellSet.getCellList():
                                    awfulCandidates = []
                                    for cand in cell.begin(False): # include bad candidates
                                        cand = algorithmsLib.cast_PsfCandidateF(cand)
                                        cand.setStatus(afwMath.SpatialCellCandidate.UNKNOWN) # until proven guilty
                                        rchi2 = cand.getChi2()
                                        if not numpy.isfinite(rchi2) or rchi2 <= 0:
                                            # Guilty prima facie
                                            awfulCandidates.append(cand)
                                            cleanChi2 = False
                                            self.debugLog.debug(2, "chi^2=%s; id=%s" %
                                                                (cand.getChi2(), cand.getSource().getId()))
                                    for cand in awfulCandidates:
                                        if display:
                                            print "Removing bad candidate: id=%d, chi^2=%f" % \
                                                  (cand.getSource().getId(), cand.getChi2())
                                        cell.removeCandidate(cand)
                
                            #
                            # Clip out bad fits based on reduced chi^2
                            #
                            badCandidates = list()
                            for cell in psfCellSet.getCellList():
                                for cand in cell.begin(False): # include bad candidates
                                    cand = algorithmsLib.cast_PsfCandidateF(cand)
                                    rchi2 = cand.getChi2()  # reduced chi^2 when fitting PSF to candidate
                                    assert rchi2 > 0
                                    if rchi2 > self.config.reducedChi2ForPsfCandidates:
                                        badCandidates.append(cand)
                
                            badCandidates.sort(key=lambda x: x.getChi2(), reverse=True)
                            numBad = int(len(badCandidates) * (iter + 1) / self.config.nIterForPsf + 0.5)
                            for i, c in zip(range(numBad), badCandidates):
                                if display:
                                    chi2 = c.getChi2()
                                    if chi2 > 1e100:
                                        chi2 = numpy.nan
                                    
                                    print "Chi^2 clipping %-4d  %.2g" % (c.getSource().getId(), chi2)
                                c.setStatus(afwMath.SpatialCellCandidate.BAD)
                
                            #
                            # Clip out bad fits based on spatial fitting.
                            #
                            # This appears to be better at getting rid of sources that have a single dominant kernel component
                            # (other than the zeroth; e.g., a nearby contaminant) because the surrounding sources (which help
                            # set the spatial model) don't contain that kernel component, and so the spatial modeling
                            # downweights the component.
                            #
                
                            residuals = list()
                            candidates = list()
                            kernel = psf.getKernel()
                            noSpatialKernel = afwMath.cast_LinearCombinationKernel(psf.getKernel())
                            for cell in psfCellSet.getCellList():
                                for cand in cell.begin(False):
                                    cand = algorithmsLib.cast_PsfCandidateF(cand)
                                    candCenter = afwGeom.PointD(cand.getXCenter(), cand.getYCenter())
                                    try:
                                        im = cand.getMaskedImage(kernel.getWidth(), kernel.getHeight())
                                    except Exception, e:
                                        continue
                
                                    fit = algorithmsLib.fitKernelParamsToImage(noSpatialKernel, im, candCenter)
                                    params = fit[0]
                                    kernels = fit[1]
                                    amp = 0.0
                                    for p, k in zip(params, kernels):
                                        amp += p * afwMath.cast_FixedKernel(k).getSum()
                
                                    predict = [kernel.getSpatialFunction(k)(candCenter.getX(), candCenter.getY()) for
                                               k in range(kernel.getNKernelParameters())]
                
                                    #print cand.getSource().getId(), [a / amp for a in params], predict
                
                                    residuals.append([a / amp - p for a, p in zip(params, predict)])
                                    candidates.append(cand)
                
                            residuals = numpy.array(residuals)
                
                            for k in range(kernel.getNKernelParameters()):
                                if False:
                                    # Straight standard deviation
                                    mean = residuals[:,k].mean()
                                    rms = residuals[:,k].std()
                                elif False:
                                    # Using interquartile range
                                    sr = numpy.sort(residuals[:,k])
                                    mean = sr[int(0.5*len(sr))] if len(sr) % 2 else \
                                           0.5 * (sr[int(0.5*len(sr))] + sr[int(0.5*len(sr))+1])
                                    rms = 0.74 * (sr[int(0.75*len(sr))] - sr[int(0.25*len(sr))])
                                else:
                                    stats = afwMath.makeStatistics(residuals[:,k], afwMath.MEANCLIP | afwMath.STDEVCLIP)
                                    mean = stats.getValue(afwMath.MEANCLIP)
                                    rms = stats.getValue(afwMath.STDEVCLIP)
                
                                rms = max(1.0e-4, rms)  # Don't trust RMS below this due to numerical issues
                
                                if display:
                                    print "Mean for component %d is %f" % (k, mean)
                                    print "RMS for component %d is %f" % (k, rms)
                                badCandidates = list()
                                for i, cand in enumerate(candidates):
                                    if numpy.fabs(residuals[i,k] - mean) > self.config.spatialReject * rms:
                                        badCandidates.append(i)
                
                                badCandidates.sort(key=lambda x: numpy.fabs(residuals[x,k] - mean), reverse=True)
                
                                numBad = int(len(badCandidates) * (iter + 1) / self.config.nIterForPsf + 0.5)
                
                                for i, c in zip(range(min(len(badCandidates), numBad)), badCandidates):
                                    cand = candidates[c]
                                    if display:
                                        print "Spatial clipping %d (%f,%f) based on %d: %f vs %f" % \
                                              (cand.getSource().getId(), cand.getXCenter(), cand.getYCenter(), k,
                                               residuals[badCandidates[i],k], self.config.spatialReject * rms)
                                    cand.setStatus(afwMath.SpatialCellCandidate.BAD)
                
                            #
                            # Display results
                            #
                            if display and displayIterations:
                                if displayExposure:
                                    if iter > 0:
                                        ds9.erase(frame=frame)
                                    maUtils.showPsfSpatialCells(exposure, psfCellSet, self.config.nStarPerCell, showChi2=True,
                                                                symb="o", size=8, frame=frame,
                                                                ctype=ds9.YELLOW, ctypeBad=ds9.RED, ctypeUnused=ds9.MAGENTA)
                                    if self.config.nStarPerCellSpatialFit != self.config.nStarPerCell:
                                        maUtils.showPsfSpatialCells(exposure, psfCellSet, self.config.nStarPerCellSpatialFit,
                                                                    symb="o", size=10, frame=frame,
                                                                    ctype=ds9.YELLOW, ctypeBad=ds9.RED)
                                if displayResiduals:
                                    while True:
                                        try:
                                            maUtils.showPsfCandidates(exposure, psfCellSet, psf=psf, frame=4,
                                                                      normalize=normalizeResiduals,
                                                                      showBadCandidates=showBadCandidates)
                                            maUtils.showPsfCandidates(exposure, psfCellSet, psf=psf, frame=5,
                                                                      normalize=normalizeResiduals,
                                                                      showBadCandidates=showBadCandidates,
                                                                      variance=True)
                                        except:
                                            if not showBadCandidates:
                                                showBadCandidates = True
                                                continue
                                        break
                
                                if displayPsfComponents:
                                    maUtils.showPsf(psf, eigenValues, frame=6)
                                if displayPsfMosaic:
                                    maUtils.showPsfMosaic(exposure, psf, frame=7, showFwhm=True)
                                    ds9.ds9Cmd(ds9.selectFrame(frame=7) + " ;scale limits 0 1")
                                if displayPsfSpatialModel:
                                    maUtils.plotPsfSpatialModel(exposure, psf, psfCellSet, showBadCandidates=True,
                                                                matchKernelAmplitudes=matchKernelAmplitudes,
                                                                keepPlots=keepMatplotlibPlots)
                
                                if pause:
                                    while True:
                                        try:
                                            reply = raw_input("Next iteration? [ynchpqQs] ").strip()
                                        except EOFError:
                                            reply = "n"
                
                                        reply = reply.split()
                                        if reply:
                                            reply, args = reply[0], reply[1:]
                                        else:
                                            reply = ""
                
                                        if reply in ("", "c", "h", "n", "p", "q", "Q", "s", "y"):
                                            if reply == "c":
                                                pause = False
                                            elif reply == "h":
                                                print "c[ontinue without prompting] h[elp] n[o] p[db] q[uit displaying] s[ave fileName] y[es]"
                                                continue
                                            elif reply == "p":
                                                import pdb; pdb.set_trace() 
                                            elif reply == "q":
                                                display = False
                                            elif reply == "Q":
                                                sys.exit(1)
                                            elif reply == "s":
                                                fileName = args.pop(0)
                                                if not fileName:
                                                    print "Please provide a filename"
                                                    continue
                
                                                print "Saving to %s" % fileName
                                                maUtils.saveSpatialCellSet(psfCellSet, fileName=fileName)
                                                continue
                                            break
                                        else:
                                            print >> sys.stderr, "Unrecognised response: %s" % reply
                
                                    if reply == "n":
                                        break
                
                        # One last time, to take advantage of the last iteration
                        psf, eigenValues, nEigenComponents, fitChi2 = \
                            self._fitPsf(exposure, psfCellSet, actualKernelSize, nEigenComponents)
                
                        #
                        # Display code for debugging
                        #
                        if display and reply != "n":
                            if displayExposure:
                                maUtils.showPsfSpatialCells(exposure, psfCellSet, self.config.nStarPerCell, showChi2=True,
                                                            symb="o", ctype=ds9.YELLOW, ctypeBad=ds9.RED, size=8, frame=frame)
                                if self.config.nStarPerCellSpatialFit != self.config.nStarPerCell:
                                    maUtils.showPsfSpatialCells(exposure, psfCellSet, self.config.nStarPerCellSpatialFit,
                                                                symb="o", ctype=ds9.YELLOW, ctypeBad=ds9.RED,
                                                                size=10, frame=frame)
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
575  <a href="#c4fcab32">c4fcab32</a> -             if displayResiduals:</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
569  <a href="#6b9da010">6b9da010</a> +                 if displayResiduals:</div>
              ? ++++
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
576  <a href="#c4fcab32">c4fcab32</a> -                 maUtils.showPsfCandidates(exposure, psfCellSet, psf=psf, frame=4,</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
570  <a href="#6b9da010">6b9da010</a> +                     maUtils.showPsfCandidates(exposure, psfCellSet, psf=psf, frame=4,</div>
              ? ++++
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
577  <a href="#c4fcab32">c4fcab32</a> -                                           normalize=normalizeResiduals,</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
571  <a href="#6b9da010">6b9da010</a> +                                               normalize=normalizeResiduals,</div>
              ? ++++
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
578  <a href="#c4fcab32">c4fcab32</a> -                                           showBadCandidates=showBadCandidates)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
572  <a href="#6b9da010">6b9da010</a> +                                               showBadCandidates=showBadCandidates)</div>
              ? ++++
                
                            if displayPsfComponents:
                                maUtils.showPsf(psf, eigenValues, frame=6)
                
                            if displayPsfMosaic:
                                maUtils.showPsfMosaic(exposure, psf, frame=7, showFwhm=True)
                                ds9.ds9Cmd(ds9.selectFrame(frame=7) + " ;scale limits 0 1")
                            if displayPsfSpatialModel:
                                maUtils.plotPsfSpatialModel(exposure, psf, psfCellSet, showBadCandidates=True,
                                                            matchKernelAmplitudes=matchKernelAmplitudes,
                                                            keepPlots=keepMatplotlibPlots)
                        #
                        # Generate some QA information
                        #
                        # Count PSF stars
                        #
                        numGoodStars = 0
                        numAvailStars = 0
                
                        avgX = 0.0
                        avgY = 0.0
                
                        for cell in psfCellSet.getCellList():
                            for cand in cell.begin(False):  # don't ignore BAD stars
                                numAvailStars += 1
                
                            for cand in cell.begin(True):  # do ignore BAD stars
                                cand = algorithmsLib.cast_PsfCandidateF(cand)
                                src = cand.getSource()
                                if flagKey is not None:
                                    src.set(flagKey, True)
                                avgX += src.getX()
                                avgY += src.getY()
                                numGoodStars += 1
                
                        avgX /= numGoodStars
                        avgY /= numGoodStars
                
                        if metadata != None:
                            metadata.set("spatialFitChi2", fitChi2)
                            metadata.set("numGoodStars", numGoodStars)
                            metadata.set("numAvailStars", numAvailStars)
                            metadata.set("avgX", avgX)
                            metadata.set("avgY", avgY)
                
                        psf = algorithmsLib.PcaPsf(psf.getKernel(), afwGeom.Point2D(avgX, avgY))
                
                        return psf, psfCellSet
                
                
                def candidatesIter(psfCellSet, ignoreBad=True):
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
630  <a href="#53cc415e">53cc415e</a> -     """Generator for Psf candidates</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
624  <a href="#bc4b5c7c">bc4b5c7c</a> +     """!Generator for Psf candidates</div>
              ?        +
                
                    This allows two 'for' loops to be reduced to one.
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
634  <a href="#53cc415e">53cc415e</a> -     @param psfCellSet: SpatialCellSet of PSF candidates</div>
              ?     ^                -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
628  <a href="#bc4b5c7c">bc4b5c7c</a> +     \param psfCellSet SpatialCellSet of PSF candidates</div>
              ?     ^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
635  <a href="#53cc415e">53cc415e</a> -     @param ignoreBad: Ignore candidates flagged as BAD?</div>
              ?     ^               -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
629  <a href="#bc4b5c7c">bc4b5c7c</a> +     \param ignoreBad Ignore candidates flagged as BAD?</div>
              ?     ^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
636  <a href="#53cc415e">53cc415e</a> -     @return SpatialCell, PsfCandidate</div>
              ?     ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
630  <a href="#bc4b5c7c">bc4b5c7c</a> +     \return SpatialCell, PsfCandidate</div>
              ?     ^
                    """
                    for cell in psfCellSet.getCellList():
                        for cand in cell.begin(ignoreBad):
                            yield (cell, algorithmsLib.cast_PsfCandidateF(cand))
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="845de94d"/></a>845de94d</h3>

<pre>
commit 845de94d153ac790e5e7499785393ea407f4b45a
Author: rowen <rowen@git.lsstcorp.org>
Date:   Mon Feb 14 23:55:49 2011 +0000

    First cut at implementing ticket #1567.
    Includes Python registry for star selectors and another for PSF determiners.
    All existing unit tests pass.
    I also flattened the Python namespace to simplify use.
</pre>
<h3><a name="a54b1ac5"/></a>a54b1ac5</h3>

<pre>
commit a54b1ac52678025d3317e8a379c2849d3eb567ba
Author: Paul Price <price@astro.princeton.edu>
Date:   Thu May 30 12:37:15 2013 -0400

    pcaPsfDeterminer: catch case of no good PSF candidates in debugging
    
    There may be no good PSF candidates if showBadCandidates=False
    (or for other reasons).  This prevents an exception from makeMosaic:
    "You must provide at least one image".
</pre>
<h3><a name="09ac2b9a"/></a>09ac2b9a</h3>

<pre>
commit 09ac2b9a28f9fb835f9148ba70d6691bac08d25b
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Fri Sep 7 16:01:04 2012 -0400

    Change how flags for PSF stars are handled; mostly done at the task level now to lessen burden on selector/determiner implementations.
</pre>
<h3><a name="ee6048a3"/></a>ee6048a3</h3>

<pre>
commit ee6048a3bb622cbfab2398302ad1f87968311755
Author: Paul Price <price@astro.princeton.edu>
Date:   Thu May 30 13:26:11 2013 -0400

    fix bitrot in PSF determination debugging
</pre>
<h3><a name="b0d8591f"/></a>b0d8591f</h3>

<pre>
commit b0d8591f0e28fd34c95f1548ebda5695e46d2a22
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Mon Feb 20 18:14:44 2012 -0500

    merge from tickets/1843; tests/psf.py is failing, but it appears to be failing on master too
</pre>
<h3><a name="98d4d20d"/></a>98d4d20d</h3>

<pre>
commit 98d4d20d3df83ed18f4126f84de658b805e0821f
Author: Russell Owen <rowen@uw.edu>
Date:   Wed Apr 4 16:31:07 2012 -0500

    Modify pcaPsfDeterminer to not alter its config.
    Also modified it to use logging for most messages
    (though not those triggered by the display flag).
</pre>
<h3><a name="53cc415e"/></a>53cc415e</h3>

<pre>
commit 53cc415e8b7481023225b6935d5f3eb170561e6f
Author: Paul Price <price@astro.princeton.edu>
Date:   Thu Jun 13 10:12:20 2013 -0400

    pcaPsfDeterminer: add Psf candidates generator
    
    This generator combines two nested 'for' loops into one, and
    if we choose to apply it through the code, should make things easier
    to follow.  It's also handy for debugging on the command-line, e.g.:
    myCand = [cand for cell,cand in candidatesIter(psfCellSet) if
              (cand.getSource().getId()&0xFFFF)-1 == 12345][0]
</pre>
<h3><a name="f1a570aa"/></a>f1a570aa</h3>

<pre>
commit f1a570aa93b7127d965c5c542e99e6af40d2e067
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Thu Jun 7 14:01:16 2012 -0400

    Backoff requested number of eigen-components (with a warning) rather than throwing an exception
</pre>
<h3><a name="99952c0f"/></a>99952c0f</h3>

<pre>
commit 99952c0f0001552bb2e59ae95e0bcc74fb1fcf8b
Author: Russell Owen <rowen@uw.edu>
Date:   Wed Jan 18 14:13:27 2012 -0600

    Modified PSF determiner and star selector registries to use pex_config's makeConfigRegistry.
    Modified the associated configs to implement makeAlgorithm.
</pre>
<h3><a name="cb64b3f6"/></a>cb64b3f6</h3>

<pre>
commit cb64b3f6cdba20367d333ba95852b15521150611
Author: dubcovsky <dubcovsky@git.lsstcorp.org>
Date:   Tue Apr 12 00:17:02 2011 +0000

    #1556 updates to meas_algorithms to match changes in afw. This revision fails tests
</pre>
<h3><a name="69f5db0e"/></a>69f5db0e</h3>

<pre>
commit 69f5db0eba69225cff917fa4c96a94dc8b765aa0
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Fri Mar 6 14:02:58 2015 -0500

    Check for bad PSF measurements (HSC-1153)
</pre>
<h3><a name="4a0d59e1"/></a>4a0d59e1</h3>

<pre>
commit 4a0d59e191fc40d3091b56b20cf27ede4e0c23ab
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Fri Mar 6 14:02:58 2015 -0500

    Check for bad PSF measurements (HSC-1153)
</pre>
<h3><a name="c4fcab32"/></a>c4fcab32</h3>

<pre>
commit c4fcab3251e6f41da2248d63fdf28c0bf80e30f8
Author: Naoki Yasuda <yasudank@gmail.com>
Date:   Fri Jul 18 12:12:52 2014 +0900

    Indent seems to be wrong for debug display.
</pre>
<h3><a name="37c820c3"/></a>37c820c3</h3>

<pre>
commit 37c820c326624bf0937fb1f43b783b406835bbc5
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Wed Nov 16 20:18:11 2011 -0500

    Replaced SDQA with lsst.daf.base.PropertyList()
</pre>
<h3><a name="04202ab0"/></a>04202ab0</h3>

<pre>
commit 04202ab0adc69ae8e20d921f5342108200edb80d
Author: price <price@git.lsstcorp.org>
Date:   Sat Jul 16 02:00:33 2011 +0000

    Scale kernelSize according to the mean stellar quadrupole moment.  This allows us to use large PSF when it's warranted and small when we can get away with it, reducing the noise and contaminants.
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="845de94d"/></a>845de94d</h3>

<pre>
commit 845de94d153ac790e5e7499785393ea407f4b45a
Author: rowen <rowen@git.lsstcorp.org>
Date:   Mon Feb 14 23:55:49 2011 +0000

    First cut at implementing ticket #1567.
    Includes Python registry for star selectors and another for PSF determiners.
    All existing unit tests pass.
    I also flattened the Python namespace to simplify use.
</pre>
<h3><a name="eae489bf"/></a>eae489bf</h3>

<pre>
commit eae489bf55c54c893f814c57c677fcbe416903ff
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Wed Apr 10 11:10:42 2013 -0400

    Don't use the full 32-bit objectIds for debugging output
    
    (and don't use size=9 when plotting strings on ds9!)
    
    Conflicts:
    	python/lsst/meas/algorithms/pcaPsfDeterminer.py
</pre>
<h3><a name="f1a570aa"/></a>f1a570aa</h3>

<pre>
commit f1a570aa93b7127d965c5c542e99e6af40d2e067
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Thu Jun 7 14:01:16 2012 -0400

    Backoff requested number of eigen-components (with a warning) rather than throwing an exception
</pre>
<h3><a name="99bfdfcb"/></a>99bfdfcb</h3>

<pre>
commit 99bfdfcbb5f206c48da5e23fbad079d9c2f33429
Merge: 01b031e 6f95bb4
Author: rowen <rowen@git.lsstcorp.org>
Date:   Wed Mar 30 22:03:48 2011 +0000

    Merged HSC changes from trunk.
    One issue remains: examples/centroid.cc does not build. I've commented it out in the SConscript for now.
</pre>
<h3><a name="bc4b5c7c"/></a>bc4b5c7c</h3>

<pre>
commit bc4b5c7ccf9fdfa5ccd485cc28e3a5cdd7533276
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Tue Jul 8 10:34:51 2014 -0500

    Updated task docs
</pre>
<h3><a name="40f7793b"/></a>40f7793b</h3>

<pre>
commit 40f7793bf04ffe43017082e2f3dee0db5b9bcb70
Author: Russell Owen <rowen@uw.edu>
Date:   Wed Mar 12 11:23:24 2014 -0700

    Tweak pcaPsfDeterminer to handle non-positive values of median(sizes) more gracefully.
</pre>
<h3><a name="a9de71ed"/></a>a9de71ed</h3>

<pre>
commit a9de71ede698a2e33e95fe3eeb5cef75b6fdee72
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Tue Jul 1 16:41:26 2014 -0400

    Fix some psf debugging code
</pre>
<h3><a name="00686ff6"/></a>00686ff6</h3>

<pre>
commit 00686ff6089c56dc82ef3002b21919416cf8c36d
Author: Russell Owen <rowen@uw.edu>
Date:   Wed Mar 12 13:31:59 2014 -0700

    Fixed a bug in pcaPsfDeterminer: invalid psf candidates results in an "sizes" array
    containing garbage values.
</pre>
<h3><a name="6b9da010"/></a>6b9da010</h3>

<pre>
commit 6b9da010118f7f8501c55ed377c507c93aa02c1b
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Wed May 23 20:16:54 2012 -0400

    Made debug display code more controllable
</pre>
<h3><a name="2d3a5fcc"/></a>2d3a5fcc</h3>

<pre>
commit 2d3a5fccae9908251c54deaba743fc34137a65f5
Author: Russell Owen <rowen@uw.edu>
Date:   Thu Sep 11 17:45:03 2014 -0700

    Remove explicit use of image origin = PARENT; use default
</pre>
<h3><a name="8857e07a"/></a>8857e07a</h3>

<pre>
commit 8857e07a6268e5af38162e6186e9338018b07be8
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Thu Jul 17 16:53:01 2014 -0400

    Adapt to changes in exception Python wrappers (DM-827)
</pre>
</div>


[Return to list](#homelist)
# <a name="python/lsst/meas/algorithms/utils.py"/></a>python/lsst/meas/algorithms/utils.py
### Diff:

<pre>
                # 
                # LSST Data Management System
                # Copyright 2008, 2009, 2010 LSST Corporation.
                # 
                # This product includes software developed by the
                # LSST Project (http://www.lsst.org/).
                #
                # This program is free software: you can redistribute it and/or modify
                # it under the terms of the GNU General Public License as published by
                # the Free Software Foundation, either version 3 of the License, or
                # (at your option) any later version.
                # 
                # This program is distributed in the hope that it will be useful,
                # but WITHOUT ANY WARRANTY; without even the implied warranty of
                # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                # GNU General Public License for more details.
                # 
                # You should have received a copy of the LSST License Statement and 
                # the GNU General Public License along with this program.  If not, 
                # see <http://www.lsstcorp.org/LegalNotices/>.
                #
                
                """Support utilities for Measuring sources"""
                
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
25   <a href="#845de94d">845de94d</a> + import sys</div>
                import math
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
26   <a href="#845de94d">845de94d</a> - import re</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
27   <a href="#845de94d">845de94d</a> - import sys</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
28   <a href="#845de94d">845de94d</a> - </div>
                import numpy
                
                import lsst.pex.exceptions as pexExcept
                import lsst.daf.base as dafBase
                import lsst.afw.detection as afwDet
                import lsst.afw.geom as afwGeom
                import lsst.afw.image as afwImage
                import lsst.afw.math as afwMath
                import lsst.afw.table as afwTable
                import lsst.afw.display.ds9 as ds9
                import lsst.afw.display.utils as displayUtils
                import algorithmsLib
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
41   <a href="#b1bc91ed">b1bc91ed</a> - import measurement as measAlg</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
42   <a href="#ee6048a3">ee6048a3</a> - from lsst.afw.image.utils import CalibNoThrow</div>
                
                keptPlots = False                       # Have we arranged to keep spatial plots open?
                
                #
                # This should be provided by the mapper.  The details are camera-specific and
                #
                def splitId(oid, asDict=True):
                    
                    objId = int((oid & 0xffff) - 1)      # Should be the value set by apps code
                
                    if asDict:
                        return dict(objId=objId)
                    else:
                        return [objId]
                 
                def showSourceSet(sSet, xy0=(0, 0), frame=0, ctype=ds9.GREEN, symb="+", size=2):
                    """Draw the (XAstrom, YAstrom) positions of a set of Sources.  Image has the given XY0"""
                
                    with ds9.Buffering():
                        for s in sSet:
                            xc, yc = s.getXAstrom() - xy0[0], s.getYAstrom() - xy0[1]
                
                            if symb == "id":
                                ds9.dot(str(splitId(s.getId(), True)["objId"]), xc, yc, frame=frame, ctype=ctype, size=size)
                            else:
                                ds9.dot(symb, xc, yc, frame=frame, ctype=ctype, size=size)
                
                #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                #
                # PSF display utilities
                #
                def showPsfSpatialCells(exposure, psfCellSet, nMaxPerCell=-1, showChi2=False, showMoments=False,
                                        symb=None, ctype=None, ctypeUnused=None, ctypeBad=None, size=2, frame=None):
                    """Show the SpatialCells.  If symb is something that ds9.dot understands (e.g. "o"), the top nMaxPerCell candidates will be indicated with that symbol, using ctype and size"""
                
                    with ds9.Buffering():
                        origin = [-exposure.getMaskedImage().getX0(), -exposure.getMaskedImage().getY0()]
                        for cell in psfCellSet.getCellList():
                            displayUtils.drawBBox(cell.getBBox(), origin=origin, frame=frame)
                
                            if nMaxPerCell < 0:
                                nMaxPerCell = 0
                
                            i = 0
                            goodies = ctypeBad is None
                            for cand in cell.begin(goodies):
                                if nMaxPerCell > 0:
                                    i += 1
                
                                cand = algorithmsLib.cast_PsfCandidateF(cand)
                
                                xc, yc = cand.getXCenter() + origin[0], cand.getYCenter() + origin[1]
                
                                if i > nMaxPerCell:
                                    if not ctypeUnused:
                                        continue
                
                                color = ctypeBad if cand.isBad() else ctype
                
                                if symb:
                                    if i > nMaxPerCell:
                                        ct = ctypeUnused
                                    else:
                                        ct = ctype
                
                                    ds9.dot(symb, xc, yc, frame=frame, ctype=ct, size=size)
                
                                source = cand.getSource()
                
                                if showChi2:
                                    rchi2 = cand.getChi2()
                                    if rchi2 > 1e100:
                                        rchi2 = numpy.nan
                                    ds9.dot("%d %.1f" % (splitId(source.getId(), True)["objId"], rchi2),
                                            xc - size, yc - size - 4, frame=frame, ctype=color, size=2)
                
                                if showMoments:
                                    ds9.dot("%.2f %.2f %.2f" % (source.getIxx(), source.getIxy(), source.getIyy()),
                                            xc-size, yc + size + 4, frame=frame, ctype=color, size=size)
                
                def showPsfCandidates(exposure, psfCellSet, psf=None, frame=None, normalize=True, showBadCandidates=True,
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
124  <a href="#b1bc91ed">b1bc91ed</a> -                       fitBasisComponents=False, variance=None, chi=None):</div>
              ?                      --------------------------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
120  <a href="#8cca8626">8cca8626</a> +                       variance=None, chi=None):</div>
                    """Display the PSF candidates.
                If psf is provided include PSF model and residuals;  if normalize is true normalize the PSFs (and residuals)
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
127  <a href="#b1bc91ed">b1bc91ed</a> - </div>
                If chi is True, generate a plot of residuals/sqrt(variance), i.e. chi
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
129  <a href="#b1bc91ed">b1bc91ed</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
130  <a href="#b1bc91ed">b1bc91ed</a> - If fitBasisComponents is true, also find the best linear combination of the PSF's components (if they exist)</div>
                """
                    if chi is None:
                        if variance is not None:        # old name for chi
                            chi = variance
                    #
                    # Show us the ccandidates
                    #
                    mos = displayUtils.Mosaic()
                    #
                    candidateCenters = []
                    candidateCentersBad = []
                    candidateIndex = 0
                
                    for cell in psfCellSet.getCellList():
                        for cand in cell.begin(False): # include bad candidates
                            cand = algorithmsLib.cast_PsfCandidateF(cand)
                
                            rchi2 = cand.getChi2()
                            if rchi2 > 1e100:
                                rchi2 = numpy.nan
                
                            if not showBadCandidates and cand.isBad():
                                continue
                
                            if psf:
                                im_resid = displayUtils.Mosaic(gutter=0, background=-5, mode="x")
                
                                try:
                                    im = cand.getMaskedImage() # copy of this object's image
                                    xc, yc = cand.getXCenter(), cand.getYCenter()
                
                                    margin = 0 if True else 5
                                    w, h = im.getDimensions()
                                    bbox = afwGeom.BoxI(afwGeom.PointI(margin, margin), im.getDimensions())
                
                                    if margin > 0:
                                        bim = im.Factory(w + 2*margin, h + 2*margin)
                
                                        stdev = numpy.sqrt(afwMath.makeStatistics(im.getVariance(), afwMath.MEAN).getValue())
                                        afwMath.randomGaussianImage(bim.getImage(), afwMath.Random())
                                        bim *= stdev
                                        var = bim.getVariance(); var.set(stdev**2); del var
                
                                        sbim = im.Factory(bim, bbox)
                                        sbim <<= im
                                        del sbim
                                        im = bim
                                        xc += margin; yc += margin
                
                                    im = im.Factory(im, True)
                                    im.setXY0(cand.getMaskedImage().getXY0())
                                except:
                                    continue
                
                                if not variance:
                                    im_resid.append(im.Factory(im, True))
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
188  <a href="#b1bc91ed">b1bc91ed</a> -                 if True:                # tweak up centroids</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
189  <a href="#b1bc91ed">b1bc91ed</a> -                     mi = im</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
190  <a href="#b1bc91ed">b1bc91ed</a> -                     psfIm = mi.getImage()</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
191  <a href="#b1bc91ed">b1bc91ed</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
192  <a href="#b1bc91ed">b1bc91ed</a> -                     config = measAlg.SourceMeasurementConfig()</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
193  <a href="#b1bc91ed">b1bc91ed</a> -                     config.centroider.name = "centroid.sdss"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
194  <a href="#b1bc91ed">b1bc91ed</a> -                     config.slots.centroid = config.centroider.name</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
195  <a href="#b1bc91ed">b1bc91ed</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
196  <a href="#b1bc91ed">b1bc91ed</a> -                     schema = afwTable.SourceTable.makeMinimalSchema()</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
197  <a href="#b1bc91ed">b1bc91ed</a> -                     measureSources = config.makeMeasureSources(schema)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
198  <a href="#b1bc91ed">b1bc91ed</a> -                     catalog = afwTable.SourceCatalog(schema)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
199  <a href="#b1bc91ed">b1bc91ed</a> -                     config.slots.setupTable(catalog.table)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
200  <a href="#b1bc91ed">b1bc91ed</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
201  <a href="#b1bc91ed">b1bc91ed</a> -                     extra = 10          # enough margin to run the sdss centroider</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
202  <a href="#b1bc91ed">b1bc91ed</a> -                     miBig = mi.Factory(im.getWidth() + 2*extra, im.getHeight() + 2*extra)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
203  <a href="#b1bc91ed">b1bc91ed</a> -                     miBig[extra:-extra, extra:-extra] = mi</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
204  <a href="#b1bc91ed">b1bc91ed</a> -                     miBig.setXY0(mi.getX0() - extra, mi.getY0() - extra)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
205  <a href="#b1bc91ed">b1bc91ed</a> -                     mi = miBig; del miBig</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
206  <a href="#b1bc91ed">b1bc91ed</a> -                     </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
207  <a href="#b1bc91ed">b1bc91ed</a> -                     exp = afwImage.makeExposure(mi)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
208  <a href="#b1bc91ed">b1bc91ed</a> -                     exp.setPsf(psf)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
209  <a href="#b1bc91ed">b1bc91ed</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
210  <a href="#b1bc91ed">b1bc91ed</a> -                     footprintSet = afwDet.FootprintSet(mi,</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
211  <a href="#b1bc91ed">b1bc91ed</a> -                                                        afwDet.Threshold(0.5*numpy.max(psfIm.getArray())),</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
212  <a href="#b1bc91ed">b1bc91ed</a> -                                                        "DETECTED")</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
213  <a href="#b1bc91ed">b1bc91ed</a> -                     footprintSet.makeSources(catalog)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
214  <a href="#b1bc91ed">b1bc91ed</a> -                     if len(catalog) == 0:</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
215  <a href="#b1bc91ed">b1bc91ed</a> -                         raise RuntimeError("Failed to detect any objects")</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
216  <a href="#b1bc91ed">b1bc91ed</a> -                     elif len(catalog) == 1:</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
217  <a href="#b1bc91ed">b1bc91ed</a> -                         source = catalog[0]</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
218  <a href="#b1bc91ed">b1bc91ed</a> -                     else:               # more than one source; find the once closest to (xc, yc)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
219  <a href="#b1bc91ed">b1bc91ed</a> -                         for i, s in enumerate(catalog):</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
220  <a href="#b1bc91ed">b1bc91ed</a> -                             d = numpy.hypot(xc - s.getX(), yc - s.getY())</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
221  <a href="#b1bc91ed">b1bc91ed</a> -                             if i == 0 or d < dmin:</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
222  <a href="#b1bc91ed">b1bc91ed</a> -                                 source, dmin = s, d</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
223  <a href="#b1bc91ed">b1bc91ed</a> -                                                     </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
224  <a href="#b1bc91ed">b1bc91ed</a> -                     measureSources.applyWithPeak(source, exp)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
225  <a href="#b1bc91ed">b1bc91ed</a> -                     xc, yc = source.getCentroid()</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
226  <a href="#b1bc91ed">b1bc91ed</a> - </div>
                                # residuals using spatial model
                                try:
                                    chi2 = algorithmsLib.subtractPsf(psf, im, xc, yc)
                                except:
                                    chi2 = numpy.nan
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
232  <a href="#b1bc91ed">b1bc91ed</a> -                     continue</div>
                                
                                resid = im
                                if variance:
                                    resid = resid.getImage()
                                    var = im.getVariance()
                                    var = var.Factory(var, True)
                                    numpy.sqrt(var.getArray(), var.getArray()) # inplace sqrt
                                    resid /= var
                                    
                                im_resid.append(resid)
                
                                # Fit the PSF components directly to the data (i.e. ignoring the spatial model)
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
245  <a href="#b1bc91ed">b1bc91ed</a> -                 if fitBasisComponents:</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
246  <a href="#b1bc91ed">b1bc91ed</a> -                     im = cand.getMaskedImage()</div>
              ? ----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
198  <a href="#b5d87ffe">b5d87ffe</a> +                 im = cand.getMaskedImage()</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
199  <a href="#0f78cb59">0f78cb59</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
200  <a href="#c4a094b1">c4a094b1</a> +                 im = im.Factory(im, True)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
201  <a href="#b5d87ffe">b5d87ffe</a> +                 im.setXY0(cand.getMaskedImage().getXY0())</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
202  <a href="#0f78cb59">0f78cb59</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
203  <a href="#bc4b5c7c">bc4b5c7c</a> +                 try:</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
204  <a href="#bc4b5c7c">bc4b5c7c</a> +                     noSpatialKernel = afwMath.cast_LinearCombinationKernel(psf.getKernel())</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
205  <a href="#bc4b5c7c">bc4b5c7c</a> +                 except:</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
206  <a href="#bc4b5c7c">bc4b5c7c</a> +                     noSpatialKernel = None</div>
                                    
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
208  <a href="#bc4b5c7c">bc4b5c7c</a> +                 if noSpatialKernel:</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
248  <a href="#b1bc91ed">b1bc91ed</a> -                     im = im.Factory(im, True)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
249  <a href="#b1bc91ed">b1bc91ed</a> -                     im.setXY0(cand.getMaskedImage().getXY0())</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
250  <a href="#0f78cb59">0f78cb59</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
251  <a href="#b1bc91ed">b1bc91ed</a> -                     noSpatialKernel = afwMath.cast_LinearCombinationKernel(psf.getKernel())</div>
                                    candCenter = afwGeom.PointD(cand.getXCenter(), cand.getYCenter())
                                    fit = algorithmsLib.fitKernelParamsToImage(noSpatialKernel, im, candCenter)
                                    params = fit[0]
                                    kernels = afwMath.KernelList(fit[1])
                                    outputKernel = afwMath.LinearCombinationKernel(kernels, params)
                
                                    outImage = afwImage.ImageD(outputKernel.getDimensions())
                                    outputKernel.computeImage(outImage, False)
                
                                    im -= outImage.convertF()
                                    resid = im
                
                                    if margin > 0:
                                        bim = im.Factory(w + 2*margin, h + 2*margin)
                                        afwMath.randomGaussianImage(bim.getImage(), afwMath.Random())
                                        bim *= stdev
                
                                        sbim = im.Factory(bim, bbox)
                                        sbim <<= resid
                                        del sbim
                                        resid = bim
                
                                    if variance:
                                        resid = resid.getImage()
                                        resid /= var
                
                                    im_resid.append(resid)
                
                                im = im_resid.makeMosaic()
                            else:
                                im = cand.getMaskedImage()
                
                            if normalize:
                                im /= afwMath.makeStatistics(im, afwMath.MAX).getValue()
                
                            objId = splitId(cand.getSource().getId(), True)["objId"]
                            if psf:
                                lab = "%d chi^2 %.1f" % (objId, rchi2)
                                ctype = ds9.RED if cand.isBad() else ds9.GREEN
                            else:
                                lab = "%d flux %8.3g" % (objId, cand.getSource().getPsfFlux())
                                ctype = ds9.GREEN
                
                            mos.append(im, lab, ctype)
                
                            if False and numpy.isnan(rchi2):
                                ds9.mtv(cand.getMaskedImage().getImage(), title="candidate", frame=1)
                                print "amp",  cand.getAmplitude()
                
                            im = cand.getMaskedImage()
                            center = (candidateIndex, xc - im.getX0(), yc - im.getY0())
                            candidateIndex += 1
                            if cand.isBad():
                                candidateCentersBad.append(center)
                            else:
                                candidateCenters.append(center)
                
                    if variance:
                        title = "chi(Psf fit)"
                    else:
                        title = "Stars & residuals"
                    mosaicImage = mos.makeMosaic(frame=frame, title=title)
                
                    with ds9.Buffering():
                        for centers, color in ((candidateCenters, ds9.GREEN), (candidateCentersBad, ds9.RED)):
                            for cen in centers:
                                bbox = mos.getBBox(cen[0])
                                ds9.dot("+", cen[1] + bbox.getMinX(), cen[2] + bbox.getMinY(), frame=frame, ctype=color)
                
                    return mosaicImage
                
                try:
                    import matplotlib.pyplot as plt
                    import matplotlib.colors
                except ImportError:
                    plt = None
                
                def makeSubplots(fig, nx=2, ny=2, Nx=1, Ny=1, plottingArea=(0.1, 0.1, 0.85, 0.80),
                                 pxgutter=0.05, pygutter=0.05, xgutter=0.04, ygutter=0.04,
                                 headroom=0.0, panelBorderWeight=0, panelColor='black'):
                    """Return a generator of a set of subplots, a set of Nx*Ny panels of nx*ny plots.  Each panel is fully
                    filled by row (starting in the bottom left) before the next panel is started.  If panelBorderWidth is
                    greater than zero a border is drawn around each panel, adjusted to enclose the axis labels.
                
                    E.g.
                    subplots = makeSubplots(fig, 2, 2, Nx=1, Ny=1, panelColor='k')
                    ax = subplots.next(); ax.text(0.3, 0.5, '[0, 0] (0,0)')
                    ax = subplots.next(); ax.text(0.3, 0.5, '[0, 0] (1,0)')
                    ax = subplots.next(); ax.text(0.3, 0.5, '[0, 0] (0,1)')
                    ax = subplots.next(); ax.text(0.3, 0.5, '[0, 0] (1,1)')
                    fig.show()
                
                    @param fig    The matplotlib figure to draw
                    @param nx     The number of plots in each row of each panel
                    @param ny     The number of plots in each column of each panel
                    @param Nx     The number of panels in each row of the figure
                    @param Ny     The number of panels in each column of the figure
                    @param plottingArea  (x0, y0, x1, y1) for the part of the figure containing all the panels
                    @param pxgutter Spacing between columns of panels in units of (x1 - x0)
                    @param pygutter Spacing between rows of panels in units of (y1 - y0)
                    @param xgutter  Spacing between columns of plots within a panel in units of (x1 - x0)
                    @param ygutter  Spacing between rows of plots within a panel in units of (y1 - y0)
                    @param headroom Extra spacing above each plot for e.g. a title
                    @param panelBorderWeight Width of border drawn around panels
                    @param panelColor Colour of border around panels
                    """
                    #
                    # Make show() call canvas.draw() too so that we know how large the axis labels are.  Sigh
                    try:
                        fig.__show
                    except AttributeError:
                        fig.__show = fig.show
                        def myShow(fig):
                            fig.__show()
                            fig.canvas.draw()
                            
                        import types
                        fig.show = types.MethodType(myShow, fig, fig.__class__)
                    #
                    # We can't get the axis sizes until after draw()'s been called, so use a callback  Sigh^2
                    #
                    axes = {}                           # all axes in all the panels we're drawing: axes[panel][0] etc.
                    #
                    def on_draw(event):
                        """
                        Callback to draw the panel borders when the plots are drawn to the canvas
                        """
                        if panelBorderWeight <= 0:
                            return False
                
                        for p in axes.keys():
                            bboxes = []
                            for ax in axes[p]:
                                bboxes.append(ax.bbox.union([label.get_window_extent() for label in
                                                             ax.get_xticklabels() + ax.get_yticklabels()]))
                
                            ax = axes[p][0]
                
                            # this is the bbox that bounds all the bboxes, again in relative
                            # figure coords
                
                            bbox = ax.bbox.union(bboxes)
                
                            xy0, xy1 = ax.transData.inverted().transform(bbox)
                            x0, y0 = xy0; x1, y1 = xy1
                            w, h = x1 - x0, y1 - y0
                            # allow a little space around BBox
                            x0 -= 0.02*w; w += 0.04*w
                            y0 -= 0.02*h; h += 0.04*h
                            h += h*headroom
                            # draw BBox
                            ax.patches = []             # remove old ones
                            rec = ax.add_patch(plt.Rectangle((x0, y0), w, h, fill=False,
                                                             lw=panelBorderWeight, edgecolor=panelColor))
                            rec.set_clip_on(False)
                        
                        return False
                
                    fig.canvas.mpl_connect('draw_event', on_draw)        
                    #
                    # Choose the plotting areas for each subplot
                    #
                    x0, y0 = plottingArea[0:2]
                    W, H = plottingArea[2:4]
                    w = (W - (Nx - 1)*pxgutter - (nx*Nx - 1)*xgutter)/float(nx*Nx)
                    h = (H - (Ny - 1)*pygutter - (ny*Ny - 1)*ygutter)/float(ny*Ny)
                    #
                    # OK!  Time to create the subplots
                    #
                    for panel in range(Nx*Ny):
                        axes[panel] = []
                        px = panel%Nx
                        py = panel//Nx
                        for window in range(nx*ny):
                            x = nx*px + window%nx
                            y = ny*py + window//nx
                            ax = fig.add_axes((x0 + xgutter + pxgutter + x*w + (px - 1)*pxgutter + (x - 1)*xgutter,
                                               y0 + ygutter + pygutter + y*h + (py - 1)*pygutter + (y - 1)*ygutter,
                                               w, h), frame_on=True, axis_bgcolor='w')
                            axes[panel].append(ax)
                            yield ax
                
                def plotPsfSpatialModel(exposure, psf, psfCellSet, showBadCandidates=True, numSample=128,
                                        matchKernelAmplitudes=False, keepPlots=True):
                    """Plot the PSF spatial model."""
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
438  <a href="#047253c2">047253c2</a> -     if plt is None:</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
395  <a href="#43cc9b5e">43cc9b5e</a> +     if not plt:</div>
                        print >> sys.stderr, "Unable to import matplotlib"
                        return
                    
                    noSpatialKernel = afwMath.cast_LinearCombinationKernel(psf.getKernel())
                    candPos = list()
                    candFits = list()
                    badPos = list()
                    badFits = list()
                    candAmps = list()
                    badAmps = list()
                    for cell in psfCellSet.getCellList():
                        for cand in cell.begin(False):
                            cand = algorithmsLib.cast_PsfCandidateF(cand)
                            if not showBadCandidates and cand.isBad():
                                continue
                            candCenter = afwGeom.PointD(cand.getXCenter(), cand.getYCenter())
                            try:
                                im = cand.getMaskedImage()
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
457  <a href="#43dca416">43dca416</a> -             except Exception, e:</div>
              ?                             ---
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
414  <a href="#2d3a5fcc">2d3a5fcc</a> +             except Exception:</div>
                                continue
                
                            fit = algorithmsLib.fitKernelParamsToImage(noSpatialKernel, im, candCenter)
                            params = fit[0]
                            kernels = fit[1]
                            amp = 0.0
                            for p, k in zip(params, kernels):
                                amp += p * afwMath.cast_FixedKernel(k).getSum()
                
                            targetFits = badFits if cand.isBad() else candFits
                            targetPos = badPos if cand.isBad() else candPos
                            targetAmps = badAmps if cand.isBad() else candAmps
                
                            targetFits.append([x / amp for x in params])
                            targetPos.append(candCenter)
                            targetAmps.append(amp)
                
                    numCandidates = len(candFits)
                    numBasisFuncs = noSpatialKernel.getNBasisKernels()
                
                    xGood = numpy.array([pos.getX() for pos in candPos]) - exposure.getX0()
                    yGood = numpy.array([pos.getY() for pos in candPos]) - exposure.getY0()
                    zGood = numpy.array(candFits)
                    ampGood = numpy.array(candAmps)
                
                    xBad = numpy.array([pos.getX() for pos in badPos]) - exposure.getX0()
                    yBad = numpy.array([pos.getY() for pos in badPos]) - exposure.getY0()
                    zBad = numpy.array(badFits)
                    ampBad = numpy.array(badAmps)
                    numBad = len(badPos)
                
                    xRange = numpy.linspace(0, exposure.getWidth(), num=numSample)
                    yRange = numpy.linspace(0, exposure.getHeight(), num=numSample)
                
                    kernel = psf.getKernel()
                    nKernelComponents = kernel.getNKernelParameters()
                    #
                    # Figure out how many panels we'll need
                    #
                    nPanelX = int(math.sqrt(nKernelComponents))
                    nPanelY = nKernelComponents//nPanelX
                    while nPanelY*nPanelX < nKernelComponents:
                        nPanelX += 1
                
                    fig = plt.figure(1)
                    fig.clf()
                    try:
                        fig.canvas._tkcanvas._root().lift() # == Tk's raise, but raise is a python reserved word
                    except:                                 # protect against API changes
                        pass
                    #
                    # Generator for axes arranged in panels
                    #
                    subplots = makeSubplots(fig, 2, 2, Nx=nPanelX, Ny=nPanelY, xgutter=0.06, ygutter=0.06, pygutter=0.04)
                
                    for k in range(nKernelComponents):
                        func = kernel.getSpatialFunction(k)
                        dfGood = zGood[:,k] - numpy.array([func(pos.getX(), pos.getY()) for pos in candPos])
                        yMin = dfGood.min()
                        yMax = dfGood.max()
                        if numBad > 0:
                            dfBad = zBad[:,k] - numpy.array([func(pos.getX(), pos.getY()) for pos in badPos])
                            yMin = min([yMin, dfBad.min()])
                            yMax = max([yMax, dfBad.max()])
                        yMin -= 0.05 * (yMax - yMin)
                        yMax += 0.05 * (yMax - yMin)
                
                        yMin = -0.01
                        yMax = 0.01
                
                        fRange = numpy.ndarray((len(xRange), len(yRange)))
                        for j, yVal in enumerate(yRange):
                            for i, xVal in enumerate(xRange):
                                fRange[j][i] = func(xVal, yVal)
                
                        #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                                
                        ax = subplots.next()
                
                        ax.set_autoscale_on(False)
                        ax.set_xbound(lower=0, upper=exposure.getHeight())
                        ax.set_ybound(lower=yMin, upper=yMax)
                        ax.plot(yGood, dfGood, 'b+')
                        if numBad > 0:
                            ax.plot(yBad, dfBad, 'r+')
                        ax.axhline(0.0)
                        ax.set_title('Residuals(y)')
                
                        #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                
                        ax = subplots.next()
                
                        if matchKernelAmplitudes and k == 0:
                            vmin = 0.0
                            vmax = 1.1
                        else:
                            vmin = fRange.min()
                            vmax = fRange.max()
                
                        norm = matplotlib.colors.Normalize(vmin=vmin, vmax=vmax)
                        im = ax.imshow(fRange, aspect='auto', origin="lower", norm=norm,
                                       extent=[0, exposure.getWidth()-1, 0, exposure.getHeight()-1])
                        ax.set_title('Spatial poly')
                        plt.colorbar(im, orientation='horizontal', ticks=[vmin, vmax])
                
                        #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                
                        ax = subplots.next()
                        ax.set_autoscale_on(False)
                        ax.set_xbound(lower=0, upper=exposure.getWidth())
                        ax.set_ybound(lower=yMin, upper=yMax)
                        ax.plot(xGood, dfGood, 'b+')
                        if numBad > 0:
                            ax.plot(xBad, dfBad, 'r+')
                        ax.axhline(0.0)
                        ax.set_title('K%d Residuals(x)' % k)
                
                        #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                
                        ax = subplots.next()
                
                        if False:
                            ax.scatter(xGood, yGood, c=dfGood, marker='o')
                            ax.scatter(xBad, yBad, c=dfBad, marker='x')
                            ax.set_xbound(lower=0, upper=exposure.getWidth())
                            ax.set_ybound(lower=0, upper=exposure.getHeight())
                            ax.set_title('Spatial residuals')
                            plt.colorbar(im, orientation='horizontal')
                        else:
                            calib = exposure.getCalib()
                            if calib.getFluxMag0()[0] <= 0:
                                calib = type(calib)()
                                calib.setFluxMag0(1.0)
                
                            with CalibNoThrow():
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
593  <a href="#9420d772">9420d772</a> -                 ax.plot(calib.getMagnitude(ampGood), zGood[:,k], 'b+')</div>
              ?                                               ^^^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
550  <a href="#fbeca643">fbeca643</a> +                 ax.plot(calib.getMagnitude(candAmps), zGood[:,k], 'b+')</div>
              ?                                            + +++  ^
                                if numBad > 0:
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
595  <a href="#9420d772">9420d772</a> -                     ax.plot(calib.getMagnitude(ampBad), zBad[:,k], 'r+')</div>
              ?                                                   ^^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
552  <a href="#fbeca643">fbeca643</a> +                     ax.plot(calib.getMagnitude(badAmps), zBad[:,k], 'r+')</div>
              ?                                                + ++  ^
                
                            ax.set_title('Flux variation')
                
                    fig.show()
                
                    global keptPlots
                    if keepPlots and not keptPlots:
                        # Keep plots open when done
                        def show():
                            print "%s: Please close plots when done." % __name__
                            try:
                                plt.show()
                            except:
                                pass
                            print "Plots closed, exiting..."
                        import atexit
                        atexit.register(show)
                        keptPlots = True
                
                def showPsf(psf, eigenValues=None, XY=None, normalize=True, frame=None):
                    """Display a PSF's eigen images
                
                    If normalize is True, set the largest absolute value of each eigenimage to 1.0 (n.b. sum == 0.0 for i > 0)
                    """
                
                    if eigenValues:
                        coeffs = eigenValues
                    elif XY is not None:
                        coeffs = psf.getLocalKernel(afwGeom.PointD(XY[0], XY[1])).getKernelParameters()
                    else:
                        coeffs = None
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
628  <a href="#b1bc91ed">b1bc91ed</a> -     mos = displayUtils.Mosaic(gutter=2, background=-0.1)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
585  <a href="#0f78cb59">0f78cb59</a> +     mos = displayUtils.Mosaic()</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
586  <a href="#0f78cb59">0f78cb59</a> +     i = 0</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
629  <a href="#b1bc91ed">b1bc91ed</a> -     for i, k in enumerate(afwMath.cast_LinearCombinationKernel(psf.getKernel()).getKernelList()):</div>
              ?         ---     ----------                                                                     -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
587  <a href="#0f78cb59">0f78cb59</a> +     for k in afwMath.cast_LinearCombinationKernel(psf.getKernel()).getKernelList():</div>
                        im = afwImage.ImageD(k.getDimensions())
                        k.computeImage(im, False)
                        if normalize:
                            im /= numpy.max(numpy.abs(im.getArray()))
                            
                        if coeffs:
                            mos.append(im, "%g" % (coeffs[i]/coeffs[0]))
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
595  <a href="#0f78cb59">0f78cb59</a> +             i += 1</div>
                        else:
                            mos.append(im)
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
640  <a href="#b1bc91ed">b1bc91ed</a> -     mos.makeMosaic(frame=frame, title="Kernel Basis Functions")</div>
              ?                                        ^ -  ----------------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
599  <a href="#0f78cb59">0f78cb59</a> +     mos.makeMosaic(frame=frame, title="Eigen Images")</div>
              ?                                        ^^^  +++++
                
                    return mos
                
                def showPsfMosaic(exposure, psf=None, nx=7, ny=None,
                                  showCenter=True, showEllipticity=False, showFwhm=False,
                                  stampSize=0, frame=None, title=None):
                    """Show a mosaic of Psf images.  exposure may be an Exposure (optionally with PSF), or a tuple (width, height)
                
                    If stampSize is > 0, the psf images will be trimmed to stampSize*stampSize
                    """
                
                    scale = 1.0
                    if showFwhm:
                        showEllipticity = True
                        scale = 2*math.log(2)         # convert sigma^2 to HWHM^2 for a Gaussian
                
                    mos = displayUtils.Mosaic()
                
                    try:                                # maybe it's a real Exposure
                        width, height = exposure.getWidth(), exposure.getHeight()
                        x0, y0 = exposure.getXY0()
                        if not psf:
                            psf = exposure.getPsf()
                    except AttributeError:
                        try:                            # OK, maybe a list [width, height]
                            width, height = exposure[0], exposure[1]
                            x0, y0 = 0, 0
                        except TypeError:               # I guess not
                            raise RuntimeError, ("Unable to extract width/height from object of type %s" % type(exposure))
                
                    if not ny:
                        ny = int(nx*float(height)/width + 0.5)
                        if not ny:
                            ny = 1
                
                    schema = afwTable.SourceTable.makeMinimalSchema()
                
                    control = algorithmsLib.GaussianCentroidControl()
                    centroider = algorithmsLib.MeasureSourcesBuilder().addAlgorithm(control).build(schema)
                
                    sdssShape = algorithmsLib.SdssShapeControl()
                    shaper = algorithmsLib.MeasureSourcesBuilder().addAlgorithm(sdssShape).build(schema)
                    
                    table = afwTable.SourceTable.make(schema)
                
                    table.defineCentroid(control.name)
                    table.defineShape(sdssShape.name)
                
                    bbox = None
                    if stampSize > 0:
                        w, h = psf.computeImage(afwGeom.PointD(0, 0)).getDimensions()
                        if stampSize <= w and stampSize <= h:
                            bbox = afwGeom.BoxI(afwGeom.PointI((w - stampSize)//2, (h - stampSize)//2),
                                                afwGeom.ExtentI(stampSize, stampSize))
                
                    centers = []
                    shapes = []
                    for iy in range(ny):
                        for ix in range(nx):
                            x = int(ix*(width-1)/(nx-1)) + x0
                            y = int(iy*(height-1)/(ny-1)) + y0
                
                            im = psf.computeImage(afwGeom.PointD(x, y)).convertF()
                            imPeak = psf.computePeak(afwGeom.PointD(x, y))
                            im /= imPeak
                            if bbox:
                                im = im.Factory(im, bbox)
                            lab = "PSF(%d,%d)" % (x, y) if False else ""
                            mos.append(im, lab)
                    
                            exp = afwImage.makeExposure(afwImage.makeMaskedImage(im))
                            w, h = im.getWidth(), im.getHeight()
                            cen = afwGeom.PointD(im.getX0() + w//2, im.getY0() + h//2)
                            src = table.makeRecord()
                            foot = afwDet.Footprint(exp.getBBox())
                            src.setFootprint(foot)
                
                            centroider.apply(src, exp, cen)
                            centers.append((src.getX() - im.getX0(), src.getY() - im.getY0()))
                
                            shaper.apply(src, exp, cen)
                            shapes.append((src.getIxx(), src.getIxy(), src.getIyy()))
                            
                    mos.makeMosaic(frame=frame, title=title if title else "Model Psf", mode=nx)
                
                    if centers and frame is not None:
                        i = 0
                        with ds9.Buffering():
                            for cen, shape in zip(centers, shapes):
                                bbox = mos.getBBox(i); i += 1
                                xc, yc = cen[0] + bbox.getMinX(),  cen[1] + bbox.getMinY()
                                if showCenter:
                                    ds9.dot("+", xc, yc,  ctype=ds9.BLUE, frame=frame)
                
                                if showEllipticity:
                                    ixx, ixy, iyy = shape
                                    ixx *= scale; ixy *= scale; iyy *= scale
                                    ds9.dot("@:%g,%g,%g" % (ixx, ixy, iyy), xc, yc, frame=frame, ctype=ds9.RED)
                
                    return mos
                
                def showPsfResiduals(exposure, sourceSet, magType="psf", scale=10, frame=None, showAmps=False):
                    mimIn = exposure.getMaskedImage()
                    mimIn = mimIn.Factory(mimIn, True)  # make a copy to subtract from
                    
                    psf = exposure.getPsf()
                    psfWidth, psfHeight = psf.getLocalKernel().getDimensions()
                    #
                    # Make the image that we'll paste our residuals into.  N.b. they can overlap the edges
                    #
                    w, h = int(mimIn.getWidth()/scale), int(mimIn.getHeight()/scale)
                
                    im = mimIn.Factory(w + psfWidth, h + psfHeight)
                
                    cenPos = []
                    for s in sourceSet:
                        x, y = s.getX(), s.getY()
                        
                        sx, sy = int(x/scale + 0.5), int(y/scale + 0.5)
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
761  <a href="#1f536ad4">1f536ad4</a> -         smim = im.Factory(im, afwGeom.BoxI(afwGeom.PointI(sx, sy), afwGeom.ExtentI(psfWidth, psfHeight)),</div>
              ?                                                                                                         ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
720  <a href="#2d3a5fcc">2d3a5fcc</a> +         smim = im.Factory(im, afwGeom.BoxI(afwGeom.PointI(sx, sy), afwGeom.ExtentI(psfWidth, psfHeight)))</div>
              ?                                                                                                         ^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
762  <a href="#1f536ad4">1f536ad4</a> -                          afwImage.PARENT)</div>
                        sim = smim.getImage()
                
                        try:
                            if magType == "ap":
                                flux = s.getApFlux()
                            elif magType == "model":
                                flux = s.getModelFlux()
                            elif magType == "psf":
                                flux = s.getPsfFlux()
                            else:
                                raise RuntimeError("Unknown flux type %s" % magType)
                            
                            algorithmsLib.subtractPsf(psf, mimIn, x, y, flux)
                        except Exception, e:
                            print e
                
                        try:
                            expIm = mimIn.getImage().Factory(mimIn.getImage(),
                                                             afwGeom.BoxI(afwGeom.PointI(int(x) - psfWidth//2,
                                                                                         int(y) - psfHeight//2),
                                                                          afwGeom.ExtentI(psfWidth, psfHeight)),
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
784  <a href="#1fe75d21">1fe75d21</a> -                                              afwImage.PARENT)</div>
              ?                                              ---------------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
742  <a href="#2d3a5fcc">2d3a5fcc</a> +                                              )</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
785  <a href="#1fe75d21">1fe75d21</a> -         except pexExcept.LsstCppException:</div>
              ?                          -------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
743  <a href="#8857e07a">8857e07a</a> +         except pexExcept.Exception:</div>
                            continue
                
                        cenPos.append([x - expIm.getX0() + sx, y - expIm.getY0() + sy])
                
                        sim += expIm
                
                    if frame is not None:
                        ds9.mtv(im, frame=frame)
                        with ds9.Buffering():
                            for x, y in cenPos:
                                ds9.dot("+", x, y, frame=frame)
                
                        if showAmps:
                            nx, ny = namp
                            for i in range(nx):
                                for j in range(ny):
                                    xc = numpy.array([0, 1, 1, 0, 0])
                                    yc = numpy.array([0, 0, 1, 1, 0])
                
                                    corners = []
                                    for k in range(len(xc)):
                                        corners.append([psfWidth//2 + w/nx*(i + xc[k]), psfHeight//2 + h/ny*(j + yc[k])])
                
                                    ds9.line(corners, frame=frame)
                
                    return im
                
                #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                
                def saveSpatialCellSet(psfCellSet, fileName="foo.fits", frame=None):
                    """Write the contents of a SpatialCellSet to a many-MEF fits file"""
                    
                    mode = "w"
                    for cell in psfCellSet.getCellList():
                        for cand in cell.begin(False):  # include bad candidates
                            cand = algorithmsLib.cast_PsfCandidateF(cand)
                
                            dx = afwImage.positionToIndex(cand.getXCenter(), True)[1]
                            dy = afwImage.positionToIndex(cand.getYCenter(), True)[1]
                            im = afwMath.offsetImage(cand.getMaskedImage(), -dx, -dy, "lanczos5")
                
                            md = dafBase.PropertySet()
                            md.set("CELL", cell.getLabel())
                            md.set("ID", cand.getId())
                            md.set("XCENTER", cand.getXCenter())
                            md.set("YCENTER", cand.getYCenter())
                            md.set("BAD", cand.isBad())
                            md.set("AMPL", cand.getAmplitude())
                            md.set("FLUX", cand.getSource().getPsfFlux())
                            md.set("CHI2", cand.getSource().getChi2())
                
                            im.writeFits(fileName, md, mode)
                            mode = "a"
                
                            if frame is not None:
                                ds9.mtv(im, frame=frame)
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="845de94d"/></a>845de94d</h3>

<pre>
commit 845de94d153ac790e5e7499785393ea407f4b45a
Author: rowen <rowen@git.lsstcorp.org>
Date:   Mon Feb 14 23:55:49 2011 +0000

    First cut at implementing ticket #1567.
    Includes Python registry for star selectors and another for PSF determiners.
    All existing unit tests pass.
    I also flattened the Python namespace to simplify use.
</pre>
<h3><a name="b1bc91ed"/></a>b1bc91ed</h3>

<pre>
commit b1bc91ed1538607eb90e070881a82498fd551909
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Mon Dec 16 15:27:21 2013 -0500

    Improved PSF debugging plots
</pre>
<h3><a name="ee6048a3"/></a>ee6048a3</h3>

<pre>
commit ee6048a3bb622cbfab2398302ad1f87968311755
Author: Paul Price <price@astro.princeton.edu>
Date:   Thu May 30 13:26:11 2013 -0400

    fix bitrot in PSF determination debugging
</pre>
<h3><a name="1fe75d21"/></a>1fe75d21</h3>

<pre>
commit 1fe75d21e1d03ac24c309449056524def41eaad5
Author: rhl <rhl@git.lsstcorp.org>
Date:   Tue Jul 5 16:24:25 2011 +0000

    Adjust PSF spatial model debugging plots
</pre>
<h3><a name="43dca416"/></a>43dca416</h3>

<pre>
commit 43dca416c15378af9ab277b054292ea81fec5ce0
Author: rhl <rhl@git.lsstcorp.org>
Date:   Mon Jun 27 21:11:28 2011 +0000

    Need to catch objects near the edge;  reuse matplotlib figures
</pre>
<h3><a name="9420d772"/></a>9420d772</h3>

<pre>
commit 9420d77262c747b763862e26e5c56460f7a79531
Author: Paul Price <price@astro.princeton.edu>
Date:   Mon Jul 22 11:46:33 2013 -0400

    utils: adapt to Calib.getMagnitude change
    
    This API changed in #2885 to use ndarray instead of std::vector.
</pre>
<h3><a name="0f78cb59"/></a>0f78cb59</h3>

<pre>
commit 0f78cb59c45d0d8383309cd0361f4411c3629347
Author: rhl <rhl@git.lsstcorp.org>
Date:   Thu May 20 20:23:02 2010 +0000

    Added flagForDetection bit STAR; set for initial PSF candidates.  Renamed measureSourceUtils.py to utils.py (but kept old file for backwards compat)
</pre>
<h3><a name="047253c2"/></a>047253c2</h3>

<pre>
commit 047253c2aeee2729601ad3e1da5247d7307f555a
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed Jun 12 10:01:45 2013 -0400

    utils: fix cut/paste error
    
    The exception isn't defined after the cut/paste, so can't
    be appended to the error message.
</pre>
<h3><a name="1f536ad4"/></a>1f536ad4</h3>

<pre>
commit 1f536ad4ddf20119194efd65d21fc721526c5a38
Author: rhl <rhl@git.lsstcorp.org>
Date:   Fri Jun 24 20:23:21 2011 +0000

    Cleaned up PSF residuals plot; added showPsfResiduals
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="845de94d"/></a>845de94d</h3>

<pre>
commit 845de94d153ac790e5e7499785393ea407f4b45a
Author: rowen <rowen@git.lsstcorp.org>
Date:   Mon Feb 14 23:55:49 2011 +0000

    First cut at implementing ticket #1567.
    Includes Python registry for star selectors and another for PSF determiners.
    All existing unit tests pass.
    I also flattened the Python namespace to simplify use.
</pre>
<h3><a name="c4a094b1"/></a>c4a094b1</h3>

<pre>
commit c4a094b1f48079a3b4b3cb3653205b1d49ba1df5
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Fri Apr 19 12:19:13 2013 -0400

    Aesthetic fixes to address review comments for #2673.
</pre>
<h3><a name="43cc9b5e"/></a>43cc9b5e</h3>

<pre>
commit 43cc9b5ef33a8295b6c9de6ec8e4d842bc220a92
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Thu May 24 15:37:33 2012 -0400

    Reworked the matplotlib for the per-kernel-basis-function plots to put them all on one (busy) window
    
    Conflicts:
    	python/lsst/meas/algorithms/utils.py
</pre>
<h3><a name="bc4b5c7c"/></a>bc4b5c7c</h3>

<pre>
commit bc4b5c7ccf9fdfa5ccd485cc28e3a5cdd7533276
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Tue Jul 8 10:34:51 2014 -0500

    Updated task docs
</pre>
<h3><a name="0f78cb59"/></a>0f78cb59</h3>

<pre>
commit 0f78cb59c45d0d8383309cd0361f4411c3629347
Author: rhl <rhl@git.lsstcorp.org>
Date:   Thu May 20 20:23:02 2010 +0000

    Added flagForDetection bit STAR; set for initial PSF candidates.  Renamed measureSourceUtils.py to utils.py (but kept old file for backwards compat)
</pre>
<h3><a name="2d3a5fcc"/></a>2d3a5fcc</h3>

<pre>
commit 2d3a5fccae9908251c54deaba743fc34137a65f5
Author: Russell Owen <rowen@uw.edu>
Date:   Thu Sep 11 17:45:03 2014 -0700

    Remove explicit use of image origin = PARENT; use default
</pre>
<h3><a name="fbeca643"/></a>fbeca643</h3>

<pre>
commit fbeca643a7ebf086f38abb0345ecff01494c08b7
Merge: 89f7dc7 c4a094b
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Sat Apr 20 10:46:58 2013 -0400

    Merge remote-tracking branch 'origin/tickets/2673' into next
    
    Conflicts:
    	python/lsst/meas/algorithms/apertureCorrection.py
    	   Debugging additions on #2673  that don't need to be kept
    	python/lsst/meas/algorithms/measurement.py
    	   Change was just whitespace in a now-deleted block
    
    	python/lsst/meas/algorithms/pcaPsfDeterminer.py
    	python/lsst/meas/algorithms/utils.py
    	    Resolved diffs
</pre>
<h3><a name="b5d87ffe"/></a>b5d87ffe</h3>

<pre>
commit b5d87ffe83fc1bca40df2e6457e664946c6f19ed
Author: Serge Monkewitz <smm@ipac.caltech.edu>
Date:   Mon Feb 13 20:32:48 2012 -0600

    PsfCandidate now derives from SpatialCellMaskedImageCandidate
</pre>
<h3><a name="8cca8626"/></a>8cca8626</h3>

<pre>
commit 8cca8626fe33cd232da5081d5699982e4d150d73
Author: rhl <rhl@git.lsstcorp.org>
Date:   Mon Oct 31 21:50:45 2011 +0000

    Make showPsfCandidates display residual/std.dev (not residuals/variance); improve comments/title
</pre>
<h3><a name="8857e07a"/></a>8857e07a</h3>

<pre>
commit 8857e07a6268e5af38162e6186e9338018b07be8
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Thu Jul 17 16:53:01 2014 -0400

    Adapt to changes in exception Python wrappers (DM-827)
</pre>
</div>


[Return to list](#homelist)
# <a name="tests/measure.py"/></a>tests/measure.py
### Diff:

<pre>
                #!/usr/bin/env python
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
3    <a href="#c5720a8e">c5720a8e</a> - # </div>
              ?  -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
3    <a href="#6e52ace2">6e52ace2</a> + #</div>
                # LSST Data Management System
                # Copyright 2008, 2009, 2010 LSST Corporation.
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
6    <a href="#c5720a8e">c5720a8e</a> - # </div>
              ?  -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
6    <a href="#6e52ace2">6e52ace2</a> + #</div>
                # This product includes software developed by the
                # LSST Project (http://www.lsst.org/).
                #
                # This program is free software: you can redistribute it and/or modify
                # it under the terms of the GNU General Public License as published by
                # the Free Software Foundation, either version 3 of the License, or
                # (at your option) any later version.
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
14   <a href="#c5720a8e">c5720a8e</a> - # </div>
              ?  -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
14   <a href="#6e52ace2">6e52ace2</a> + #</div>
                # This program is distributed in the hope that it will be useful,
                # but WITHOUT ANY WARRANTY; without even the implied warranty of
                # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                # GNU General Public License for more details.
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
19   <a href="#c5720a8e">c5720a8e</a> - # </div>
              ?  -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
19   <a href="#6e52ace2">6e52ace2</a> + #</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
20   <a href="#c5720a8e">c5720a8e</a> - # You should have received a copy of the LSST License Statement and </div>
              ?                                                                    -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
20   <a href="#6e52ace2">6e52ace2</a> + # You should have received a copy of the LSST License Statement and</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
21   <a href="#c5720a8e">c5720a8e</a> - # the GNU General Public License along with this program.  If not, </div>
              ?                                                                   -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
21   <a href="#6e52ace2">6e52ace2</a> + # the GNU General Public License along with this program.  If not,</div>
                # see <http://www.lsstcorp.org/LegalNotices/>.
                #
                
                """
                Tests for Footprints, FootprintSets, and Measure
                
                Run with:
                   python measure.py
                or
                   python
                   >>> import measure; measure.run()
                """
                
                import os, sys, unittest
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
36   <a href="#be4b736d">be4b736d</a> - import math; from math import *</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
37   <a href="#3ed252bc">3ed252bc</a> - import eups</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
36   <a href="#2d3a5fcc">2d3a5fcc</a> + import math</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
37   <a href="#21af0bb5">21af0bb5</a> + import lsst.utils</div>
                import lsst.utils.tests as tests
                import lsst.pex.logging as logging
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
40   <a href="#dbbf5966">dbbf5966</a> - import lsst.pex.policy as policy</div>
                import lsst.pex.config as pexConfig
                import lsst.afw.detection as afwDetection
                import lsst.afw.image as afwImage
                import lsst.afw.math as afwMath
                import lsst.afw.geom as afwGeom
                import lsst.afw.table as afwTable
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
46   <a href="#6e52ace2">6e52ace2</a> + import lsst.meas.base as measBase</div>
                import lsst.meas.algorithms as algorithms
                import lsst.meas.algorithms.defects as defects
                
                try:
                    type(verbose)
                except NameError:
                    verbose = 0
                logging.Trace_setVerbosity("afwDetection.Measure", verbose)
                
                try:
                    type(display)
                except NameError:
                    display = False
                
                import lsst.afw.display.ds9 as ds9
                
                def toString(*args):
                    """toString written in python"""
                    if len(args) == 1:
                        args = args[0]
                
                    y, x0, x1 = args
                    return "%d: %d..%d" % (y, x0, x1)
                
                #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                
                class MeasureTestCase(unittest.TestCase):
                    """A test case for Measure"""
                    class Object(object):
                        def __init__(self, val, spans):
                            self.val = val
                            self.spans = spans
                
                        def insert(self, im, dx = 0, dy = 0):
                            """Insert self into an image"""
                            for sp in self.spans:
                                y, x0, x1 = sp
                                for x in range(x0, x1 + 1):
                                    im.set(x + dx, y + dy, self.val)
                
                        def __eq__(self, other):
                            for osp, sp in zip(other.getSpans(), self.spans):
                                if osp.toString() != toString(sp):
                                    return False
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
91   <a href="#4d375e47">4d375e47</a> -                 </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
91   <a href="#6e52ace2">6e52ace2</a> + </div>
                            return True
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
93   <a href="#4d375e47">4d375e47</a> -     </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
93   <a href="#6e52ace2">6e52ace2</a> + </div>
                    def setUp(self):
                        ms = afwImage.MaskedImageF(afwGeom.ExtentI(31, 27))
                        var = ms.getVariance(); var.set(1); del var
                        bbox = afwGeom.BoxI(afwGeom.PointI(1,1), afwGeom.ExtentI(24, 20))
                        self.mi = afwImage.MaskedImageF(ms, bbox, afwImage.LOCAL)
                        self.exposure = afwImage.makeExposure(self.mi)
                        im = self.mi.getImage()
                        #
                        # Objects that we should detect.  These are coordinates in the subimage
                        #
                        self.objects = []
                        self.objects += [self.Object(10, [(1, 4, 4), (2, 3, 5), (3, 4, 4)])]
                        self.objects += [self.Object(20, [(5, 7, 8), (5, 10, 10), (6, 8, 9)])]
                        self.objects += [self.Object(20, [(8, 3, 3)])]
                
                        im.set(0)                       # clear image
                        for obj in self.objects:
                            obj.insert(im, 5, 5)
                        #
                        # Add a few more pixels to make peaks that we can centroid around
                        #
                        for x, y in [(9, 7), (13, 11)]:
                            im.set(x, y, 1 + im.get(x, y))
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
117  <a href="#4d375e47">4d375e47</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
117  <a href="#6e52ace2">6e52ace2</a> + </div>
                    def tearDown(self):
                        del self.mi
                        del self.exposure
                
                    def testFootprintsMeasure(self):
                        """Check that we can measure the objects in a detectionSet"""
                
                        xcentroid = [10.0, 14.0,        9.0]
                        ycentroid = [8.0, 11.5061728,  14.0]
                        flux = [51.0, 101.0,         20.0]
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
128  <a href="#6e52ace2">6e52ace2</a> + </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
128  <a href="#a2452e86">a2452e86</a> -         wflux = [51.0, 101.0,        20.0]</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
129  <a href="#4d375e47">4d375e47</a> -         </div>
                        ds = afwDetection.FootprintSet(self.mi, afwDetection.Threshold(10), "DETECTED")
                
                        if display:
                            ds9.mtv(self.mi, frame=0)
                            ds9.mtv(self.mi.getVariance(), frame=1)
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
136  <a href="#b0d8591f">b0d8591f</a> -         measureSourcesConfig = algorithms.SourceMeasurementConfig()</div>
              ?                                 --------   ^^ ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
135  <a href="#6e52ace2">6e52ace2</a> +         measureSourcesConfig = measBase.SingleFrameMeasurementConfig()</div>
              ?                                ++  ++++  ^^^^^^ ^^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
137  <a href="#b0d8591f">b0d8591f</a> -         measureSourcesConfig.algorithms["flux.naive"].radius = 3.0</div>
              ?                                          ^   ------       ^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
136  <a href="#e9706731">e9706731</a> +         measureSourcesConfig.algorithms["base_CircularApertureFlux"].radii = [3.0]</div>
              ?                                          ^^^^^^^^^^^^^^^^^^^^^^          ^   +   +
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
138  <a href="#b0d8591f">b0d8591f</a> -         measureSourcesConfig.algorithms.names = ["centroid.naive", "shape.sdss", "flux.psf", "flux.naive"]</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
137  <a href="#e9706731">e9706731</a> +         measureSourcesConfig.algorithms.names = ["base_NaiveCentroid", "base_SdssShape", "base_PsfFlux",</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
138  <a href="#e9706731">e9706731</a> +                                                  "base_CircularApertureFlux"]</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
139  <a href="#b0d8591f">b0d8591f</a> -         measureSourcesConfig.slots.centroid = "centroid.naive"</div>
              ?                                                ^       ------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
139  <a href="#6e52ace2">6e52ace2</a> +         measureSourcesConfig.slots.centroid = "base_NaiveCentroid"</div>
              ?                                                ^^^^^^^^^^^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
140  <a href="#b0d8591f">b0d8591f</a> -         measureSourcesConfig.slots.psfFlux = "flux.psf"</div>
              ?                                                   ----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
140  <a href="#6e52ace2">6e52ace2</a> +         measureSourcesConfig.slots.psfFlux = "base_PsfFlux"</div>
              ?                                               +++++++ +
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
141  <a href="#b0d8591f">b0d8591f</a> -         measureSourcesConfig.slots.apFlux = "flux.naive"</div>
              ?                                              ^   ^^^^^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
141  <a href="#e9706731">e9706731</a> +         measureSourcesConfig.slots.apFlux = "base_CircularApertureFlux_0"</div>
              ?                                              ^^^^^^^^^^^^^^^^^^^^^^   ^^
                        measureSourcesConfig.slots.modelFlux = None
                        measureSourcesConfig.slots.instFlux = None
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
144  <a href="#bc66fd4d">bc66fd4d</a> + </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
144  <a href="#f5b81018">f5b81018</a> -         measureSourcesConfig.slots.calibFlux = None</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
145  <a href="#b0d8591f">b0d8591f</a> -         measureSourcesConfig.validate()</div>
                        schema = afwTable.SourceTable.makeMinimalSchema()
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
147  <a href="#b0d8591f">b0d8591f</a> -         ms = measureSourcesConfig.makeMeasureSources(schema)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
146  <a href="#6e52ace2">6e52ace2</a> +         task = measBase.SingleFrameMeasurementTask(schema, config=measureSourcesConfig)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
148  <a href="#0fa9ad60">0fa9ad60</a> -         catalog = afwTable.SourceCatalog(schema)</div>
              ?         ^  ----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
147  <a href="#6e52ace2">6e52ace2</a> +         measCat = afwTable.SourceCatalog(schema)</div>
              ?         ^^^^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
148  <a href="#6e52ace2">6e52ace2</a> +         # now run the SFM task with the test plugin</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
149  <a href="#0fa9ad60">0fa9ad60</a> -         measureSourcesConfig.slots.setupTable(catalog.getTable())</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
150  <a href="#b0d8591f">b0d8591f</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
151  <a href="#0fa9ad60">0fa9ad60</a> -         ds.makeSources(catalog)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
152  <a href="#bc66fd4d">bc66fd4d</a> - </div>
                        sigma = 1e-10; psf = algorithms.DoubleGaussianPsf(11, 11, sigma) # i.e. a single pixel
                        self.exposure.setPsf(psf)
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
151  <a href="#6e52ace2">6e52ace2</a> +         task.run(measCat, self.exposure)</div>
                
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
153  <a href="#1b5e944a">1b5e944a</a> + </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
156  <a href="#0fa9ad60">0fa9ad60</a> -         for i, source in enumerate(catalog):</div>
              ?                                    ^  ----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
154  <a href="#6e52ace2">6e52ace2</a> +         for i, source in enumerate(measCat):</div>
              ?                                    ^^^^^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
157  <a href="#1b5e944a">1b5e944a</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
158  <a href="#85ab1211">85ab1211</a> -             ms.applyWithPeak(source, self.exposure)</div>
                
                            xc, yc = source.getX() - self.mi.getX0(), source.getY() - self.mi.getY0()
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
161  <a href="#4d375e47">4d375e47</a> - </div>
                            if display:
                                ds9.dot("+", xc, yc)
                
                            self.assertAlmostEqual(source.getX(), xcentroid[i], 6)
                            self.assertAlmostEqual(source.getY(), ycentroid[i], 6)
                            self.assertEqual(source.getApFlux(), flux[i])
                            self.assertAlmostEqual(source.getApFluxErr(), math.sqrt(29), 6) # 29 pixels in 3pixel circular ap.
                            # We're using a delta-function PSF, so the psfFlux should be the pixel under the centroid,
                            # iff the object's centred in the pixel
                            if xc == int(xc) and yc == int(yc):
                                self.assertAlmostEqual(source.getPsfFlux(),
                                                       self.exposure.getMaskedImage().getImage().get(int(xc + 0.5),
                                                                                                 int(yc + 0.5)))
                                self.assertAlmostEqual(source.getPsfFluxErr(),
                                                       self.exposure.getMaskedImage().getVariance().get(int(xc + 0.5),
                                                                                                    int(yc + 0.5)))
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
178  <a href="#2aa51658">2aa51658</a> -             </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
179  <a href="#a2452e86">a2452e86</a> -             </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
173  <a href="#6e52ace2">6e52ace2</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
174  <a href="#6e52ace2">6e52ace2</a> + </div>
                class FindAndMeasureTestCase(unittest.TestCase):
                    """A test case detecting and measuring objects"""
                    def setUp(self):
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
178  <a href="#21af0bb5">21af0bb5</a> +         afwdataDir = lsst.utils.getPackageDir('afwdata')</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
183  <a href="#2aa51658">2aa51658</a> -         self.mi = afwImage.MaskedImageF(os.path.join(eups.productDir("afwdata"),</div>
              ?                                                      -----------------       ^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
179  <a href="#21af0bb5">21af0bb5</a> +         self.mi = afwImage.MaskedImageF(os.path.join(afwdataDir,</div>
              ?                                                             ^^^
                                                                     "CFHT", "D4", "cal-53535-i-797722_1.fits"))
                
                        self.FWHM = 5
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
187  <a href="#b2464af2">b2464af2</a> -         self.psf = algorithms.DoubleGaussianPsf(15, 15, self.FWHM/(2*sqrt(2*log(2))))</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
183  <a href="#2d3a5fcc">2d3a5fcc</a> +         self.psf = algorithms.DoubleGaussianPsf(15, 15, self.FWHM/(2*math.sqrt(2*math.log(2))))</div>
              ?                                                                      +++++       +++++
                
                        if False:                       # use full image, trimmed to data section
                            self.XY0 = afwGeom.PointI(32, 2)
                            self.mi = self.mi.Factory(self.mi, afwGeom.BoxI(self.XY0, afwGeom.PointI(2079, 4609)), afwImage.LOCAL)
                            self.mi.setXY0(afwGeom.PointI(0, 0))
                        else:                           # use sub-image
                            self.XY0 = afwGeom.PointI(824, 140)
                            self.mi = self.mi.Factory(self.mi, afwGeom.BoxI(self.XY0, afwGeom.ExtentI(256, 256)), afwImage.LOCAL)
                
                        self.mi.getMask().addMaskPlane("DETECTED")
                        self.exposure = afwImage.makeExposure(self.mi)
                
                    def tearDown(self):
                        del self.mi
                        del self.psf
                        del self.exposure
                
                    def testDetection(self):
                        """Test object detection"""
                        #
                        # Fix defects
                        #
                        # Mask known bad pixels
                        #
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
208  <a href="#21af0bb5">21af0bb5</a> +         measAlgorithmsDir = lsst.utils.getPackageDir('meas_algorithms')</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
212  <a href="#6e085a4f">6e085a4f</a> -         badPixels = defects.policyToBadRegionList(os.path.join(eups.productDir("meas_algorithms"),</div>
              ?                                                                -----------------    ^^         ^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
209  <a href="#21af0bb5">21af0bb5</a> +         badPixels = defects.policyToBadRegionList(os.path.join(measAlgorithmsDir,</div>
              ?                                                                    ^         ^^^
                                                                               "policy/BadPixels.paf"))
                        # did someone lie about the origin of the maskedImage?  If so, adjust bad pixel list
                        if self.XY0.getX() != self.mi.getX0() or self.XY0.getY() != self.mi.getY0():
                            dx = self.XY0.getX() - self.mi.getX0()
                            dy = self.XY0.getY() - self.mi.getY0()
                            for bp in badPixels:
                                bp.shift(-dx, -dy)
                
                        algorithms.interpolateOverDefects(self.mi, self.psf, badPixels)
                        #
                        # Subtract background
                        #
                        bgGridSize = 64  # was 256 ... but that gives only one region and the spline breaks
                        bctrl = afwMath.BackgroundControl(afwMath.Interpolate.NATURAL_SPLINE);
                        bctrl.setNxSample(int(self.mi.getWidth()/bgGridSize) + 1);
                        bctrl.setNySample(int(self.mi.getHeight()/bgGridSize) + 1);
                        backobj = afwMath.makeBackground(self.mi.getImage(), bctrl)
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
230  <a href="#2aa51658">2aa51658</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
227  <a href="#6e52ace2">6e52ace2</a> + </div>
                        img = self.mi.getImage(); img -= backobj.getImageF(); del img
                        #
                        # Remove CRs
                        #
                        crConfig = algorithms.FindCosmicRaysConfig()
                        crs = algorithms.findCosmicRays(self.mi, self.psf, 0, pexConfig.makePolicy(crConfig))
                        #
                        # We do a pretty good job of interpolating, so don't propagagate the convolved CR/INTRP bits
                        # (we'll keep them for the original CR/INTRP pixels)
                        #
                        savedMask = self.mi.getMask().Factory(self.mi.getMask(), True)
                        saveBits = savedMask.getPlaneBitMask("CR") | \
                                   savedMask.getPlaneBitMask("BAD") | \
                                   savedMask.getPlaneBitMask("INTRP") # Bits to not convolve
                        savedMask &= saveBits
                
                        msk = self.mi.getMask(); msk &= ~saveBits; del msk # Clear the saved bits
                        #
                        # Smooth image
                        #
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
251  <a href="#6e085a4f">6e085a4f</a> -         FWHM = 5</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
252  <a href="#b2464af2">b2464af2</a> -         psf = algorithms.DoubleGaussianPsf(15, 15, self.FWHM/(2*sqrt(2*log(2))))</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
248  <a href="#2d3a5fcc">2d3a5fcc</a> +         psf = algorithms.DoubleGaussianPsf(15, 15, self.FWHM/(2*math.sqrt(2*math.log(2))))</div>
              ?                                                                 +++++       +++++
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
254  <a href="#cb64b3f6">cb64b3f6</a> -         cnvImage = self.mi.Factory(self.mi.getBBox(afwImage.PARENT))</div>
              ?                                                    ---------------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
250  <a href="#2d3a5fcc">2d3a5fcc</a> +         cnvImage = self.mi.Factory(self.mi.getBBox())</div>
                        kernel = psf.getKernel()
                        afwMath.convolve(cnvImage, self.mi, kernel, afwMath.ConvolutionControl())
                
                        msk = cnvImage.getMask(); msk |= savedMask; del msk # restore the saved bits
                
                        threshold = afwDetection.Threshold(3, afwDetection.Threshold.STDEV)
                        #
                        # Only search the part of the frame that was PSF-smoothed
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
263  <a href="#6e085a4f">6e085a4f</a> -         #        </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
259  <a href="#6e52ace2">6e52ace2</a> +         #</div>
                        llc = afwGeom.PointI(psf.getKernel().getWidth()/2, psf.getKernel().getHeight()/2)
                        urc = afwGeom.PointI(cnvImage.getWidth() -llc[0] - 1, cnvImage.getHeight() - llc[1] - 1)
                        middle = cnvImage.Factory(cnvImage, afwGeom.BoxI(llc, urc), afwImage.LOCAL)
                        ds = afwDetection.FootprintSet(middle, threshold, "DETECTED")
                        del middle
                        #
                        # Reinstate the saved (e.g. BAD) (and also the DETECTED | EDGE) bits in the unsmoothed image
                        #
                        savedMask <<= cnvImage.getMask()
                        msk = self.mi.getMask(); msk |= savedMask; del msk
                        del savedMask
                
                        if display:
                            ds9.mtv(self.mi, frame = 0)
                            ds9.mtv(cnvImage, frame = 1)
                
                        #
                        # Time to actually measure
                        #
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
283  <a href="#b0d8591f">b0d8591f</a> -         measureSourcesConfig = algorithms.SourceMeasurementConfig()</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
284  <a href="#b0d8591f">b0d8591f</a> -         measureSourcesConfig.load("tests/config/MeasureSources.py")</div>
                        schema = afwTable.SourceTable.makeMinimalSchema()
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
286  <a href="#b0d8591f">b0d8591f</a> -         ms = measureSourcesConfig.makeMeasureSources(schema)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
280  <a href="#6e52ace2">6e52ace2</a> +         sfm_config = measBase.SingleFrameMeasurementConfig()</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
281  <a href="#e9706731">e9706731</a> +         sfm_config.plugins = ["base_SdssCentroid", "base_CircularApertureFlux", "base_PsfFlux",</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
282  <a href="#6e52ace2">6e52ace2</a> +                               "base_SdssShape", "base_GaussianFlux",</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
283  <a href="#6e52ace2">6e52ace2</a> +                               "base_ClassificationExtendedness", "base_PixelFlags"]</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
284  <a href="#6e52ace2">6e52ace2</a> +         sfm_config.slots.centroid = "base_SdssCentroid"</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
285  <a href="#6e52ace2">6e52ace2</a> +         sfm_config.slots.shape = "base_SdssShape"</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
286  <a href="#6e52ace2">6e52ace2</a> +         sfm_config.slots.psfFlux = "base_PsfFlux"</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
287  <a href="#6e52ace2">6e52ace2</a> +         sfm_config.slots.instFlux = None</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
288  <a href="#e9706731">e9706731</a> +         sfm_config.slots.apFlux = "base_CircularApertureFlux_0"</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
289  <a href="#6e52ace2">6e52ace2</a> +         sfm_config.slots.modelFlux = "base_GaussianFlux"</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
290  <a href="#6e52ace2">6e52ace2</a> +         sfm_config.plugins["base_SdssShape"].maxShift = 10.0</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
291  <a href="#e9706731">e9706731</a> +         sfm_config.plugins["base_CircularApertureFlux"].radii = [3.0]</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
292  <a href="#6e52ace2">6e52ace2</a> +         task = measBase.SingleFrameMeasurementTask(schema, config=sfm_config)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
287  <a href="#0fa9ad60">0fa9ad60</a> -         catalog = afwTable.SourceCatalog(schema)</div>
              ?         ^  ----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
293  <a href="#6e52ace2">6e52ace2</a> +         measCat = afwTable.SourceCatalog(schema)</div>
              ?         ^^^^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
294  <a href="#6e52ace2">6e52ace2</a> +         # detect the sources and run with the measurement task</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
288  <a href="#f5b81018">f5b81018</a> -         measureSourcesConfig.slots.calibFlux = None</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
289  <a href="#0fa9ad60">0fa9ad60</a> -         measureSourcesConfig.slots.setupTable(catalog.table)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
290  <a href="#0fa9ad60">0fa9ad60</a> -         ds.makeSources(catalog)</div>
              ?                        ^  ----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
295  <a href="#6e52ace2">6e52ace2</a> +         ds.makeSources(measCat)</div>
              ?                        ^^^^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
296  <a href="#6e52ace2">6e52ace2</a> +         self.exposure.setPsf(self.psf)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
297  <a href="#6e52ace2">6e52ace2</a> +         task.run(measCat, self.exposure)</div>
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
292  <a href="#0fa9ad60">0fa9ad60</a> -         for source in catalog:</div>
              ?                       ^  ----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
299  <a href="#6e52ace2">6e52ace2</a> +         for source in measCat:</div>
              ?                       ^^^^^
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
294  <a href="#b0d8591f">b0d8591f</a> -             # NOTE: this was effectively failing on master, because an exception was being squashed</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
295  <a href="#85ab1211">85ab1211</a> -             ms.applyWithPeak(source, self.exposure) </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
296  <a href="#6e085a4f">6e085a4f</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
297  <a href="#b0d8591f">b0d8591f</a> -             if source.get("flags.pixel.edge"):</div>
              ?                                ^^^^^^^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
301  <a href="#6e52ace2">6e52ace2</a> +             if source.get("base_PixelFlags_flag_edge"):</div>
              ?                            ++++++++++++++++    ^
                                continue
                
                            if display:
                                ds9.dot("+", source.getX() - self.mi.getX0(), source.getY() - self.mi.getY0())
                
                class GaussianPsfTestCase(unittest.TestCase):
                    """A test case detecting and measuring Gaussian PSFs"""
                    def setUp(self):
                        FWHM = 5
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
307  <a href="#b2464af2">b2464af2</a> -         psf = algorithms.DoubleGaussianPsf(15, 15, FWHM/(2*sqrt(2*log(2))))</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
311  <a href="#2d3a5fcc">2d3a5fcc</a> +         psf = algorithms.DoubleGaussianPsf(15, 15, FWHM/(2*math.sqrt(2*math.log(2))))</div>
              ?                                                            +++++       +++++
                        mi = afwImage.MaskedImageF(afwGeom.ExtentI(100, 100))
                
                        self.xc, self.yc, self.flux = 45, 55, 1000.0
                        mi.getImage().set(self.xc, self.yc, self.flux)
                
                        cnvImage = mi.Factory(mi.getDimensions())
                        afwMath.convolve(cnvImage, mi, psf.getKernel(), afwMath.ConvolutionControl())
                
                        self.exp = afwImage.makeExposure(cnvImage)
                        self.exp.setPsf(psf)
                
                        if display and False:
                            ds9.mtv(self.exp)
                
                    def tearDown(self):
                        del self.exp
                
                    def testPsfFlux(self):
                        """Test that fluxes are measured correctly"""
                        #
                        # Total flux in image
                        #
                        flux = afwMath.makeStatistics(self.exp.getMaskedImage(), afwMath.SUM).getValue()
                        self.assertAlmostEqual(flux/self.flux, 1.0)
                
                        #
                        # Various algorithms
                        #
                        rad = 10.0
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
338  <a href="#b0d8591f">b0d8591f</a> -         msConfig = algorithms.SourceMeasurementConfig()</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
339  <a href="#b0d8591f">b0d8591f</a> -         msConfig.algorithms["flux.naive"].radius = rad</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
340  <a href="#fc957a03">fc957a03</a> -         msConfig.algorithms["flux.sinc"].radius2 = rad</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
341  <a href="#b0d8591f">b0d8591f</a> -         msConfig.algorithms.names = ["flux.naive", "flux.psf", "flux.sinc"]</div>
                        schema = afwTable.SourceTable.makeMinimalSchema()
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
343  <a href="#b0d8591f">b0d8591f</a> -         ms = msConfig.makeMeasureSources(schema)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
343  <a href="#6e52ace2">6e52ace2</a> +         schema.addField("centroid_x", type=float)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
344  <a href="#6e52ace2">6e52ace2</a> +         schema.addField("centroid_y", type=float)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
345  <a href="#6e52ace2">6e52ace2</a> +         schema.addField("centroid_flag", type='Flag')</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
346  <a href="#6e52ace2">6e52ace2</a> +         sfm_config = measBase.SingleFrameMeasurementConfig()</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
347  <a href="#6e52ace2">6e52ace2</a> +         sfm_config.doReplaceWithNoise = False</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
348  <a href="#e9706731">e9706731</a> +         sfm_config.plugins = ["base_CircularApertureFlux", "base_PsfFlux"]</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
349  <a href="#6e52ace2">6e52ace2</a> +         sfm_config.slots.centroid = None</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
350  <a href="#6e52ace2">6e52ace2</a> +         sfm_config.slots.shape = None</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
351  <a href="#6e52ace2">6e52ace2</a> +         sfm_config.slots.psfFlux = None</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
352  <a href="#6e52ace2">6e52ace2</a> +         sfm_config.slots.instFlux = None</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
353  <a href="#6e52ace2">6e52ace2</a> +         sfm_config.slots.apFlux = None</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
354  <a href="#6e52ace2">6e52ace2</a> +         sfm_config.slots.modelFlux = None</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
355  <a href="#6e52ace2">6e52ace2</a> +         sfm_config.plugins["base_SdssShape"].maxShift = 10.0</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
356  <a href="#e9706731">e9706731</a> +         sfm_config.plugins["base_CircularApertureFlux"].radii = [rad]</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
357  <a href="#6e52ace2">6e52ace2</a> +         task = measBase.SingleFrameMeasurementTask(schema, config=sfm_config)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
344  <a href="#b0d8591f">b0d8591f</a> -         table = afwTable.SourceTable.make(schema)</div>
              ?          ----                  ^ ^ ^^^^^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
358  <a href="#6e52ace2">6e52ace2</a> +         measCat = afwTable.SourceCatalog(schema)</div>
              ?         ++++++                   ^ ^^ ^^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
345  <a href="#b0d8591f">b0d8591f</a> -         </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
346  <a href="#b0d8591f">b0d8591f</a> -         source = table.makeRecord()</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
347  <a href="#b0d8591f">b0d8591f</a> -         ms.apply(source, self.exp, afwGeom.Point2D(self.xc, self.yc))</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
348  <a href="#b0d8591f">b0d8591f</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
349  <a href="#b0d8591f">b0d8591f</a> -         for control in msConfig.algorithms.apply():</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
359  <a href="#6e52ace2">6e52ace2</a> +         measCat.defineCentroid("centroid")</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
360  <a href="#6e52ace2">6e52ace2</a> +         source = measCat.addNew()</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
361  <a href="#6e52ace2">6e52ace2</a> +         source.set("centroid_x", self.xc)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
362  <a href="#6e52ace2">6e52ace2</a> +         source.set("centroid_y", self.yc)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
363  <a href="#6e52ace2">6e52ace2</a> +         task.run(measCat, self.exp)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
364  <a href="#e9706731">e9706731</a> +         for algName in ["base_CircularApertureFlux_0", "base_PsfFlux"]:</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
350  <a href="#b0d8591f">b0d8591f</a> -             flux = source.get(control.name)</div>
              ?                               ^^^^^^ ^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
365  <a href="#6e52ace2">6e52ace2</a> +             flux = source.get(algName + "_flux")</div>
              ?                               ^ ^^   ++++++++++
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
351  <a href="#b0d8591f">b0d8591f</a> -             flag = source.get(control.name + ".flags")</div>
              ?                               ^^^^^^ ^^       ^    -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
366  <a href="#6e52ace2">6e52ace2</a> +             flag = source.get(algName + "_flag")</div>
              ?                               ^ ^^       ^
                            self.assertEqual(flag, False)
                            self.assertAlmostEqual(flux/self.flux, 1.0, 4, "Measuring with %s: %g v. %g" %
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
354  <a href="#b0d8591f">b0d8591f</a> -                                    (control.name, flux, self.flux))</div>
              ?                                     ^^^^^^ ^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
369  <a href="#6e52ace2">6e52ace2</a> +                                    (algName, flux, self.flux))</div>
              ?                                     ^ ^^
                
                #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                
                def suite():
                    """Returns a suite containing all the test cases in this module."""
                    tests.init()
                
                    suites = []
                    suites += unittest.makeSuite(MeasureTestCase)
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
364  <a href="#46fc5caf">46fc5caf</a> -     if eups.productDir("afwdata"):</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
379  <a href="#21af0bb5">21af0bb5</a> +     try:</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
380  <a href="#21af0bb5">21af0bb5</a> +         lsst.utils.getPackageDir('afwdata')</div>
                        suites += unittest.makeSuite(FindAndMeasureTestCase)
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
366  <a href="#46fc5caf">46fc5caf</a> -     else:</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
382  <a href="#21af0bb5">21af0bb5</a> +     except Exception:</div>
                        print >> sys.stderr, "You must set up afwdata to run the CFHT-based tests"
                    suites += unittest.makeSuite(GaussianPsfTestCase)
                    suites += unittest.makeSuite(tests.MemoryTestCase)
                    return unittest.TestSuite(suites)
                
                def run(exit = False):
                    """Run the tests"""
                    tests.run(suite(), exit)
                
                if __name__ == "__main__":
                    run(True)
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="dbbf5966"/></a>dbbf5966</h3>

<pre>
commit dbbf59667511f3f3a5ba30bc7cb987c6fe3b6486
Author: rhl <rhl@git.lsstcorp.org>
Date:   Mon Feb 2 19:15:42 2009 +0000

    Work on CR code and doxygen fixes; #0
</pre>
<h3><a name="0fa9ad60"/></a>0fa9ad60</h3>

<pre>
commit 0fa9ad6092b97c9cd0e29827d107cfb1b2dd76fc
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Thu Feb 23 12:28:57 2012 -0500

    updated to reflect VectorT->CatalogT name change in afw
</pre>
<h3><a name="3ed252bc"/></a>3ed252bc</h3>

<pre>
commit 3ed252bce79a791c97be264e73e5ef6cb89d14cf
Author: rhl <rhl@git.lsstcorp.org>
Date:   Sat Nov 29 16:25:50 2008 +0000

    Take account of #502; problems with Images with non-trivial origin
</pre>
<h3><a name="6e085a4f"/></a>6e085a4f</h3>

<pre>
commit 6e085a4fa999241c0fdc1ae5172116c171e13b7b
Author: rhl <rhl@git.lsstcorp.org>
Date:   Wed Feb 18 14:21:03 2009 +0000

    Wire the Centroid code into measureSource
</pre>
<h3><a name="b0d8591f"/></a>b0d8591f</h3>

<pre>
commit b0d8591f0e28fd34c95f1548ebda5695e46d2a22
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Mon Feb 20 18:14:44 2012 -0500

    merge from tickets/1843; tests/psf.py is failing, but it appears to be failing on master too
</pre>
<h3><a name="2aa51658"/></a>2aa51658</h3>

<pre>
commit 2aa516587d8f86223f3fb33faf5bb6b39f4d96e7
Author: bick <bick@git.lsstcorp.org>
Date:   Fri Oct 23 14:38:18 2009 +0000

    #819 Extensive changes to clean up code.
</pre>
<h3><a name="be4b736d"/></a>be4b736d</h3>

<pre>
commit be4b736d8c826fbd2a61365d8ea1fd61c9661215
Author: rhl <rhl@git.lsstcorp.org>
Date:   Tue May 18 18:24:29 2010 +0000

    Added {Ap,Psf}FluxErr
</pre>
<h3><a name="cb64b3f6"/></a>cb64b3f6</h3>

<pre>
commit cb64b3f6cdba20367d333ba95852b15521150611
Author: dubcovsky <dubcovsky@git.lsstcorp.org>
Date:   Tue Apr 12 00:17:02 2011 +0000

    #1556 updates to meas_algorithms to match changes in afw. This revision fails tests
</pre>
<h3><a name="1b5e944a"/></a>1b5e944a</h3>

<pre>
commit 1b5e944a79f3452d1cc8e5c8b81bc96d89e9c987
Author: rhl <rhl@git.lsstcorp.org>
Date:   Fri Feb 20 22:39:59 2009 +0000

    Use a class to control measuring sources
</pre>
<h3><a name="85ab1211"/></a>85ab1211</h3>

<pre>
commit 85ab1211e8e50166554d0f5b1b70d95f9849901c
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Thu Jan 31 01:13:07 2013 -0500

    Give source measurement drivers a more uniform and readable API
    
    MeasureSources must now be informed upon creation whether it will be used for forced measurement.
    Renamed apply(source, exposure) to applyWithPeak.
    Renamed apply(...) with references to applyForced.
    All applyXX() methods now support centroid tweak-ups (with different defaults).
    Centroids are tweaked if centroider.name!=None even in forced photometry mode.
    Test code modified to test new centroid-tweaking options; see also #2612.
</pre>
<h3><a name="fc957a03"/></a>fc957a03</h3>

<pre>
commit fc957a03a9dac8727ce257632fe3cc914b96253e
Merge: 0b09dbc b56e248
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Thu Mar 15 16:55:26 2012 -0400

    merge Winter2012d to master
</pre>
<h3><a name="4d375e47"/></a>4d375e47</h3>

<pre>
commit 4d375e471cf0578e6d47b8c4f86d99ad126700df
Author: rhl <rhl@git.lsstcorp.org>
Date:   Fri Nov 28 21:01:14 2008 +0000

    Merged revisions 6510,6514-6532,6551,6554,6573-6574,6578-6579 via svnmerge (#490) from
    svn+ssh://svn.lsstcorp.org/DMS/meas/algorithms/tickets/490
    
    ........
      r6510 | rhl | 2008-11-25 13:50:24 -0500 (Tue, 25 Nov 2008) | 2 lines
    
      Work on ticket #490
    ........
      r6514 | rhl | 2008-11-25 13:56:39 -0500 (Tue, 25 Nov 2008) | 2 lines
    
      #490
    ........
      r6515 | rhl | 2008-11-25 13:56:48 -0500 (Tue, 25 Nov 2008) | 2 lines
    
      #490
    ........
      r6516 | rhl | 2008-11-25 13:56:55 -0500 (Tue, 25 Nov 2008) | 2 lines
    
      #490
    ........
      r6517 | rhl | 2008-11-25 13:57:04 -0500 (Tue, 25 Nov 2008) | 2 lines
    
      #490
    ........
      r6518 | rhl | 2008-11-25 13:58:55 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6519 | rhl | 2008-11-25 13:58:58 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6520 | rhl | 2008-11-25 13:59:02 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6521 | rhl | 2008-11-25 13:59:05 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6522 | rhl | 2008-11-25 14:04:54 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6523 | rhl | 2008-11-25 14:05:08 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6524 | rhl | 2008-11-25 14:05:11 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6525 | rhl | 2008-11-25 14:05:15 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6526 | rhl | 2008-11-25 14:15:43 -0500 (Tue, 25 Nov 2008) | 1 line
    
      Need to be able to import lsst.meas.algorithms
    ........
      r6527 | rhl | 2008-11-25 14:16:21 -0500 (Tue, 25 Nov 2008) | 1 line
    
      Need to be able to import lsst.meas.algorithms
    ........
      r6528 | rhl | 2008-11-25 14:16:28 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6529 | rhl | 2008-11-25 14:22:35 -0500 (Tue, 25 Nov 2008) | 1 line
    
      We didn't really want lsst.detection (but that was where it was in DMS/detection)
    ........
      r6530 | rhl | 2008-11-25 14:30:30 -0500 (Tue, 25 Nov 2008) | 1 line
    
      Needed for .paf files
    ........
      r6531 | rhl | 2008-11-25 14:31:14 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6532 | rhl | 2008-11-25 14:31:17 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6551 | rhl | 2008-11-25 20:01:04 -0500 (Tue, 25 Nov 2008) | 1 line
    
      Got code back to the shape it was in while at detection/trunk
    ........
      r6554 | rhl | 2008-11-25 21:16:17 -0500 (Tue, 25 Nov 2008) | 1 line
    
      Initial version of FootprintFunctor that passes tests (base class needs to move to afw)
    ........
      r6573 | rhl | 2008-11-26 08:19:17 -0500 (Wed, 26 Nov 2008) | 1 line
    
      Improve FootprintFunctor.apply() to be a little more efficient
    ........
      r6574 | rhl | 2008-11-26 09:45:45 -0500 (Wed, 26 Nov 2008) | 1 line
    
      Abolish the Measure object; it didn't make sense as a unit of packaging
    ........
      r6578 | rhl | 2008-11-26 09:58:15 -0500 (Wed, 26 Nov 2008) | 1 line
    
      Moved FootprintFunctor to afw
    ........
      r6579 | rhl | 2008-11-26 11:14:04 -0500 (Wed, 26 Nov 2008) | 1 line
    
      Use FootprintFunctor to remove CRs
    ........
</pre>
<h3><a name="f5b81018"/></a>f5b81018</h3>

<pre>
commit f5b810185e334994c0858ae6b617620d69aca510
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Wed Dec 10 16:34:07 2014 -0500

    Add support for new CalibFlux slot in measurement configuration
    
    By default, we'll use flux.naive for this slot, as that's appropriate for
    large apertures, and it's not being used for anything else.
</pre>
<h3><a name="c5720a8e"/></a>c5720a8e</h3>

<pre>
commit c5720a8ef2c923bc66513bbc602641f7387024d2
Author: dgehrig <dgehrig@git.lsstcorp.org>
Date:   Sun Jul 11 23:51:33 2010 +0000

    adding copyright notices
</pre>
<h3><a name="46fc5caf"/></a>46fc5caf</h3>

<pre>
commit 46fc5caff034e82aa25c1aa6bd301f126d437a5c
Author: rhl <rhl@git.lsstcorp.org>
Date:   Wed Mar 11 22:23:40 2009 +0000

    Misc PSF changes
</pre>
<h3><a name="b2464af2"/></a>b2464af2</h3>

<pre>
commit b2464af205082256fc5636574304ac6473d18c2c
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Tue Mar 19 14:15:41 2013 -0400

    Move KernelPsf, DoubleGaussianPsf, WarpedPsf, and associated tests to meas_algorithms.
    
    Moving Psf classes to meas_algorithms will let us implement shape and aperture
    flux measurements on Psf models using code in meas_algorithms.
</pre>
<h3><a name="a2452e86"/></a>a2452e86</h3>

<pre>
commit a2452e86f1eccc2e929c929edbf1e06b6f44a0fe
Author: bick <bick@git.lsstcorp.org>
Date:   Thu Mar 5 22:53:04 2009 +0000

    Checking in simple aperture and weighted aperture photometry changes for ticket #662.
</pre>
<h3><a name="bc66fd4d"/></a>bc66fd4d</h3>

<pre>
commit bc66fd4d4e659f0b66d6de2c1766f0df47130f6f
Author: rhl <rhl@git.lsstcorp.org>
Date:   Wed Feb 18 21:08:12 2009 +0000

    Gave shape measures a workout, and fixed misc. problems
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="21af0bb5"/></a>21af0bb5</h3>

<pre>
commit 21af0bb557d73ee16cc3a02e547739e1cd6def5d
Author: Joshua Hoblitt <josh@hoblitt.com>
Date:   Tue May 26 15:42:16 2015 -0700

    replace eups.productDir() calls with lsst.utils.getPackageDir()
</pre>
<h3><a name="1b5e944a"/></a>1b5e944a</h3>

<pre>
commit 1b5e944a79f3452d1cc8e5c8b81bc96d89e9c987
Author: rhl <rhl@git.lsstcorp.org>
Date:   Fri Feb 20 22:39:59 2009 +0000

    Use a class to control measuring sources
</pre>
<h3><a name="e9706731"/></a>e9706731</h3>

<pre>
commit e970673179cb0625f6efe5b78be04d6b96ad9f16
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Thu Jan 22 18:15:49 2015 -0500

    Update tests to adapt to removal of NaiveFlux and SincFlux
    
    These have now been replaced by CircularApertureFlux.
</pre>
<h3><a name="6e52ace2"/></a>6e52ace2</h3>

<pre>
commit 6e52ace2e675ee56403e755754fcaf3e14d21541
Author: pgee <pgee@pgeepc2.physics.ucdavis.edu>
Date:   Mon Dec 8 11:08:39 2014 -0800

    DM-1608 move tests which will remain in meas_alg to new meas_base measurement framework.
    
    Also, delete those which were moved in DM-1456
</pre>
<h3><a name="2d3a5fcc"/></a>2d3a5fcc</h3>

<pre>
commit 2d3a5fccae9908251c54deaba743fc34137a65f5
Author: Russell Owen <rowen@uw.edu>
Date:   Thu Sep 11 17:45:03 2014 -0700

    Remove explicit use of image origin = PARENT; use default
</pre>
<h3><a name="bc66fd4d"/></a>bc66fd4d</h3>

<pre>
commit bc66fd4d4e659f0b66d6de2c1766f0df47130f6f
Author: rhl <rhl@git.lsstcorp.org>
Date:   Wed Feb 18 21:08:12 2009 +0000

    Gave shape measures a workout, and fixed misc. problems
</pre>
</div>


[Return to list](#homelist)
# <a name="python/lsst/meas/algorithms/__init__.py"/></a>python/lsst/meas/algorithms/__init__.py
### Diff:

<pre>
                # 
                # LSST Data Management System
                # Copyright 2008, 2009, 2010 LSST Corporation.
                # 
                # This product includes software developed by the
                # LSST Project (http://www.lsst.org/).
                #
                # This program is free software: you can redistribute it and/or modify
                # it under the terms of the GNU General Public License as published by
                # the Free Software Foundation, either version 3 of the License, or
                # (at your option) any later version.
                # 
                # This program is distributed in the hope that it will be useful,
                # but WITHOUT ANY WARRANTY; without even the implied warranty of
                # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                # GNU General Public License for more details.
                # 
                # You should have received a copy of the LSST License Statement and 
                # the GNU General Public License along with this program.  If not, 
                # see <http://www.lsstcorp.org/LegalNotices/>.
                #
                
                from .algorithmsLib import *
                from .defects import *
                from .psfDeterminerRegistry import *
                from .starSelectorRegistry import *
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
27   <a href="#b0d8591f">b0d8591f</a> - from .algorithmRegistry import *</div>
                from .findCosmicRaysConfig import *
                from .detection import *
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
29   <a href="#e11ad0c8">e11ad0c8</a> + from .gaussianPsfFactory import *</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
30   <a href="#dc5cc57e">dc5cc57e</a> + from .loadReferenceObjects import *</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
30   <a href="#b0d8591f">b0d8591f</a> - from .measurement import *</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
31   <a href="#a0cc7ad7">a0cc7ad7</a> - from .replaceWithNoise import *</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
32   <a href="#f9245a0f">f9245a0f</a> - from .measureApCorr import *</div>
                from . import objectSizeStarSelector  # don't need names, just registration
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
34   <a href="#68cffd3b">68cffd3b</a> - from .makeCoaddApCorrMap import *</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
35   <a href="#be203fe2">be203fe2</a> - from .measureCurveOfGrowth import *</div>
                
                from .version import *
                
                import lsst.utils
                
                for name in dict(globals()):
                    if name.endswith("_swigregister"):
                        del globals()[name]
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="f9245a0f"/></a>f9245a0f</h3>

<pre>
commit f9245a0f736b234ba4fbd91e0e42cc6e3fa80dcb
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Fri Jun 20 11:27:22 2014 -0400

    Fixes to aperture correction measurement
</pre>
<h3><a name="a0cc7ad7"/></a>a0cc7ad7</h3>

<pre>
commit a0cc7ad7f236e93b72c7c3bd48b290422a3da456
Author: Dustin Lang <dstn@astro.princeton.edu>
Date:   Wed Jun 6 14:23:36 2012 -0400

    Move noise replacement to a measurement subtask; rename doRemoveOtherSources to doReplaceWithNoise
</pre>
<h3><a name="68cffd3b"/></a>68cffd3b</h3>

<pre>
commit 68cffd3ba98db48a52708a93363eccccf2e40d70
Author: Paul Price <price@astro.princeton.edu>
Date:   Fri Aug 1 17:24:00 2014 -0400

    add makeCoaddApCorrMap to construct an ApCorrMap for a coadd
</pre>
<h3><a name="b0d8591f"/></a>b0d8591f</h3>

<pre>
commit b0d8591f0e28fd34c95f1548ebda5695e46d2a22
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Mon Feb 20 18:14:44 2012 -0500

    merge from tickets/1843; tests/psf.py is failing, but it appears to be failing on master too
</pre>
<h3><a name="be203fe2"/></a>be203fe2</h3>

<pre>
commit be203fe2478db7b48dd20c14ed17676d7d26bb88
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Tue Mar 17 20:07:44 2015 -0400

    Initial commit of curve of growth code
    
    "initial" is to be interpreted sensu latu; this is after Paul's code review at https://hsc-jira.astro.princeton.edu/jira/browse/HSC-1153?focusedCommentId=29540&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-29540
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="e11ad0c8"/></a>e11ad0c8</h3>

<pre>
commit e11ad0c8d0d60b2e556483f24d9d14d4ee21c99c
Author: Russell Owen <rowen@uw.edu>
Date:   Thu Feb 20 17:20:43 2014 -0800

    Add a Gaussian PSF factory that can produce single or double Gaussians
    
    Try a PSF factory
    
    Updated __init__
    
    Updatd to use gaussianPsfFactory
    
    Get rid uf unused analytic PSF registry.
    For the Gaussian PSF factory change units of FWHM from arcsec to pixels.
    
    Add a unit test for GaussianPsfFactory and fix various bugs.
</pre>
<h3><a name="dc5cc57e"/></a>dc5cc57e</h3>

<pre>
commit dc5cc57eb9f18e2cfeb20a02a5c0464aa6aa0325
Author: pgee <pgee@pgeepc2.physics.ucdavis.edu>
Date:   Thu Mar 12 14:34:53 2015 -0700

    DM-420 removed the measurement framework and related files from meas_algorithms
    
    Remove examples, most of which were specifically for meas_algorithms measurement.
    growthcurve.py will be moved to meas_base, keep only measAlgTasks.py
    Delete tests which should be in meas_base.
    Fix tests which remained in meas_algorithms so that they would run with meas_base.
</pre>
</div>


[Return to list](#homelist)
# <a name="doc/doxygen.conf.in"/></a>doc/doxygen.conf.in
### Diff:

<pre>
                EXCLUDE += src/Measure.cc
                EXCLUDE += src/SingleGaussianPsf.cc
                EXCLUDE += src/PcaPsf.cc
                
                EXAMPLE_PATH = examples
                IMAGE_PATH = doc
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
7    <a href="#be203fe2">be203fe2</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
8    <a href="#be203fe2">be203fe2</a> - HTML_EXTRA_FILES = doc/extraFiles/curveOfGrowth.pdf</div>
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="be203fe2"/></a>be203fe2</h3>

<pre>
commit be203fe2478db7b48dd20c14ed17676d7d26bb88
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Tue Mar 17 20:07:44 2015 -0400

    Initial commit of curve of growth code
    
    "initial" is to be interpreted sensu latu; this is after Paul's code review at https://hsc-jira.astro.princeton.edu/jira/browse/HSC-1153?focusedCommentId=29540&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-29540
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
</div>


[Return to list](#homelist)
# <a name="lib/libmeas_algorithms.so-gdb.py"/></a>lib/libmeas_algorithms.so-gdb.py
### Diff:

<pre>
                import os.path, sys
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2    <a href="#21af0bb5">21af0bb5</a> + import lsst.utils</div>
                import gdb
                #
                # Adjust the load path to include lsst.gdb, bypassing the regular lsstimport mechanism as
                # the version of python running within gdb may not be the same as we are using for lsst processing
                #
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
7    <a href="#42f139d8">42f139d8</a> - printerDir = os.path.join(os.environ["MEAS_ALGORITHMS_DIR"], "python", "lsst", "gdb")</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
8    <a href="#21af0bb5">21af0bb5</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
9    <a href="#21af0bb5">21af0bb5</a> + measAlgorithmsDir = lsst.utils.getPackageDir('meas_algorithms')</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
10   <a href="#21af0bb5">21af0bb5</a> + printerDir = os.path.join(measAlgorithmsDir, "python", "lsst", "gdb")</div>
                if printerDir not in sys.path:
                    sys.path.append(printerDir)
                
                import meas.algorithms.printers
                
                meas.algorithms.printers.register(gdb.current_objfile())
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="42f139d8"/></a>42f139d8</h3>

<pre>
commit 42f139d8ac30330848d5431cf89c96836e994e36
Author: rhl <rhl@git.lsstcorp.org>
Date:   Fri Jul 1 19:41:59 2011 +0000

    Started gdb pretty print support
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="21af0bb5"/></a>21af0bb5</h3>

<pre>
commit 21af0bb557d73ee16cc3a02e547739e1cd6def5d
Author: Joshua Hoblitt <josh@hoblitt.com>
Date:   Tue May 26 15:42:16 2015 -0700

    replace eups.productDir() calls with lsst.utils.getPackageDir()
</pre>
</div>


[Return to list](#homelist)
# <a name="src/PcaPsf.cc"/></a>src/PcaPsf.cc
### Diff:

<pre>
                // -*- LSST-C++ -*-
                
                /* 
                 * LSST Data Management System
                 * Copyright 2008, 2009, 2010 LSST Corporation.
                 * 
                 * This product includes software developed by the
                 * LSST Project (http://www.lsst.org/).
                 *
                 * This program is free software: you can redistribute it and/or modify
                 * it under the terms of the GNU General Public License as published by
                 * the Free Software Foundation, either version 3 of the License, or
                 * (at your option) any later version.
                 * 
                 * This program is distributed in the hope that it will be useful,
                 * but WITHOUT ANY WARRANTY; without even the implied warranty of
                 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                 * GNU General Public License for more details.
                 * 
                 * You should have received a copy of the LSST License Statement and 
                 * the GNU General Public License along with this program.  If not, 
                 * see <http://www.lsstcorp.org/LegalNotices/>.
                 */
                 
                /*!
                 * @brief Represent a PSF as a linear combination of PCA (== Karhunen-Loeve) basis functions
                 *
                 * @file
                 *
                 * @ingroup algorithms
                 */
                #include <cmath>
                
                #include "boost/make_shared.hpp"
                
                #include "lsst/base.h"
                #include "lsst/pex/exceptions.h"
                #include "lsst/afw/image/ImageUtils.h"
                #include "lsst/afw/math/Statistics.h"
                #include "lsst/meas/algorithms/PcaPsf.h"
                #include "lsst/afw/formatters/KernelFormatter.h"
                #include "lsst/afw/detection/PsfFormatter.h"
                #include "lsst/meas/algorithms/KernelPsfFactory.h"
                
                namespace afwImage = lsst::afw::image;
                namespace lsst {
                namespace meas {
                namespace algorithms {
                
                PcaPsf::PcaPsf(
                    PTR(afw::math::LinearCombinationKernel) kernel,
                    afw::geom::Point2D const & averagePosition
                ) : KernelPsf(kernel, averagePosition)
                {
                    if (!kernel) {
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
56   <a href="#70955158">70955158</a> -         throw LSST_EXCEPT(lsst::pex::exceptions::InvalidParameterException, "PcaPsf kernel must not be null");</div>
              ?                                                                   ^^^^^^ ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
56   <a href="#ed246562">ed246562</a> +         throw LSST_EXCEPT(lsst::pex::exceptions::InvalidParameterError, "PcaPsf kernel must not be null");</div>
              ?                                                                   ^^ ^
                    }
                }
                
                PTR(afw::math::LinearCombinationKernel const) PcaPsf::getKernel() const {
                    return boost::static_pointer_cast<afw::math::LinearCombinationKernel const>(
                        KernelPsf::getKernel()
                    );
                }
                
                PTR(afw::detection::Psf) PcaPsf::clone() const {
                    return boost::make_shared<PcaPsf>(*this);
                }
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
69   <a href="#9e122a61">9e122a61</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
70   <a href="#7d137b7e">7d137b7e</a> - std::string PcaPsf::getPersistenceName() const { return "PcaPsf"; }</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
71   <a href="#7d137b7e">7d137b7e</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
72   <a href="#7d137b7e">7d137b7e</a> - std::string PcaPsf::getPythonModule() const { return "lsst.meas.algorithms"; }</div>
                
                namespace {
                
                // registration for table persistence
                KernelPsfFactory<PcaPsf,afw::math::LinearCombinationKernel> registration("PcaPsf");
                
                } // anonymous
                
                }}} // namespace lsst::meas::algorithms
                
                namespace lsst { namespace afw { namespace detection {
                
                daf::persistence::FormatterRegistration
                PsfFormatter::pcaPsfRegistration = daf::persistence::FormatterRegistration(
                    "PcaPsf", typeid(meas::algorithms::PcaPsf),
                    lsst::afw::detection::PsfFormatter::createInstance
                );
                
                }}} // namespace lsst::afw::detection
                
                BOOST_CLASS_EXPORT_GUID(lsst::meas::algorithms::PcaPsf, "lsst::meas::algorithms::PcaPsf")
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="70955158"/></a>70955158</h3>

<pre>
commit 70955158635971d0069515ea94d4b4a0405afa3b
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Mon Mar 18 18:58:54 2013 -0400

    Implement getAveragePosition for PcaPsf and CoaddPsf.
    
    Also modified PcaPsf to require LinearCombinationKernel at compile
    time instead of at runtime.
    
    This modified the boost persistence format for PcaPsf, so I took the
    liberty of updating the name, which was only lowercase for backwards
    compatibility (which is now broken anyway).
</pre>
<h3><a name="9e122a61"/></a>9e122a61</h3>

<pre>
commit 9e122a615cc1808eb1fb2ea2a5dbb662247c3ff5
Author: rhl <rhl@git.lsstcorp.org>
Date:   Sat Mar 7 02:06:56 2009 +0000

    Added pcaPSF
</pre>
<h3><a name="7d137b7e"/></a>7d137b7e</h3>

<pre>
commit 7d137b7e4539117419bcd70a7e08cdfe7478442f
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Fri Mar 1 17:00:02 2013 +0900

    Set Python modules appropriately for afw::table::io::Persistables.
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="ed246562"/></a>ed246562</h3>

<pre>
commit ed2465629cb2a0b4fe5aedeb9f447da02cf38736
Author: Russell Owen <rowen@uw.edu>
Date:   Tue Jun 17 16:16:40 2014 -0700

    Renamed exceptions
</pre>
</div>


[Return to list](#homelist)
# <a name="tests/testPsf.h"/></a>tests/testPsf.h
### Diff:

<pre>
                // -*- LSST-C++ -*-
                /*
                 * LSST Data Management System
                 * Copyright 2013 LSST Corporation.
                 *
                 * This product includes software developed by the
                 * LSST Project (http://www.lsst.org/).
                 *
                 * This program is free software: you can redistribute it and/or modify
                 * it under the terms of the GNU General Public License as published by
                 * the Free Software Foundation, either version 3 of the License, or
                 * (at your option) any later version.
                 *
                 * This program is distributed in the hope that it will be useful,
                 * but WITHOUT ANY WARRANTY; without even the implied warranty of
                 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                 * GNU General Public License for more details.
                 *
                 * You should have received a copy of the LSST License Statement and
                 * the GNU General Public License along with this program.  If not,
                 * see <http://www.lsstcorp.org/LegalNotices/>.
                 */
                
                #ifndef LSST_MEAS_ALGORITHMS_TESTS_testPsf_h_INCLUDED
                #define LSST_MEAS_ALGORITHMS_TESTS_testPsf_h_INCLUDED
                
                #include <boost/make_shared.hpp>
                #include "lsst/pex/exceptions.h"
                #include "lsst/afw/math/Kernel.h"
                #include "lsst/afw/geom/Box.h"
                #include "lsst/afw/geom/Point.h"
                #include "lsst/afw/geom/ellipses/Quadrupole.h"
                #include "lsst/afw/image/Color.h"
                #include "lsst/afw/image/Image.h"
                #include "lsst/afw/detection/Psf.h"
                
                namespace test {
                namespace foo {
                namespace bar {
                
                /// A Psf for testing positions involved in calculations
                ///
                /// The TestPsf ensures that all positions on which calculations are based
                /// are within the bounding box of an image.
                class TestPsf : public lsst::afw::detection::Psf
                {
                public:
                    template <typename ImageT>
                    explicit TestPsf(CONST_PTR(ImageT) image, double value=1.0)
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
50   <a href="#223158a0">223158a0</a> -         : lsst::afw::detection::Psf(), _bbox(image->getBBox(lsst::afw::image::PARENT)), _value(value) {}</div>
              ?                                                             ------------------------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
50   <a href="#2d3a5fcc">2d3a5fcc</a> +         : lsst::afw::detection::Psf(), _bbox(image->getBBox()), _value(value) {}</div>
                
                    virtual ~TestPsf() {}
                
                    virtual PTR(lsst::afw::detection::Psf) clone() const {
                        return PTR(TestPsf)(new TestPsf(_bbox, _value));
                    }
                
                    virtual PTR(Image) doComputeImage(lsst::afw::geom::Point2D const& position,
                                                      lsst::afw::image::Color const&) const {
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
60   <a href="#223158a0">223158a0</a> +         assertPosition(position);</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
60   <a href="#b63b580d">b63b580d</a> -         return makeImage(position);</div>
              ?                          --------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
61   <a href="#223158a0">223158a0</a> +         return makeImage();</div>
                    }
                    virtual PTR(Image) doComputeKernelImage(lsst::afw::geom::Point2D const& position,
                                                            lsst::afw::image::Color const&) const {
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
65   <a href="#223158a0">223158a0</a> +         assertPosition(position);</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
64   <a href="#b63b580d">b63b580d</a> -         return makeImage(position);</div>
              ?                          --------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
66   <a href="#223158a0">223158a0</a> +         return makeImage();</div>
                    }
                    virtual double doComputeApertureFlux(double radius,
                                                         lsst::afw::geom::Point2D const& position,
                                                         lsst::afw::image::Color const&) const {
                        assertPosition(position);
                        return _value;
                    }
                    virtual lsst::afw::geom::ellipses::Quadrupole doComputeShape(lsst::afw::geom::Point2D const& position,
                                                                                 lsst::afw::image::Color const&) const {
                        assertPosition(position);
                        return lsst::afw::geom::ellipses::Quadrupole(0, 0, 0);
                    }
                
                protected:
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
81   <a href="#223158a0">223158a0</a> +     PTR(Image) makeImage() const {</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
79   <a href="#b63b580d">b63b580d</a> -     PTR(Image) makeImage(lsst::afw::geom::Point2D const& position) const {</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
80   <a href="#b63b580d">b63b580d</a> -         assertPosition(position);</div>
                        PTR(Image) image = boost::make_shared<Image>(1, 1);
                        *image = _value;
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
83   <a href="#b63b580d">b63b580d</a> -         image->setXY0(lsst::afw::geom::Point2I(position));</div>
                        return image;
                    }
                
                    void assertPosition(lsst::afw::geom::Point2D const& position) const {
                        if (!_bbox.contains(lsst::afw::geom::Point2I(position))) {
                            std::cout << "Position " << position << " outside bbox " << _bbox << std::endl;
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
90   <a href="#223158a0">223158a0</a> -             throw LSST_EXCEPT(lsst::pex::exceptions::InvalidParameterException, "Position outside BBox");</div>
              ?                                                                       ^^^^^^ ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
90   <a href="#ed246562">ed246562</a> +             throw LSST_EXCEPT(lsst::pex::exceptions::InvalidParameterError, "Position outside BBox");</div>
              ?                                                                       ^^ ^
                        }
                    }
                
                    explicit TestPsf(lsst::afw::geom::Box2I const& bbox, double value=1.0) :
                        lsst::afw::detection::Psf(), _bbox(bbox), _value(value) {}
                
                private:
                
                    lsst::afw::geom::Box2I _bbox;        ///< Bounds for PSF
                    double _value;                       ///< Value of PSF
                };
                
                template <typename ImageT>
                PTR(TestPsf) makeTestPsf(CONST_PTR(ImageT) image, double value=1.0) {
                    return boost::make_shared<TestPsf>(image, value);
                }
                
                }}} // namespace test::foo::bar
                
                #endif
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="223158a0"/></a>223158a0</h3>

<pre>
commit 223158a044990a5a1dc369bb022ff9abe7218b37
Author: Paul Price <price@astro.princeton.edu>
Date:   Thu May 16 18:37:26 2013 -0400

    tests: add TestPsf
    
    This is a dummy Psf class that ensures coordinates it is passed are within
    the bounds of the image, as they must be for other Psf classes
    (esp CoaddPsf).
</pre>
<h3><a name="b63b580d"/></a>b63b580d</h3>

<pre>
commit b63b580d78fd92211127101e047dcfe5df82452d
Author: Paul Price <price@astro.princeton.edu>
Date:   Tue May 21 18:41:07 2013 -0400

    TestPsf: set XY0
    
    Just like a regular Psf.
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="223158a0"/></a>223158a0</h3>

<pre>
commit 223158a044990a5a1dc369bb022ff9abe7218b37
Author: Paul Price <price@astro.princeton.edu>
Date:   Thu May 16 18:37:26 2013 -0400

    tests: add TestPsf
    
    This is a dummy Psf class that ensures coordinates it is passed are within
    the bounds of the image, as they must be for other Psf classes
    (esp CoaddPsf).
</pre>
<h3><a name="2d3a5fcc"/></a>2d3a5fcc</h3>

<pre>
commit 2d3a5fccae9908251c54deaba743fc34137a65f5
Author: Russell Owen <rowen@uw.edu>
Date:   Thu Sep 11 17:45:03 2014 -0700

    Remove explicit use of image origin = PARENT; use default
</pre>
<h3><a name="ed246562"/></a>ed246562</h3>

<pre>
commit ed2465629cb2a0b4fe5aedeb9f447da02cf38736
Author: Russell Owen <rowen@uw.edu>
Date:   Tue Jun 17 16:16:40 2014 -0700

    Renamed exceptions
</pre>
</div>


[Return to list](#homelist)
# <a name="src/PsfCandidate.cc"/></a>src/PsfCandidate.cc
### Diff:

<pre>
                // -*- LSST-C++ -*-
                
                /* 
                 * LSST Data Management System
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
5    <a href="#845de94d">845de94d</a> -  * Copyright 2008, 2009, 2010 LSST Corporation.</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
5    <a href="#3a780ce9">3a780ce9</a> +  * Copyright 2008-2015 AURA/LSST.</div>
                 * 
                 * This product includes software developed by the
                 * LSST Project (http://www.lsst.org/).
                 *
                 * This program is free software: you can redistribute it and/or modify
                 * it under the terms of the GNU General Public License as published by
                 * the Free Software Foundation, either version 3 of the License, or
                 * (at your option) any later version.
                 * 
                 * This program is distributed in the hope that it will be useful,
                 * but WITHOUT ANY WARRANTY; without even the implied warranty of
                 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                 * GNU General Public License for more details.
                 * 
                 * You should have received a copy of the LSST License Statement and 
                 * the GNU General Public License along with this program.  If not, 
                 * see <http://www.lsstcorp.org/LegalNotices/>.
                 */
                 
                /*!
                 * @brief Implementation of code to determine spatial model of PSF
                 *
                 * @file
                 *
                 * @ingroup algorithms
                 */
                #include "lsst/afw/detection/Footprint.h"
                #include "lsst/afw/detection/FootprintFunctor.h"
                #include "lsst/afw/geom/Point.h"
                #include "lsst/afw/geom/Extent.h"
                #include "lsst/afw/geom/Box.h"
                #include "lsst/afw/image/ImageAlgorithm.h"
                #include "lsst/afw/math/offsetImage.h"
                #include "lsst/meas/algorithms/PsfCandidate.h"
                
                namespace afwDetection = lsst::afw::detection;
                namespace afwGeom      = lsst::afw::geom;
                namespace afwImage     = lsst::afw::image;
                namespace afwMath      = lsst::afw::math;
                namespace measAlg      = lsst::meas::algorithms;
                
                /************************************************************************************************************/
                /*
                 * PsfCandidate's members
                 */
                template <typename PixelT>
                int measAlg::PsfCandidate<PixelT>::_border = 0;
                template <typename PixelT>
                int measAlg::PsfCandidate<PixelT>::_defaultWidth = 21;
                template <typename PixelT>
                float measAlg::PsfCandidate<PixelT>::_pixelThreshold = 0.0;
                template <typename PixelT>
                bool measAlg::PsfCandidate<PixelT>::_doMaskBlends = true;
                
                /************************************************************************************************************/
                namespace {
                    template<typename T>                // functor used by makeImageFromMask to return inputMask
                    struct noop : public afwImage::pixelOp1<T> {
                        T operator()(T x) const { return x; }
                    };
                
                    template<typename T>                // functor used by makeImageFromMask to return (inputMask & mask)
                    struct andMask : public afwImage::pixelOp1<T> {
                        andMask(T mask) : _mask(mask) {}
                        T operator()(T x) const { return (x & _mask); }
                    private:
                        T _mask;
                    };
                
                    template<typename T>
                    andMask<T> makeAndMask(T val) {
                        return andMask<T>(val);
                    }
                
                    /*
                     * Return an Image initialized from a Mask (possibly modified by func)
                     */
                    template<typename LhsT, typename RhsT>
                    typename afwImage::Image<LhsT>::Ptr
                    makeImageFromMask(afwImage::Mask<RhsT> const& rhs,     ///< mask to process
                                      afwImage::pixelOp1<RhsT> const& func=noop<RhsT>() ///< functor to call
                                     )
                    {
                        typename afwImage::Image<LhsT>::Ptr lhs =
                            boost::make_shared<afwImage::Image<LhsT> >(rhs.getDimensions());
                        lhs->setXY0(rhs.getXY0());
                
                        for (int y = 0; y != lhs->getHeight(); ++y) {
                            typename afwImage::Image<RhsT>::const_x_iterator rhsPtr = rhs.row_begin(y);
                
                            for (typename afwImage::Image<LhsT>::x_iterator lhsPtr = lhs->row_begin(y),
                                     lhsEnd = lhs->row_end(y); lhsPtr != lhsEnd; ++rhsPtr, ++lhsPtr) {
                                *lhsPtr = func(*rhsPtr);
                            }
                        }
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
101  <a href="#845de94d">845de94d</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
101  <a href="#3a780ce9">3a780ce9</a> + </div>
                        return lhs;
                    }
                
                    /// Return square of the distance between a point and a peak
                    double distanceSquared(double x, double y, afwDetection::PeakRecord const& peak) {
                        return std::pow(peak.getIx() - x, 2) + std::pow(peak.getIy() - y, 2);
                    }
                
                    /// Functor to mask pixels in a blended candidate
                    ///
                    /// We mask pixels in the footprint that are closest to a peak other than the central one.
                    /// For these pixels, we activate the "turnOn" bit mask and deactivate the "turnOff" bit mask.
                    template <typename PixelT>
                    class BlendedFunctor : public afwDetection::FootprintFunctor<afwImage::MaskedImage<PixelT> > {
                    public:
                        typedef typename afwImage::MaskedImage<PixelT> Image;
                        typedef typename Image::Mask Mask;
                        typedef typename afwDetection::FootprintFunctor<Image> Super;
                        BlendedFunctor(
                            Image const& image,             ///< Image; unused except for xy0, but required by superclass
                            Mask & mask,                    ///< Mask to modify
                            afwDetection::PeakRecord const& central, ///< Central peak
                            afwDetection::PeakCatalog const& peaks, ///< Other peaks
                            afwImage::MaskPixel turnOff,                   ///< Bit mask to deactivate
                            afwImage::MaskPixel turnOn                     ///< Bit mask to activate
                            ) :
                            Super(image),
                            _central(central),
                            _peaks(peaks),
                            _mask(mask),
                            _turnOff(~turnOff),
                            _turnOn(turnOn)
                            {}
                
                        /// Functor operation to mask pixels closest to a peak other than the central one.
                        virtual void operator()(typename Image::xy_locator loc, int x, int y) {
                            double const central = distanceSquared(x, y, _central);
                            int const xImage = x - getImage().getX0();
                            int const yImage = y - getImage().getY0();
                            for (afwDetection::PeakCatalog::const_iterator iter = _peaks.begin(), end = _peaks.end();
                                 iter != end; ++iter) {
                                double const dist2 = distanceSquared(x, y, *iter);
                                if (dist2 < central) {
                                    (_mask)(xImage, yImage) &= _turnOff;
                                    (_mask)(xImage, yImage) |= _turnOn;
                                    return;
                                }
                            }
                        }
                
                        using Super::getImage;
                
                    private:
                        afwDetection::PeakRecord const& _central;
                        afwDetection::PeakCatalog const& _peaks;
                        Mask & _mask;
                        afwImage::MaskPixel const _turnOff;
                        afwImage::MaskPixel const _turnOn;
                    };
                
                } // anonymous namespace
                
                /// Extract an image of the candidate.
                ///
                /// The MaskedImage is a deep copy of a sub-image of the original image.  No offsets are applied.
                ///
                /// In the mask, the INTRP bit is set and DETECTED unset for any pixels that are not considered part of the
                /// actual candidate.  You should consider that, for the output mask:
                /// * INTRP means "ignore this pixel", i.e., it's contaminated
                /// * DETECTED means "fit this pixel", i.e., it contains the object of interest
                /// * Nothing means "do what you want"
                ///
                /// Three schemes are used for masking pixels:
                /// * Pixels closer to a peak in the source footprint other than the central peak are masked.  This deals with
                ///   sources blended with the actual candidate.
                /// * Sources (identified from the DETECTED bit plane) unconnected to the central peak are masked, and this
                ///   mask is grown.  This deals with bright neighbouring sources.
                /// * Pixels exceeding the pixelThreshold relative to the expected noise according to the variance plane are
                ///   masked if they are not in the central footprint.  This is only applied if the pixelThreshold is
                ///   positive.  This deals with faint neighbouring sources.
                template <typename PixelT>
                PTR(afwImage::MaskedImage<PixelT>)
                measAlg::PsfCandidate<PixelT>::extractImage(
                    unsigned int width,                 // Width of image
                    unsigned int height                 // Height of image
                ) const {
                    afwGeom::Point2I const cen(afwImage::positionToIndex(getXCenter()),
                                               afwImage::positionToIndex(getYCenter()));
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
190  <a href="#83d5d49f">83d5d49f</a> -     afwGeom::Point2I const llc(cen[0] - width/2 - _parentExposure->getX0(), </div>
              ?                                                                            -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
190  <a href="#3a780ce9">3a780ce9</a> +     afwGeom::Point2I const llc(cen[0] - width/2 - _parentExposure->getX0(),</div>
                                               cen[1] - height/2 - _parentExposure->getY0());
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
192  <a href="#8e6973e4">8e6973e4</a> -     </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
192  <a href="#3a780ce9">3a780ce9</a> + </div>
                    afwGeom::BoxI bbox(llc, afwGeom::ExtentI(width, height));
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
194  <a href="#8e6973e4">8e6973e4</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
194  <a href="#3a780ce9">3a780ce9</a> + </div>
                    PTR(MaskedImageT) image;
                    try {
                        MaskedImageT mimg = _parentExposure->getMaskedImage();
                        image.reset(new MaskedImageT(mimg, bbox, afwImage::LOCAL, true)); // a deep copy
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
199  <a href="#8e6973e4">8e6973e4</a> -     } catch(lsst::pex::exceptions::LengthErrorException &e) {</div>
              ?                                               ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
199  <a href="#ed246562">ed246562</a> +     } catch(lsst::pex::exceptions::LengthError &e) {</div>
                        LSST_EXCEPT_ADD(e, "Extracting image of PSF candidate");
                        throw e;
                    }
                
                    //
                    // Set INTRP and unset DETECTED for any pixels we don't want to deal with.
                    //
                    afwImage::MaskPixel const intrp = MaskedImageT::Mask::getPlaneBitMask("INTRP"); // mask bit for bad pixels
                    afwImage::MaskPixel const detected = MaskedImageT::Mask::getPlaneBitMask("DETECTED"); // object pixels
                
                    // Mask out blended objects
                    if (getMaskBlends()) {
                        CONST_PTR(afwDetection::Footprint) foot = getSource()->getFootprint();
                        typedef afwDetection::PeakCatalog PeakCatalog;
                        PeakCatalog const& peaks = foot->getPeaks();
                        if (peaks.size() > 1) {
                            // Mask all pixels in the footprint except for those closest to the central peak
                            double best = std::numeric_limits<double>::infinity();
                            PTR(afwDetection::PeakRecord) central;
                            for (PeakCatalog::const_iterator iter = peaks.begin(), end = peaks.end(); iter != end; ++iter) {
                                double const dist2 = distanceSquared(getXCenter(), getYCenter(), *iter);
                                if (dist2 < best) {
                                    best = dist2;
                                    central = iter;
                                }
                            }
                            assert(central);                // We must have found something
                
                            PeakCatalog others(peaks.getTable());
                            others.reserve(peaks.size() - 1);
                            for (PeakCatalog::const_iterator iter = peaks.begin(), end = peaks.end(); iter != end; ++iter) {
                                PTR(afwDetection::PeakRecord) ptr(iter);
                                if (central != ptr) {
                                    others.push_back(ptr);
                                }
                            }
                
                            BlendedFunctor<PixelT> functor(*image, *image->getMask(), *central, others, detected, intrp);
                            functor.apply(*foot);
                        }
                    }
                
                    /*
                     * Mask any DETECTED pixels other than the one in the center of the object;
                     * we grow the Footprint a bit first
                     */
                    typedef afwDetection::FootprintSet::FootprintList FootprintList;
                
                    PTR(afwImage::Image<int>) mim = makeImageFromMask<int>(*image->getMask(), makeAndMask(detected));
                    PTR(afwDetection::FootprintSet) fs =
                        boost::make_shared<afwDetection::FootprintSet>(*mim, afwDetection::Threshold(1));
                    CONST_PTR(FootprintList) feet = fs->getFootprints();
                
                    if (feet->size() > 1) {
                        int const ngrow = 3;            // number of pixels to grow bad Footprints
                        //
                        // Go through Footprints looking for ones that don't contain cen
                        //
                        for (FootprintList::const_iterator fiter = feet->begin(); fiter != feet->end(); ++fiter) {
                            PTR(afwDetection::Footprint) foot = *fiter;
                            if (foot->contains(cen)) {
                                continue;
                            }
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
263  <a href="#abb7028a">abb7028a</a> -             </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
263  <a href="#3a780ce9">3a780ce9</a> + </div>
                            PTR(afwDetection::Footprint) bigfoot = afwDetection::growFootprint(foot, ngrow);
                            afwDetection::clearMaskFromFootprint(image->getMask().get(), *bigfoot, detected);
                            afwDetection::setMaskFromFootprint(image->getMask().get(), *bigfoot, intrp);
                        }
                    }
                
                    // Mask high pixels unconnected to the center
                    if (_pixelThreshold > 0.0) {
                        CONST_PTR(afwDetection::FootprintSet) fpSet =
                            boost::make_shared<afwDetection::FootprintSet>(*image,
                                afwDetection::Threshold(_pixelThreshold, afwDetection::Threshold::PIXEL_STDEV));
                        for (FootprintList::const_iterator fpIter = fpSet->getFootprints()->begin();
                             fpIter != fpSet->getFootprints()->end(); ++fpIter) {
                            CONST_PTR(afwDetection::Footprint) fp = *fpIter;
                            if (!fp->contains(cen)) {
                                afwDetection::clearMaskFromFootprint(image->getMask().get(), *fp, detected);
                                afwDetection::setMaskFromFootprint(image->getMask().get(), *fp, intrp);
                            }
                        }
                    }
                
                    return image;
                }
                
                
                /**
                 * Return the %image at the position of the Source, without any sub-pixel shifts to put the centre of the
                 * object in the centre of a pixel (for that, use getOffsetImage())
                 *
                 */
                template <typename PixelT>
                CONST_PTR(afwImage::MaskedImage<PixelT>)
                measAlg::PsfCandidate<PixelT>::getMaskedImage(int width, int height) const {
                
                
                    if (_haveImage && (width != _image->getWidth() || height != _image->getHeight())) {
                        _haveImage = false;
                    }
                
                    if (!_haveImage) {
                        _image = extractImage(width, height);
                        _haveImage = true;
                    }
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
307  <a href="#845de94d">845de94d</a> -     </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
307  <a href="#3a780ce9">3a780ce9</a> + </div>
                    return _image;
                }
                
                /**
                 * Return the %image at the position of the Source, without any sub-pixel shifts to put the centre of the
                 * object in the centre of a pixel (for that, use getOffsetImage())
                 *
                 */
                template <typename PixelT>
                CONST_PTR(afwImage::MaskedImage<PixelT>) measAlg::PsfCandidate<PixelT>::getMaskedImage() const {
                
                    int const width = getWidth() == 0 ? _defaultWidth : getWidth();
                    int const height = getHeight() == 0 ? _defaultWidth : getHeight();
                
                    return getMaskedImage(width, height);
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
323  <a href="#025bf414">025bf414</a> -     </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
323  <a href="#3a780ce9">3a780ce9</a> + </div>
                }
                
                /**
                 * @brief Return an offset version of the image of the source.
                 * The returned image has been offset to put the centre of the object in the centre of a pixel.
                 *
                 */
                template <typename PixelT>
                PTR(afwImage::MaskedImage<PixelT>)
                measAlg::PsfCandidate<PixelT>::getOffsetImage(
                    std::string const algorithm,        // Warping algorithm to use
                    unsigned int buffer                 // Buffer for warping
                ) const {
                    unsigned int const width = getWidth() == 0 ? _defaultWidth : getWidth();
                    unsigned int const height = getHeight() == 0 ? _defaultWidth : getHeight();
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
339  <a href="#8e6973e4">8e6973e4</a> -     if (_offsetImage && static_cast<unsigned int>(_offsetImage->getWidth()) == width + 2*buffer && </div>
              ?                                                                                                   -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
339  <a href="#3a780ce9">3a780ce9</a> +     if (_offsetImage && static_cast<unsigned int>(_offsetImage->getWidth()) == width + 2*buffer &&</div>
                        static_cast<unsigned int>(_offsetImage->getHeight()) == height + 2*buffer) {
                        return _offsetImage;
                    }
                
                    PTR(MaskedImageT) image = extractImage(width + 2*buffer, height + 2*buffer);
                
                    double const xcen = getXCenter(), ycen = getYCenter();
                    double const dx = afwImage::positionToIndex(xcen, true).second;
                    double const dy = afwImage::positionToIndex(ycen, true).second;
                
                    PTR(MaskedImageT) offset = afwMath::offsetImage(*image, -dx, -dy, algorithm);
                    afwGeom::Point2I llc(buffer, buffer);
                    afwGeom::Extent2I dims(width, height);
                    afwGeom::Box2I box(llc, dims);
                    _offsetImage.reset(new MaskedImageT(*offset, box, afwImage::LOCAL, true)); // Deep copy
                
                    return _offsetImage;
                }
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
358  <a href="#8e6973e4">8e6973e4</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
359  <a href="#8e6973e4">8e6973e4</a> - </div>
                
                
                /************************************************************************************************************/
                //
                // Explicit instantiations
                //
                /// \cond
                typedef float Pixel;
                //template class measAlg::PsfCandidate<afwImage::MaskedImage<Pixel> >;
                template class measAlg::PsfCandidate<Pixel>;
                /// \endcond
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="845de94d"/></a>845de94d</h3>

<pre>
commit 845de94d153ac790e5e7499785393ea407f4b45a
Author: rowen <rowen@git.lsstcorp.org>
Date:   Mon Feb 14 23:55:49 2011 +0000

    First cut at implementing ticket #1567.
    Includes Python registry for star selectors and another for PSF determiners.
    All existing unit tests pass.
    I also flattened the Python namespace to simplify use.
</pre>
<h3><a name="025bf414"/></a>025bf414</h3>

<pre>
commit 025bf41427f7e13511c8dd5a7fdb87e491671d07
Author: Steven Bickerton <bick@astro.princeton.edu>
Date:   Thu Jan 26 17:14:37 2012 -0600

    more distortion updates
</pre>
<h3><a name="83d5d49f"/></a>83d5d49f</h3>

<pre>
commit 83d5d49f22037b8267639328fd168be558d1b50b
Author: Steven Bickerton <bick@astro.princeton.edu>
Date:   Thu Dec 22 19:18:15 2011 -0500

    changed psfcandidate templating to exposure.
</pre>
<h3><a name="8e6973e4"/></a>8e6973e4</h3>

<pre>
commit 8e6973e41f9a90b14608f38c968b41ced4464397
Author: price <price@git.lsstcorp.org>
Date:   Tue Aug 2 23:28:19 2011 +0000

    Changes to PSF determination to deal with edge effects when kernels are small (because we warp with lsst::afw::math::offsetImage to move the source centers on and off the pixel center).  Added method getOffsetImage() to PsfCandidate to return an image offset so that the source center is on the pixel center; the offset image is appropriately buffered so that we don't suffer edge effects; getImage() and getOffsetImage() both use a new private method, extractImage().  Using this new method when constructing the PcaPsf.  Added function to do the offsetting of the kernels using the extended offsetImage (with buffering).
</pre>
<h3><a name="abb7028a"/></a>abb7028a</h3>

<pre>
commit abb7028a8b5b5c2693a4edb18f202a048722bff6
Author: Paul Price <price@astro.princeton.edu>
Date:   Thu Jun 13 10:26:19 2013 -0400

    PsfCandidate: improve masking of unwanted pixels (#2933)
    
    Sources neighbouring PsfCandidates are one of the principal annoyances in
    PSF determination, as they can use principal components that might
    otherwise be used to model real PSF variation.  We already mask out
    detections within a PsfCandidate that are not connected to the candidate,
    but neighbours can sometimes be close enough for the footprints to overlap.
    Also, there may be sources fainter than the (high) threshold used in the
    first-pass detection lurking within the PsfCandidate, and the current code
    does not deal with them.
    
    Here are two features which help improve the masking:
    1. Pixel masking for blended sources (with more than one peak): mask pixels
    in the footprint that are not closest to the central peak.  This new
    feature is always active, as blends are a clear contaminant.
    2. Pixel masking for external sources: mask pixels above some threshold
    except for pixels in the footprint.  This catches faint sources surrounding
    the candidate.  This feature is not activated by default because it
    requires an accurate variance plane.
    
    With both of these features, I get much better PSF determination on dirty
    HST images (lots of leftover CRs).
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="3a780ce9"/></a>3a780ce9</h3>

<pre>
commit 3a780ce9185410c9c34aa7e65e799cf263a8a488
Author: Lauren MacArthur <lauren@astro.princeton.edu>
Date:   Tue Apr 21 14:25:22 2015 -0400

    Remove whitespace, update copyright
</pre>
<h3><a name="ed246562"/></a>ed246562</h3>

<pre>
commit ed2465629cb2a0b4fe5aedeb9f447da02cf38736
Author: Russell Owen <rowen@uw.edu>
Date:   Tue Jun 17 16:16:40 2014 -0700

    Renamed exceptions
</pre>
</div>


[Return to list](#homelist)
# <a name="src/DoubleGaussianPsf.cc"/></a>src/DoubleGaussianPsf.cc
### Diff:

<pre>
                // -*- LSST-C++ -*-
                /*
                 * LSST Data Management System
                 * Copyright 2008-2013 LSST Corporation.
                 *
                 * This product includes software developed by the
                 * LSST Project (http://www.lsst.org/).
                 *
                 * This program is free software: you can redistribute it and/or modify
                 * it under the terms of the GNU General Public License as published by
                 * the Free Software Foundation, either version 3 of the License, or
                 * (at your option) any later version.
                 *
                 * This program is distributed in the hope that it will be useful,
                 * but WITHOUT ANY WARRANTY; without even the implied warranty of
                 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                 * GNU General Public License for more details.
                 *
                 * You should have received a copy of the LSST License Statement and
                 * the GNU General Public License along with this program.  If not,
                 * see <http://www.lsstcorp.org/LegalNotices/>.
                 */
                
                #include <cmath>
                
                #include "lsst/pex/exceptions.h"
                #include "lsst/afw/math/FunctionLibrary.h"
                #include "lsst/afw/image/ImageUtils.h"
                #include "lsst/afw/table/io/OutputArchive.h"
                #include "lsst/afw/table/io/InputArchive.h"
                #include "lsst/afw/table/io/CatalogVector.h"
                #include "lsst/afw/detection/PsfFormatter.h"
                #include "lsst/meas/algorithms/DoubleGaussianPsf.h"
                
                BOOST_CLASS_EXPORT(lsst::meas::algorithms::DoubleGaussianPsf)
                
                namespace lsst { namespace meas { namespace algorithms {
                
                namespace {
                
                // Read-only singleton struct containing the schema and keys that a double-Gaussian Psf is mapped
                // to in record persistence.
                struct DoubleGaussianPsfPersistenceHelper : private boost::noncopyable {
                    afw::table::Schema schema;
                    afw::table::Key< afw::table::Point<int> > dimensions;
                    afw::table::Key<double> sigma1;
                    afw::table::Key<double> sigma2;
                    afw::table::Key<double> b;
                
                    static DoubleGaussianPsfPersistenceHelper const & get() {
                        static DoubleGaussianPsfPersistenceHelper instance;
                        return instance;
                    }
                
                private:
                    DoubleGaussianPsfPersistenceHelper() :
                        schema(),
                        dimensions(
                            schema.addField< afw::table::Point<int> >("dimensions", "width/height of kernel", "pixels")
                        ),
                        sigma1(schema.addField<double>("sigma1", "radius of inner Gaussian", "pixels")),
                        sigma2(schema.addField<double>("sigma2", "radius of outer Gaussian", "pixels")),
                        b(schema.addField<double>("b", "central amplitude of outer Gaussian (inner amplitude == 1)"))
                    {
                        schema.getCitizen().markPersistent();
                    }
                };
                
                class DoubleGaussianPsfFactory : public afw::table::io::PersistableFactory {
                public:
                
                    virtual PTR(afw::table::io::Persistable)
                    read(InputArchive const & archive, CatalogVector const & catalogs) const {
                        static DoubleGaussianPsfPersistenceHelper const & keys = DoubleGaussianPsfPersistenceHelper::get();
                        LSST_ARCHIVE_ASSERT(catalogs.size() == 1u);
                        LSST_ARCHIVE_ASSERT(catalogs.front().size() == 1u);
                        afw::table::BaseRecord const & record = catalogs.front().front();
                        LSST_ARCHIVE_ASSERT(record.getSchema() == keys.schema);
                        return boost::make_shared<DoubleGaussianPsf>(
                            record.get(keys.dimensions.getX()),
                            record.get(keys.dimensions.getY()),
                            record.get(keys.sigma1),
                            record.get(keys.sigma2),
                            record.get(keys.b)
                        );
                    }
                
                    DoubleGaussianPsfFactory(std::string const & name) : afw::table::io::PersistableFactory(name) {}
                };
                
                // Helper function for ctor: need to construct the kernel to pass to KernelPsf, because we
                // can't change it after construction.
                PTR(afw::math::Kernel) makeDoubleGaussianKernel(
                    int width, int height, double sigma1, double & sigma2, double b
                ) {
                    if (b == 0.0 && sigma2 == 0.0) {
                        sigma2 = 1.0;                  // avoid 0/0 at centre of Psf
                    }
                    if (sigma1 <= 0 || sigma2 <= 0) {
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
100  <a href="#b2464af2">b2464af2</a> -         throw LSST_EXCEPT(lsst::pex::exceptions::DomainErrorException,</div>
              ?                                                             ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
100  <a href="#ed246562">ed246562</a> +         throw LSST_EXCEPT(lsst::pex::exceptions::DomainError,</div>
                                          (boost::format("sigma may not be 0: %g, %g") % sigma1 % sigma2).str());
                    }
                    afw::math::DoubleGaussianFunction2<double> dg(sigma1, sigma2, b);
                    PTR(afw::math::Kernel) kernel(new afw::math::AnalyticKernel(width, height, dg));
                    return kernel;
                }
                
                std::string getDoubleGaussianPsfPersistenceName() { return "DoubleGaussianPsf"; }
                
                DoubleGaussianPsfFactory registration(getDoubleGaussianPsfPersistenceName());
                
                } // anonymous
                
                DoubleGaussianPsf::DoubleGaussianPsf(int width, int height, double sigma1, double sigma2, double b) :
                    KernelPsf(makeDoubleGaussianKernel(width, height, sigma1, sigma2, b)),
                    _sigma1(sigma1), _sigma2(sigma2), _b(b)
                {}
                    
                PTR(afw::detection::Psf) DoubleGaussianPsf::clone() const {
                    return boost::make_shared<DoubleGaussianPsf>(
                        getKernel()->getWidth(),
                        getKernel()->getHeight(),
                        _sigma1, _sigma2, _b
                    );
                }
                
                std::string DoubleGaussianPsf::getPersistenceName() const { return getDoubleGaussianPsfPersistenceName(); }
                
                void DoubleGaussianPsf::write(OutputArchiveHandle & handle) const {
                    static DoubleGaussianPsfPersistenceHelper const & keys = DoubleGaussianPsfPersistenceHelper::get();
                    afw::table::BaseCatalog catalog = handle.makeCatalog(keys.schema);
                    PTR(afw::table::BaseRecord) record = catalog.addNew();
                    (*record).set(keys.dimensions.getX(), getKernel()->getWidth());
                    (*record).set(keys.dimensions.getY(), getKernel()->getHeight());
                    (*record).set(keys.sigma1, getSigma1());
                    (*record).set(keys.sigma2, getSigma2());
                    (*record).set(keys.b, getB());
                    handle.saveCatalog(catalog);
                }
                
                }}} // namespace lsst::meas::algorithms
                
                namespace lsst { namespace afw { namespace detection {
                
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
145  <a href="#9e83767f">9e83767f</a> + ///\cond</div>
                daf::persistence::FormatterRegistration
                PsfFormatter::doubleGaussianPsfRegistration(
                    "DoubleGaussianPsf", typeid(meas::algorithms::DoubleGaussianPsf), createInstance
                );
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
150  <a href="#9e83767f">9e83767f</a> + ///\endcond</div>
                
                }}} // namespace lsst::afw::detection
                
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="b2464af2"/></a>b2464af2</h3>

<pre>
commit b2464af205082256fc5636574304ac6473d18c2c
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Tue Mar 19 14:15:41 2013 -0400

    Move KernelPsf, DoubleGaussianPsf, WarpedPsf, and associated tests to meas_algorithms.
    
    Moving Psf classes to meas_algorithms will let us implement shape and aperture
    flux measurements on Psf models using code in meas_algorithms.
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="9e83767f"/></a>9e83767f</h3>

<pre>
commit 9e83767f39563e2d890d7613fa4d04f6a50126dd
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Fri Jun 27 16:00:58 2014 -0400

    Document SourceDetectionTask and SourceMeasurementTask
    
    Also:
     cleaned up the debugging output a trifle
     made SourceDetectionTask.makeSourceCatalog a mere alias for SourceDetectionTask.run
     suppressed a spurious doxygen warning about PsfFormatter::doubleGaussianPsfRegistration
</pre>
<h3><a name="ed246562"/></a>ed246562</h3>

<pre>
commit ed2465629cb2a0b4fe5aedeb9f447da02cf38736
Author: Russell Owen <rowen@uw.edu>
Date:   Tue Jun 17 16:16:40 2014 -0700

    Renamed exceptions
</pre>
</div>


[Return to list](#homelist)
# <a name="tests/cr.py"/></a>tests/cr.py
### Diff:

<pre>
                #!/usr/bin/env python
                
                # 
                # LSST Data Management System
                # Copyright 2008, 2009, 2010 LSST Corporation.
                # 
                # This product includes software developed by the
                # LSST Project (http://www.lsst.org/).
                #
                # This program is free software: you can redistribute it and/or modify
                # it under the terms of the GNU General Public License as published by
                # the Free Software Foundation, either version 3 of the License, or
                # (at your option) any later version.
                # 
                # This program is distributed in the hope that it will be useful,
                # but WITHOUT ANY WARRANTY; without even the implied warranty of
                # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                # GNU General Public License for more details.
                # 
                # You should have received a copy of the LSST License Statement and 
                # the GNU General Public License along with this program.  If not, 
                # see <http://www.lsstcorp.org/LegalNotices/>.
                #
                
                """
                Tests for cosmic ray detection
                
                Run with:
                   python CR.py
                or
                   python
                   >>> import CR; CR.run()
                """
                
                import pdb                              # we may want to say pdb.set_trace()
                import os
                import sys
                from math import *
                import unittest
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
40   <a href="#4d375e47">4d375e47</a> - import eups</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
40   <a href="#21af0bb5">21af0bb5</a> + import lsst.utils</div>
                import lsst.utils.tests as tests
                import lsst.pex.config as pexConfig
                import lsst.pex.logging as logging
                import lsst.afw.image as afwImage
                import lsst.afw.math as afwMath
                import lsst.afw.geom as afwGeom
                import lsst.afw.detection as afwDetection
                import lsst.afw.display.ds9 as ds9
                import lsst.meas.algorithms as algorithms
                import lsst.meas.algorithms.defects as defects
                
                try:
                    type(verbose)
                except NameError:
                    verbose = 0
                logging.Trace_setVerbosity("algorithms.CR", verbose)
                
                try:
                    type(display)
                except NameError:
                    display = False
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
63   <a href="#2224bad3">2224bad3</a> -     if eups.productDir("afwdata"):</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
63   <a href="#21af0bb5">21af0bb5</a> +     try:</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
64   <a href="#21af0bb5">21af0bb5</a> +         afwdataDir = lsst.utils.getPackageDir('afwdata')</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
64   <a href="#6af8510f">6af8510f</a> -         imageFile0 = os.path.join(eups.productDir("afwdata"), "CFHT", "D4", "cal-53535-i-797722_1.fits")</div>
              ?                                   -----------------       ^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
65   <a href="#21af0bb5">21af0bb5</a> +         imageFile0 = os.path.join(afwdataDir, "CFHT", "D4", "cal-53535-i-797722_1.fits")</div>
              ?                                          ^^^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
65   <a href="#2224bad3">2224bad3</a> -     else:</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
66   <a href="#21af0bb5">21af0bb5</a> +     except Exception:</div>
                        imageFile0 = None
                    imageFile = imageFile0
                
                import lsst.afw.display.ds9 as ds9
                
                #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                
                class CosmicRayTestCase(unittest.TestCase):
                    """A test case for Cosmic Ray detection"""
                    def setUp(self):
                        self.FWHM = 5                   # pixels
                        self.psf = algorithms.DoubleGaussianPsf(29, 29, self.FWHM/(2*sqrt(2*log(2))))
                            
                        self.mi = afwImage.MaskedImageF(imageFile)
                        self.XY0 = afwGeom.PointI(0, 0) # origin of the subimage we use
                
                        if imageFile == imageFile0:
                            if True:                        # use full image, trimmed to data section
                                self.XY0 = afwGeom.PointI(32, 2)
                                self.mi = self.mi.Factory(self.mi, afwGeom.BoxI(self.XY0, afwGeom.PointI(2079, 4609)), afwImage.LOCAL)
                                self.mi.setXY0(afwGeom.PointI(0, 0))
                                self.nCR = 1076                 # number of CRs we should detect
                            else:                               # use sub-image
                                if True:
                                    self.XY0 = afwGeom.PointI(824, 140)
                                    self.nCR = 10
                                else:
                                    self.XY0 = afwGeom.PointI(280, 2750)
                                    self.nCR = 2
                                self.mi = self.mi.Factory(self.mi, afwGeom.BoxI(self.XY0, afwGeom.ExtentI(256, 256), afwImage.LOCAL))
                                self.mi.setXY0(afwGeom.PointI(0, 0))
                        else:
                            self.nCR = None
                
                        self.mi.getMask().addMaskPlane("DETECTED")
                
                    def tearDown(self):
                        del self.mi
                        del self.psf
                
                    def testDetection(self):
                        """Test CR detection"""
                        #
                        # Subtract background
                        #
                        bctrl = afwMath.BackgroundControl(afwMath.Interpolate.NATURAL_SPLINE);
                        bctrl.setNxSample(int(self.mi.getWidth()/256) + 1);
                        bctrl.setNySample(int(self.mi.getHeight()/256) + 1);
                        bctrl.getStatisticsControl().setNumSigmaClip(3.0)  
                        bctrl.getStatisticsControl().setNumIter(2)
                
                        im = self.mi.getImage()
                        try:
                            backobj = afwMath.makeBackground(im, bctrl)
                        except Exception, e:
                            print >> sys.stderr, e,
                
                            bctrl.setInterpStyle(afwMath.Interpolate.CONSTANT)
                            backobj = afwMath.makeBackground(im, bctrl)
                            
                        im -= backobj.getImageF()
                
                        if display:
                            frame = 0
                            ds9.mtv(self.mi, frame = frame, title="Raw") # raw frame
                            if self.mi.getWidth() > 256:
                                ds9.pan(944 - self.mi.getX0(), 260 - self.mi.getY0())
                        #
                        # Mask known bad pixels
                        #
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
137  <a href="#21af0bb5">21af0bb5</a> +         measAlgorithmsDir = lsst.utils.getPackageDir('meas_algorithms')</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
136  <a href="#4d375e47">4d375e47</a> -         badPixels = defects.policyToBadRegionList(os.path.join(os.environ["MEAS_ALGORITHMS_DIR"],</div>
              ?                                                                  ^^^^  -------------------------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
138  <a href="#21af0bb5">21af0bb5</a> +         badPixels = defects.policyToBadRegionList(os.path.join(measAlgorithmsDir,</div>
              ?                                                                +++++++ +++++ ^
                                                                               "policy", "BadPixels.paf"))
                        # did someone lie about the origin of the maskedImage?  If so, adjust bad pixel list
                        if self.XY0.getX() != self.mi.getX0() or self.XY0.getY() != self.mi.getY0():
                            dx = self.XY0.getX() - self.mi.getX0()
                            dy = self.XY0.getY() - self.mi.getY0()
                            for bp in badPixels:
                                bp.shift(-dx, -dy)
                
                        algorithms.interpolateOverDefects(self.mi, self.psf, badPixels)
                
                        stats = afwMath.makeStatistics(self.mi.getImage(), afwMath.MEANCLIP | afwMath.STDEVCLIP)
                        background = stats.getValue(afwMath.MEANCLIP)
                
                        crConfig = algorithms.FindCosmicRaysConfig()
                        crs = algorithms.findCosmicRays(self.mi, self.psf, background, pexConfig.makePolicy(crConfig))
                
                        if display:
                            ds9.mtv(self.mi, frame = frame + 1, title="CRs removed")
                            if self.mi.getWidth() > 256:
                                ds9.pan(944 - self.mi.getX0(), 260 - self.mi.getY0())
                
                        print "Detected %d CRs" % len(crs)
                        if display and False:
                            for cr in crs:
                                bbox = cr.getBBox()
                                bbox.shift(afwGeom.ExtentI(-self.mi.getX0(), -self.mi.getY0()))
                                ds9.line([(bbox.getMinX() - 0.5, bbox.getMinY() - 0.5),
                                          (bbox.getMaxX() + 0.5, bbox.getMinY() - 0.5),
                                          (bbox.getMaxX() + 0.5, bbox.getMaxY() + 0.5),
                                          (bbox.getMinX() - 0.5, bbox.getMaxY() + 0.5),
                                          (bbox.getMinX() - 0.5, bbox.getMinY() - 0.5)], frame = frame + 1)
                
                        if self.nCR is not None:
                            self.assertEqual(len(crs), self.nCR)
                
                class CosmicRayNullTestCase(unittest.TestCase):
                    """A test case for no Cosmic Ray detection"""
                    def setUp(self):
                        self.FWHM = 5                   # pixels
                        self.size = 128
                
                        self.psf = algorithms.DoubleGaussianPsf(29, 29, self.FWHM/(2*sqrt(2*log(2))))
                        self.mi = afwImage.MaskedImageF(128, 128)
                        self.mi.set((0,0,1))
                
                    def tearDown(self):
                        del self.psf
                        del self.mi
                
                    def testDetection(self):
                        crConfig = algorithms.FindCosmicRaysConfig()
                        crs = algorithms.findCosmicRays(self.mi, self.psf, 0.0, pexConfig.makePolicy(crConfig))
                        self.assertEqual(len(crs), 0, "Found %d CRs in empty image" % len(crs))
                        
                
                #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                
                def suite():
                    """Returns a suite containing all the test cases in this module."""
                    tests.init()
                
                    suites = []
                    if imageFile0:
                        suites += unittest.makeSuite(CosmicRayTestCase)
                    else:
                        print >> sys.stderr, "afwdata is not setup; skipping CosmicRayTestCase"
                    suites += unittest.makeSuite(CosmicRayNullTestCase)
                    suites += unittest.makeSuite(tests.MemoryTestCase)
                    return unittest.TestSuite(suites)
                
                
                def run(exit = False):
                    """Run the tests"""
                    tests.run(suite(), exit)
                
                if __name__ == "__main__":
                    run(True)
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="6af8510f"/></a>6af8510f</h3>

<pre>
commit 6af8510feeb3912b023eb1922e90755ffa21653c
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Wed Nov 21 17:24:17 2012 -0500

    update tests to use afwdata MEFs instead of split MaskedImages
</pre>
<h3><a name="4d375e47"/></a>4d375e47</h3>

<pre>
commit 4d375e471cf0578e6d47b8c4f86d99ad126700df
Author: rhl <rhl@git.lsstcorp.org>
Date:   Fri Nov 28 21:01:14 2008 +0000

    Merged revisions 6510,6514-6532,6551,6554,6573-6574,6578-6579 via svnmerge (#490) from
    svn+ssh://svn.lsstcorp.org/DMS/meas/algorithms/tickets/490
    
    ........
      r6510 | rhl | 2008-11-25 13:50:24 -0500 (Tue, 25 Nov 2008) | 2 lines
    
      Work on ticket #490
    ........
      r6514 | rhl | 2008-11-25 13:56:39 -0500 (Tue, 25 Nov 2008) | 2 lines
    
      #490
    ........
      r6515 | rhl | 2008-11-25 13:56:48 -0500 (Tue, 25 Nov 2008) | 2 lines
    
      #490
    ........
      r6516 | rhl | 2008-11-25 13:56:55 -0500 (Tue, 25 Nov 2008) | 2 lines
    
      #490
    ........
      r6517 | rhl | 2008-11-25 13:57:04 -0500 (Tue, 25 Nov 2008) | 2 lines
    
      #490
    ........
      r6518 | rhl | 2008-11-25 13:58:55 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6519 | rhl | 2008-11-25 13:58:58 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6520 | rhl | 2008-11-25 13:59:02 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6521 | rhl | 2008-11-25 13:59:05 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6522 | rhl | 2008-11-25 14:04:54 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6523 | rhl | 2008-11-25 14:05:08 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6524 | rhl | 2008-11-25 14:05:11 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6525 | rhl | 2008-11-25 14:05:15 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6526 | rhl | 2008-11-25 14:15:43 -0500 (Tue, 25 Nov 2008) | 1 line
    
      Need to be able to import lsst.meas.algorithms
    ........
      r6527 | rhl | 2008-11-25 14:16:21 -0500 (Tue, 25 Nov 2008) | 1 line
    
      Need to be able to import lsst.meas.algorithms
    ........
      r6528 | rhl | 2008-11-25 14:16:28 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6529 | rhl | 2008-11-25 14:22:35 -0500 (Tue, 25 Nov 2008) | 1 line
    
      We didn't really want lsst.detection (but that was where it was in DMS/detection)
    ........
      r6530 | rhl | 2008-11-25 14:30:30 -0500 (Tue, 25 Nov 2008) | 1 line
    
      Needed for .paf files
    ........
      r6531 | rhl | 2008-11-25 14:31:14 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6532 | rhl | 2008-11-25 14:31:17 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6551 | rhl | 2008-11-25 20:01:04 -0500 (Tue, 25 Nov 2008) | 1 line
    
      Got code back to the shape it was in while at detection/trunk
    ........
      r6554 | rhl | 2008-11-25 21:16:17 -0500 (Tue, 25 Nov 2008) | 1 line
    
      Initial version of FootprintFunctor that passes tests (base class needs to move to afw)
    ........
      r6573 | rhl | 2008-11-26 08:19:17 -0500 (Wed, 26 Nov 2008) | 1 line
    
      Improve FootprintFunctor.apply() to be a little more efficient
    ........
      r6574 | rhl | 2008-11-26 09:45:45 -0500 (Wed, 26 Nov 2008) | 1 line
    
      Abolish the Measure object; it didn't make sense as a unit of packaging
    ........
      r6578 | rhl | 2008-11-26 09:58:15 -0500 (Wed, 26 Nov 2008) | 1 line
    
      Moved FootprintFunctor to afw
    ........
      r6579 | rhl | 2008-11-26 11:14:04 -0500 (Wed, 26 Nov 2008) | 1 line
    
      Use FootprintFunctor to remove CRs
    ........
</pre>
<h3><a name="2224bad3"/></a>2224bad3</h3>

<pre>
commit 2224bad3aedc655033808876d8d571fec2b1f35f
Author: rhl <rhl@git.lsstcorp.org>
Date:   Fri Dec 11 21:21:46 2009 +0000

    Don't fail if afwdata isn't setup
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="21af0bb5"/></a>21af0bb5</h3>

<pre>
commit 21af0bb557d73ee16cc3a02e547739e1cd6def5d
Author: Joshua Hoblitt <josh@hoblitt.com>
Date:   Tue May 26 15:42:16 2015 -0700

    replace eups.productDir() calls with lsst.utils.getPackageDir()
</pre>
</div>


[Return to list](#homelist)
# <a name="tests/testPsfDetermination.py"/></a>tests/testPsfDetermination.py
### Diff:

<pre>
                #!/usr/bin/env python
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
3    <a href="#c5720a8e">c5720a8e</a> - # </div>
              ?  -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
3    <a href="#6e52ace2">6e52ace2</a> + #</div>
                # LSST Data Management System
                # Copyright 2008, 2009, 2010 LSST Corporation.
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
6    <a href="#c5720a8e">c5720a8e</a> - # </div>
              ?  -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
6    <a href="#6e52ace2">6e52ace2</a> + #</div>
                # This product includes software developed by the
                # LSST Project (http://www.lsst.org/).
                #
                # This program is free software: you can redistribute it and/or modify
                # it under the terms of the GNU General Public License as published by
                # the Free Software Foundation, either version 3 of the License, or
                # (at your option) any later version.
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
14   <a href="#c5720a8e">c5720a8e</a> - # </div>
              ?  -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
14   <a href="#6e52ace2">6e52ace2</a> + #</div>
                # This program is distributed in the hope that it will be useful,
                # but WITHOUT ANY WARRANTY; without even the implied warranty of
                # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                # GNU General Public License for more details.
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
19   <a href="#c5720a8e">c5720a8e</a> - # </div>
              ?  -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
19   <a href="#6e52ace2">6e52ace2</a> + #</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
20   <a href="#c5720a8e">c5720a8e</a> - # You should have received a copy of the LSST License Statement and </div>
              ?                                                                    -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
20   <a href="#6e52ace2">6e52ace2</a> + # You should have received a copy of the LSST License Statement and</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
21   <a href="#c5720a8e">c5720a8e</a> - # the GNU General Public License along with this program.  If not, </div>
              ?                                                                   -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
21   <a href="#6e52ace2">6e52ace2</a> + # the GNU General Public License along with this program.  If not,</div>
                # see <http://www.lsstcorp.org/LegalNotices/>.
                #
                
                """
                Tests for PSF code
                
                Run with:
                   python psf.py
                or
                   python
                   >>> import psf; psf.run()
                """
                
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
35   <a href="#0332997a">0332997a</a> + import math</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
35   <a href="#5d7608d9">5d7608d9</a> - import os, sys</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
36   <a href="#12444e00">12444e00</a> - from math import *</div>
                import numpy
                import unittest
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
39   <a href="#12444e00">12444e00</a> - import eups</div>
                import lsst.utils.tests as utilsTests
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
41   <a href="#c48442b8">c48442b8</a> - import lsst.pex.exceptions as pexExceptions</div>
                import lsst.pex.logging as logging
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
43   <a href="#2f3f343d">2f3f343d</a> - import lsst.pex.policy as pexPolicy</div>
                import lsst.afw.image as afwImage
                import lsst.afw.detection as afwDetection
                import lsst.afw.geom as afwGeom
                import lsst.afw.math as afwMath
                import lsst.afw.table as afwTable
                import lsst.afw.display.ds9 as ds9
                import lsst.daf.base as dafBase
                import lsst.afw.display.utils as displayUtils
                import lsst.meas.algorithms as measAlg
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
53   <a href="#12444e00">12444e00</a> - import lsst.meas.algorithms.defects as defects</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
54   <a href="#0f78cb59">0f78cb59</a> - import lsst.meas.algorithms.utils as maUtils</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
55   <a href="#23486076">23486076</a> - import lsst.afw.cameraGeom as cameraGeom</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
49   <a href="#6e52ace2">6e52ace2</a> + import lsst.meas.base as measBase</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
50   <a href="#0332997a">0332997a</a> + from lsst.afw.cameraGeom.testUtils import DetectorWrapper</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
51   <a href="#0332997a">0332997a</a> + </div>
                
                try:
                    type(verbose)
                except NameError:
                    verbose = 0
                    logging.Trace.setVerbosity("meas.algorithms.Interp", verbose)
                    logging.Trace.setVerbosity("afw.detection.Psf", verbose)
                    display = False
                
                #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                
                def psfVal(ix, iy, x, y, sigma1, sigma2, b):
                    """Return the value at (ix, iy) of a double Gaussian
                       (N(0, sigma1^2) + b*N(0, sigma2^2))/(1 + b)
                    centered at (x, y)
                    """
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
72   <a href="#2cd72006">2cd72006</a> -     return (exp(-0.5*((ix - x)**2 + (iy - y)**2)/sigma1**2) +</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
68   <a href="#0332997a">0332997a</a> +     return (math.exp        (-0.5*((ix - x)**2 + (iy - y)**2)/sigma1**2) +</div>
              ?             +++++   ++++++++
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
73   <a href="#8133f031">8133f031</a> -             b*exp(-0.5*((ix - x)**2 + (iy - y)**2)/sigma2**2))/(1 + b)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
69   <a href="#0332997a">0332997a</a> +             b*math.exp        (-0.5*((ix - x)**2 + (iy - y)**2)/sigma2**2))/(1 + b)</div>
              ?               +++++   ++++++++
                
                class SpatialModelPsfTestCase(unittest.TestCase):
                    """A test case for SpatialModelPsf"""
                
                    @staticmethod
                    def measure(footprintSet, exposure):
                        """Measure a set of Footprints, returning a SourceCatalog"""
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
77   <a href="#6e52ace2">6e52ace2</a> +         schema = afwTable.SourceTable.makeMinimalSchema()</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
81   <a href="#b0d8591f">b0d8591f</a> -         config = measAlg.SourceMeasurementConfig()</div>
              ?                      ^^^  ^^ ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
78   <a href="#6e52ace2">6e52ace2</a> +         config = measBase.SingleFrameMeasurementConfig()</div>
              ?                      ^^^^  ^^^^^^ ^^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
82   <a href="#8133f031">8133f031</a> -         config.algorithms.names = ["flags.pixel", "flux.psf", "flux.naive", "flux.gaussian", "shape.sdss"]</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
83   <a href="#b0d8591f">b0d8591f</a> -         config.centroider.name = "centroid.sdss"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
84   <a href="#b0d8591f">b0d8591f</a> -         config.algorithms["flux.naive"].radius = 3.0</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
79   <a href="#6e52ace2">6e52ace2</a> +         config.algorithms.names = ["base_PixelFlags",</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
80   <a href="#6e52ace2">6e52ace2</a> +                  "base_SdssCentroid",</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
81   <a href="#6e52ace2">6e52ace2</a> +                  "base_GaussianFlux",</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
82   <a href="#6e52ace2">6e52ace2</a> +                  "base_SdssShape",</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
83   <a href="#e9706731">e9706731</a> +                  "base_CircularApertureFlux",</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
84   <a href="#6e52ace2">6e52ace2</a> +                  "base_PsfFlux",</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
85   <a href="#6e52ace2">6e52ace2</a> +                  ]</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
86   <a href="#e9706731">e9706731</a> +         config.algorithms["base_CircularApertureFlux"].radii = [3.0]</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
85   <a href="#b0d8591f">b0d8591f</a> -         config.slots.centroid = "centroid.sdss"</div>
              ?                                  ^       -----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
87   <a href="#6e52ace2">6e52ace2</a> +         config.slots.centroid = "base_SdssCentroid"</div>
              ?                                  ^^^^^^^^^^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
86   <a href="#b0d8591f">b0d8591f</a> -         config.slots.psfFlux = "flux.psf"</div>
              ?                                     ----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
88   <a href="#6e52ace2">6e52ace2</a> +         config.slots.psfFlux = "base_PsfFlux"</div>
              ?                                 +++++++ +
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
87   <a href="#b0d8591f">b0d8591f</a> -         config.slots.apFlux = "flux.naive"</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
89   <a href="#e9706731">e9706731</a> +         config.slots.apFlux = "base_CircularApertureFlux_0"</div>
                        config.slots.modelFlux = None
                        config.slots.instFlux = None
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
90   <a href="#f5b81018">f5b81018</a> -         config.slots.calibFlux = None</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
91   <a href="#b0d8591f">b0d8591f</a> -         config.slots.shape = "shape.sdss"</div>
              ?                                    -----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
92   <a href="#6e52ace2">6e52ace2</a> +         config.slots.shape = "base_SdssShape"</div>
              ?                               ++ +++++++
                
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
94   <a href="#6e52ace2">6e52ace2</a> +         task = measBase.SingleFrameMeasurementTask(schema, config=config)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
93   <a href="#b0d8591f">b0d8591f</a> -         schema = afwTable.SourceTable.makeMinimalSchema()</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
94   <a href="#b0d8591f">b0d8591f</a> -         measureSources = config.makeMeasureSources(schema)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
95   <a href="#0fa9ad60">0fa9ad60</a> -         catalog = afwTable.SourceCatalog(schema)</div>
              ?         --   ^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
95   <a href="#6e52ace2">6e52ace2</a> +         table = afwTable.SourceCatalog(schema)</div>
              ?           + ^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
96   <a href="#0fa9ad60">0fa9ad60</a> -         config.slots.setupTable(catalog.table)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
96   <a href="#6e52ace2">6e52ace2</a> +         footprintSet.makeSources(table)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
97   <a href="#6e52ace2">6e52ace2</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
98   <a href="#6e52ace2">6e52ace2</a> +         # Then run the default SFM task.  Results not checked</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
99   <a href="#6e52ace2">6e52ace2</a> +         task.run(table, exposure)</div>
                
                        if display:
                            ds9.mtv(exposure)
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
101  <a href="#0fa9ad60">0fa9ad60</a> -         footprintSet.makeSources(catalog)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
102  <a href="#3831a07c">3831a07c</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
103  <a href="#0fa9ad60">0fa9ad60</a> -         for i, source in enumerate(catalog):</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
104  <a href="#85ab1211">85ab1211</a> -             measureSources.applyWithPeak(source, exposure)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
105  <a href="#3831a07c">3831a07c</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
106  <a href="#0fa9ad60">0fa9ad60</a> -         return catalog</div>
              ?                --   ^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
104  <a href="#6e52ace2">6e52ace2</a> +         return table</div>
              ?                  + ^
                
                    def setUp(self):
                        width, height = 110, 301
                
                        self.mi = afwImage.MaskedImageF(afwGeom.ExtentI(width, height))
                        self.mi.set(0)
                        sd = 3                          # standard deviation of image
                        self.mi.getVariance().set(sd*sd)
                        self.mi.getMask().addMaskPlane("DETECTED")
                
                        self.FWHM = 5
                        self.ksize = 31                      # size of desired kernel
                
                        sigma1 = 1.75
                        sigma2 = 2*sigma1
                
                        self.exposure = afwImage.makeExposure(self.mi)
                        self.exposure.setPsf(measAlg.DoubleGaussianPsf(self.ksize, self.ksize,
                                                                    1.5*sigma1, 1, 0.1))
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
124  <a href="#0332997a">0332997a</a> +         self.exposure.setDetector(DetectorWrapper().detector)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
125  <a href="#6e52ace2">6e52ace2</a> + </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
126  <a href="#23486076">23486076</a> -         self.exposure.setDetector(cameraGeom.Detector(cameraGeom.Id(1), False, 1.0))</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
127  <a href="#24f6b19a">24f6b19a</a> -         self.exposure.getDetector().setDistortion(None) #cameraGeom.NullDistortion())</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
128  <a href="#23486076">23486076</a> -         </div>
                        #
                        # Make a kernel with the exactly correct basis functions.  Useful for debugging
                        #
                        basisKernelList = afwMath.KernelList()
                        for sigma in (sigma1, sigma2):
                            basisKernel = afwMath.AnalyticKernel(self.ksize, self.ksize,
                                                                 afwMath.GaussianFunction2D(sigma, sigma))
                            basisImage = afwImage.ImageD(basisKernel.getDimensions())
                            basisKernel.computeImage(basisImage, True)
                            basisImage /= numpy.sum(basisImage.getArray())
                
                            if sigma == sigma1:
                                basisImage0 = basisImage
                            else:
                                basisImage -= basisImage0
                
                            basisKernelList.append(afwMath.FixedKernel(basisImage))
                
                        order = 1                                # 1 => up to linear
                        spFunc = afwMath.PolynomialFunction2D(order)
                
                        exactKernel = afwMath.LinearCombinationKernel(basisKernelList, spFunc)
                        exactKernel.setSpatialParameters([[1.0, 0,          0],
                                                          [0.0, 0.5*1e-2, 0.2e-2]])
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
153  <a href="#0eb369b5">0eb369b5</a> -         self.exactPsf = measAlg.PcaPsf(exactKernel)        </div>
              ?                                                    --------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
150  <a href="#6e52ace2">6e52ace2</a> +         self.exactPsf = measAlg.PcaPsf(exactKernel)</div>
                
                        rand = afwMath.Random()               # make these tests repeatable by setting seed
                
                        addNoise = True
                
                        if addNoise:
                            im = self.mi.getImage()
                            afwMath.randomGaussianImage(im, rand) # N(0, 1)
                            im *= sd                              # N(0, sd^2)
                            del im
                
                        xarr, yarr = [], []
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
167  <a href="#e38be0fc">e38be0fc</a> -         for x, y in [(20, 20), (60, 20), </div>
              ?                                         -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
164  <a href="#6e52ace2">6e52ace2</a> +         for x, y in [(20, 20), (60, 20),</div>
                                     (30, 35),
                                     (50, 50),
                                     (20, 90), (70, 160), (25, 265), (75, 275), (85, 30),
                                     (50, 120), (70, 80),
                                     (60, 210), (20, 210),
                                     ]:
                            xarr.append(x)
                            yarr.append(y)
                
                        for x, y in zip(xarr, yarr):
                            dx = rand.uniform() - 0.5   # random (centered) offsets
                            dy = rand.uniform() - 0.5
                
                            k = exactKernel.getSpatialFunction(1)(x, y) # functional variation of Kernel ...
                            b = (k*sigma1**2/((1 - k)*sigma2**2))       # ... converted double Gaussian's "b"
                
                            #flux = 80000 - 20*x - 10*(y/float(height))**2
                            flux = 80000*(1 + 0.1*(rand.uniform() - 0.5))
                            I0 = flux*(1 + b)/(2*numpy.pi*(sigma1**2 + b*sigma2**2))
                            for iy in range(y - self.ksize//2, y + self.ksize//2 + 1):
                                if iy < 0 or iy >= self.mi.getHeight():
                                    continue
                
                                for ix in range(x - self.ksize//2, x + self.ksize//2 + 1):
                                    if ix < 0 or ix >= self.mi.getWidth():
                                        continue
                
                                    I = I0*psfVal(ix, iy, x + dx, y + dy, sigma1, sigma2, b)
                                    Isample = rand.poisson(I) if addNoise else I
                                    self.mi.getImage().set(ix, iy, self.mi.getImage().get(ix, iy) + Isample)
                                    self.mi.getVariance().set(ix, iy, self.mi.getVariance().get(ix, iy) + I)
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
199  <a href="#e38be0fc">e38be0fc</a> -         # </div>
              ?          -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
196  <a href="#6e52ace2">6e52ace2</a> +         #</div>
                        bbox = afwGeom.BoxI(afwGeom.PointI(0,0), afwGeom.ExtentI(width, height))
                        self.cellSet = afwMath.SpatialCellSet(bbox, 100)
                
                        self.footprintSet = afwDetection.FootprintSet(self.mi, afwDetection.Threshold(100), "DETECTED")
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
204  <a href="#b0d8591f">b0d8591f</a> - </div>
                        self.catalog = SpatialModelPsfTestCase.measure(self.footprintSet, self.exposure)
                
                        for source in self.catalog:
                            try:
                                cand = measAlg.makePsfCandidate(source, self.exposure)
                                self.cellSet.insertCandidate(cand)
                
                            except Exception, e:
                                print e
                                continue
                
                    def tearDown(self):
                        del self.cellSet
                        del self.exposure
                        del self.mi
                        del self.exactPsf
                        del self.footprintSet
                        del self.catalog
                
                    @staticmethod
                    def setupDeterminer(exposure, nEigenComponents=3, starSelectorAlg="secondMoment"):
                        """Setup the starSelector and psfDeterminer"""
                        starSelectorFactory = measAlg.starSelectorRegistry[starSelectorAlg]
                        starSelectorConfig = starSelectorFactory.ConfigClass()
                
                        if starSelectorAlg == "secondMoment":
                            starSelectorConfig.clumpNSigma = 5.0
                            starSelectorConfig.histSize = 14
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
233  <a href="#f12d3829">f12d3829</a> -             starSelectorConfig.badFlags = ["flags.pixel.edge",</div>
              ?                                                 ^^^^^^^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
229  <a href="#6e52ace2">6e52ace2</a> +             starSelectorConfig.badFlags = ["base_PixelFlags_flag_edge",</div>
              ?                                             ++++++++++++++++    ^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
234  <a href="#f12d3829">f12d3829</a> -                                            "flags.pixel.interpolated.center",</div>
              ?                                                 ^^^^^^^^            ^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
230  <a href="#6e52ace2">6e52ace2</a> +                                            "base_PixelFlags_flag_interpolatedCenter",</div>
              ?                                             ++++++++++++++++    ^            ^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
235  <a href="#f12d3829">f12d3829</a> -                                            "flags.pixel.saturated.center",</div>
              ?                                                 ^^^^^^^^         ^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
231  <a href="#6e52ace2">6e52ace2</a> +                                            "base_PixelFlags_flag_saturatedCenter",</div>
              ?                                             ++++++++++++++++    ^         ^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
236  <a href="#f12d3829">f12d3829</a> -                                            "flags.pixel.cr.center",</div>
              ?                                                 ^^^^^^^^  ^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
232  <a href="#6e52ace2">6e52ace2</a> +                                            "base_PixelFlags_flag_crCenter",</div>
              ?                                             ++++++++++++++++    ^  ^
                                                           ]
                        elif starSelectorAlg == "objectSize":
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
239  <a href="#667181e6">667181e6</a> -             starSelectorConfig.sourceFluxField = "flux.gaussian"</div>
              ?                                                   ^^^^^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
235  <a href="#6e52ace2">6e52ace2</a> +             starSelectorConfig.sourceFluxField = "base_GaussianFlux_flux"</div>
              ?                                                   ^^^^^^       +++++++++
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
240  <a href="#667181e6">667181e6</a> -             starSelectorConfig.badFlags = ["flags.pixel.edge",</div>
              ?                                                 ^^^^^^^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
236  <a href="#6e52ace2">6e52ace2</a> +             starSelectorConfig.badFlags = ["base_PixelFlags_flag_edge",</div>
              ?                                             ++++++++++++++++    ^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
241  <a href="#667181e6">667181e6</a> -                                            "flags.pixel.interpolated.center",</div>
              ?                                                 ^^^^^^^^            ^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
237  <a href="#6e52ace2">6e52ace2</a> +                                            "base_PixelFlags_flag_interpolatedCenter",</div>
              ?                                             ++++++++++++++++    ^            ^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
242  <a href="#667181e6">667181e6</a> -                                            "flags.pixel.saturated.center",</div>
              ?                                                 ^^^^^^^^         ^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
238  <a href="#6e52ace2">6e52ace2</a> +                                            "base_PixelFlags_flag_saturatedCenter",</div>
              ?                                             ++++++++++++++++    ^         ^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
243  <a href="#667181e6">667181e6</a> -                                            "flags.pixel.cr.center",</div>
              ?                                                 ^^^^^^^^  ^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
239  <a href="#6e52ace2">6e52ace2</a> +                                            "base_PixelFlags_flag_crCenter",</div>
              ?                                             ++++++++++++++++    ^  ^
                                                           ]
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
241  <a href="#6e52ace2">6e52ace2</a> + </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
245  <a href="#e73c5e44">e73c5e44</a> -             starSelectorConfig.widthStdAllowed = 0.5</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
246  <a href="#667181e6">667181e6</a> -             </div>
                        starSelector = starSelectorFactory(starSelectorConfig)
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
248  <a href="#2f3f343d">2f3f343d</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
243  <a href="#6e52ace2">6e52ace2</a> + </div>
                        psfDeterminerFactory = measAlg.psfDeterminerRegistry["pca"]
                        psfDeterminerConfig = psfDeterminerFactory.ConfigClass()
                        width, height = exposure.getMaskedImage().getDimensions()
                        psfDeterminerConfig.sizeCellX = width
                        psfDeterminerConfig.sizeCellY = height//3
                        psfDeterminerConfig.nEigenComponents = nEigenComponents
                        psfDeterminerConfig.spatialOrder = 1
                        psfDeterminerConfig.kernelSizeMin = 31
                        psfDeterminerConfig.nStarPerCell = 0
                        psfDeterminerConfig.nStarPerCellSpatialFit = 0 # unlimited
                        psfDeterminer = psfDeterminerFactory(psfDeterminerConfig)
                
                        return starSelector, psfDeterminer
                
                
                    def subtractStars(self, exposure, catalog, chi_lim=-1):
                        """Subtract the exposure's PSF from all the sources in catalog"""
                        mi, psf = exposure.getMaskedImage(), exposure.getPsf()
                
                        subtracted =  mi.Factory(mi, True)
                
                        for s in catalog:
                            xc, yc = s.getX(), s.getY()
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
272  <a href="#c59f5c09">c59f5c09</a> -             bbox = subtracted.getBBox(afwImage.PARENT)</div>
              ?                                       ---------------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
267  <a href="#2d3a5fcc">2d3a5fcc</a> +             bbox = subtracted.getBBox()</div>
                            if bbox.contains(afwGeom.PointI(int(xc), int(yc))):
                                try:
                                    measAlg.subtractPsf(psf, subtracted, xc, yc)
                                except:
                                    pass
                
                        chi = subtracted.Factory(subtracted, True)
                        var = subtracted.getVariance()
                        numpy.sqrt(var.getArray(), var.getArray()) # inplace sqrt
                        chi /= var
                
                        if display:
                            ds9.mtv(subtracted, title="Subtracted", frame=1)
                            ds9.mtv(chi, title="Chi", frame=2)
                            ds9.mtv(psf.computeImage(afwGeom.Point2D(xc, yc)), title="Psf", frame=3)
                            ds9.mtv(mi, frame=4, title="orig")
                            kern = psf.getKernel()
                            kimg = afwImage.ImageD(kern.getWidth(), kern.getHeight())
                            kern.computeImage(kimg, True, xc, yc)
                            ds9.mtv(kimg, title="kernel", frame=5)
                
                        chi_min, chi_max = numpy.min(chi.getImage().getArray()),  numpy.max(chi.getImage().getArray())
                        if False:
                            print chi_min, chi_max
                
                        if chi_lim > 0:
                            self.assertGreater(chi_min, -chi_lim)
                            self.assertLess(   chi_max,  chi_lim)
                
                    def testPsfDeterminer(self):
                        """Test the (PCA) psfDeterminer"""
                
                        for starSelectorAlg in ["secondMoment",
                                                "objectSize",
                                                ]:
                            print "Using %s star selector" % (starSelectorAlg)
                
                            starSelector, psfDeterminer = \
                                SpatialModelPsfTestCase.setupDeterminer(self.exposure,
                                                                        nEigenComponents=2, starSelectorAlg=starSelectorAlg)
                            metadata = dafBase.PropertyList()
                            psfCandidateList = starSelector.selectStars(self.exposure, self.catalog)
                            psf, cellSet = psfDeterminer.determinePsf(self.exposure, psfCandidateList, metadata)
                            self.exposure.setPsf(psf)
                
                            chi_lim = 5.0
                            self.subtractStars(self.exposure, self.catalog, chi_lim)
                
                    def testPsfDeterminerSubimage(self):
                        """Test the (PCA) psfDeterminer on subImages"""
                
                        w, h = self.exposure.getDimensions()
                        x0, y0 = int(0.35*w), int(0.45*h)
                        bbox = afwGeom.BoxI(afwGeom.PointI(x0, y0), afwGeom.ExtentI(w - x0, h - y0))
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
327  <a href="#c59f5c09">c59f5c09</a> -         subExp = self.exposure.Factory(self.exposure, bbox)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
322  <a href="#503e6741">503e6741</a> +         subExp = self.exposure.Factory(self.exposure, bbox, afwImage.LOCAL)</div>
              ?                                                           ++++++++++++++++
                
                        starSelector, psfDeterminer = \
                            SpatialModelPsfTestCase.setupDeterminer(subExp, nEigenComponents=2,
                                                                    starSelectorAlg="objectSize")
                        metadata = dafBase.PropertyList()
                        #
                        # Only keep the sources that lie within the subregion (avoiding lots of log messages)
                        #
                        def trimCatalogToImage(exp, catalog):
                            trimmedCatalog = afwTable.SourceCatalog(catalog.table.clone())
                            for s in catalog:
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
339  <a href="#667181e6">667181e6</a> -                 if exp.getBBox(afwImage.PARENT).contains(afwGeom.PointI(s.getCentroid())):</div>
              ?                                ---------------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
334  <a href="#2d3a5fcc">2d3a5fcc</a> +                 if exp.getBBox().contains(afwGeom.PointI(s.getCentroid())):</div>
                                    trimmedCatalog.append(trimmedCatalog.table.copyRecord(s))
                
                            return trimmedCatalog
                
                        psfCandidateList = starSelector.selectStars(subExp,
                                                                    trimCatalogToImage(subExp, self.catalog))
                        psf, cellSet = psfDeterminer.determinePsf(subExp, psfCandidateList, metadata)
                        subExp.setPsf(psf)
                
                        # Test how well we can subtract the PSF model.  N.b. using self.exposure is an extrapolation
                        for exp, chi_lim in [(subExp, 4.5),
                                             (self.exposure.Factory(self.exposure,
                                                                    afwGeom.BoxI(afwGeom.PointI(0, 100),
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
353  <a href="#667181e6">667181e6</a> -                                                                  (afwGeom.PointI(w-1, h-1)))), 7.5),</div>
              ?                                                                                             -------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
348  <a href="#d1f7059b">d1f7059b</a> +                                                                  (afwGeom.PointI(w-1, h-1))),</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
349  <a href="#503e6741">503e6741</a> +                                                     afwImage.LOCAL), 7.5),</div>
                                             (self.exposure, 19),
                                             ]:
                            cat = trimCatalogToImage(exp, self.catalog)
                            exp.setPsf(psf)
                            self.subtractStars(exp, cat, chi_lim)
                
                    def testPsfDeterminerNEigen(self):
                        """Test the (PCA) psfDeterminer when you ask for more components than acceptable stars"""
                
                        starSelector, psfDeterminer = SpatialModelPsfTestCase.setupDeterminer(self.exposure,
                                                                                              nEigenComponents=3)
                        metadata = dafBase.PropertyList()
                        psfCandidateList = starSelector.selectStars(self.exposure, self.catalog)
                        psfCandidateList, nEigen = psfCandidateList[0:4], 2 # only enough stars for 2 eigen-components
                        psf, cellSet = psfDeterminer.determinePsf(self.exposure, psfCandidateList, metadata)
                
                        self.assertEqual(psf.getKernel().getNKernelParameters(), nEigen)
                
                    def testCandidateList(self):
                        self.assertFalse(self.cellSet.getCellList()[0].empty())
                        self.assertTrue(self.cellSet.getCellList()[1].empty())
                        self.assertFalse(self.cellSet.getCellList()[2].empty())
                        self.assertTrue(self.cellSet.getCellList()[3].empty())
                
                        stamps = []
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
379  <a href="#87502864">87502864</a> -         stampInfo = []</div>
                        for cell in self.cellSet.getCellList():
                            for cand in cell:
                                #
                                # Swig doesn't know that we inherited from SpatialCellMaskedImageCandidate;  all
                                # it knows is that we have a SpatialCellCandidate, and SpatialCellCandidates
                                # don't know about getMaskedImage;  so cast the pointer to SpatialCellMaskedImageCandidate<float>
                                # and all will be well
                                #
                                cand = afwMath.cast_SpatialCellMaskedImageCandidateF(cell[0])
                                width, height = 29, 25
                                cand.setWidth(width); cand.setHeight(height);
                
                                im = cand.getMaskedImage()
                                stamps.append(im)
                
                                self.assertEqual(im.getWidth(), width)
                                self.assertEqual(im.getHeight(), height)
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
397  <a href="#87502864">87502864</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
392  <a href="#6e52ace2">6e52ace2</a> + </div>
                        if False and display:
                            mos = displayUtils.Mosaic()
                            mos.makeMosaic(stamps, frame=2)
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
402  <a href="#6855784a">6855784a</a> -     def testRejectBlends(self):</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
397  <a href="#b2772e6d">b2772e6d</a> +     def xtestRejectBlends(self):</div>
              ?         +
                        """Test the PcaPsfDeterminer blend removal
                
                        We give it a single blended source, asking it to remove blends,
                        and check that it barfs in the expected way.
                        """
                
                        factory = measAlg.psfDeterminerRegistry["pca"]
                        config = factory.ConfigClass()
                        config.doRejectBlends = True
                        psfDeterminer = factory(config)
                
                        schema = afwTable.SourceTable.makeMinimalSchema()
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
410  <a href="#8eb96543">8eb96543</a> +         schema.setVersion(0)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
415  <a href="#14dbe409">14dbe409</a> -         schema.addField("position", afwGeom.Point2D, doc="Position")</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
411  <a href="#6855784a">6855784a</a> +         posKey = schema.addField("position", afwGeom.Point2D, doc="Position")</div>
              ?        +++++++++
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
416  <a href="#14dbe409">14dbe409</a> -         schema.addField("flux.psf", float, doc="psf")</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
417  <a href="#14dbe409">14dbe409</a> -         schema.addField("flux.psf.flags", "Flag", doc="psf")</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
418  <a href="#14dbe409">14dbe409</a> - </div>
                        catalog = afwTable.SourceCatalog(schema)
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
420  <a href="#14dbe409">14dbe409</a> -         catalog.defineCentroid("position")</div>
              ?                                -   ^^^^^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
413  <a href="#6855784a">6855784a</a> +         catalog.defineCentroid(posKey)</div>
              ?                                   ^^^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
421  <a href="#14dbe409">14dbe409</a> -         catalog.definePsfFlux("flux.psf")</div>
                        source = catalog.addNew()
                
                        foot = afwDetection.Footprint(afwGeom.Point2I(123, 45), 6, self.exposure.getBBox())
                        foot.addPeak(123, 45, 6)
                        foot.addPeak(126, 47, 5)
                        source.setFootprint(foot)
                
                        candidates = [measAlg.makePsfCandidate(source, self.exposure)]
                        metadata = dafBase.PropertyList()
                
                        with self.assertRaises(RuntimeError) as cm:
                            psfDeterminer.determinePsf(self.exposure, candidates, metadata)
                        self.assertEqual(cm.exception.message, "All PSF candidates removed as blends")
                
                
                #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                
                def suite():
                    """Returns a suite containing all the test cases in this module."""
                    utilsTests.init()
                
                    suites = []
                    suites += unittest.makeSuite(SpatialModelPsfTestCase)
                    suites += unittest.makeSuite(utilsTests.MemoryTestCase)
                    return unittest.TestSuite(suites)
                
                def run(exit = False):
                    """Run the utilsTests"""
                    utilsTests.run(suite(), exit)
                
                if __name__ == "__main__":
                    run(True)
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="0fa9ad60"/></a>0fa9ad60</h3>

<pre>
commit 0fa9ad6092b97c9cd0e29827d107cfb1b2dd76fc
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Thu Feb 23 12:28:57 2012 -0500

    updated to reflect VectorT->CatalogT name change in afw
</pre>
<h3><a name="f12d3829"/></a>f12d3829</h3>

<pre>
commit f12d382993ee65ae5ef2fb747259d81ffcc52711
Author: Paul Price <price@astro.princeton.edu>
Date:   Sat Mar 2 11:12:18 2013 +0900

    Update tests' use of SecondMomentStarSelectorConfig.badFlags
</pre>
<h3><a name="2f3f343d"/></a>2f3f343d</h3>

<pre>
commit 2f3f343d9122a0318a32dc96a0f24d8bcac8521c
Author: Russell Owen <rowen@uw.edu>
Date:   Fri Jan 13 17:36:06 2012 -0600

    Fixed tests/psf.py
</pre>
<h3><a name="c5720a8e"/></a>c5720a8e</h3>

<pre>
commit c5720a8ef2c923bc66513bbc602641f7387024d2
Author: dgehrig <dgehrig@git.lsstcorp.org>
Date:   Sun Jul 11 23:51:33 2010 +0000

    adding copyright notices
</pre>
<h3><a name="24f6b19a"/></a>24f6b19a</h3>

<pre>
commit 24f6b19a7f0ddaf58c8cc6b81300cbbcaa083521
Merge: a668c5f eedb85f
Author: Steven Bickerton <bick@astro.princeton.edu>
Date:   Thu Feb 2 17:11:46 2012 -0600

    merged master and built against master-merged afw. all tests pass
</pre>
<h3><a name="6855784a"/></a>6855784a</h3>

<pre>
commit 6855784ab77fc63a63ec8782767bc5fdd517ca0d
Author: Paul Price <price@astro.princeton.edu>
Date:   Mon Jun 17 17:04:57 2013 -0400

    tests: ensure PsfDeterminer masks blends (#2933)
</pre>
<h3><a name="e73c5e44"/></a>e73c5e44</h3>

<pre>
commit e73c5e447ac0b8a71926d3e78fec30aad4beee91
Author: Naoki Yasuda <yasudank@gmail.com>
Date:   Tue Apr 9 10:29:25 2013 +0900

    Appropriate config parameter for a unit test of testPsfDetermination.py.
</pre>
<h3><a name="0f78cb59"/></a>0f78cb59</h3>

<pre>
commit 0f78cb59c45d0d8383309cd0361f4411c3629347
Author: rhl <rhl@git.lsstcorp.org>
Date:   Thu May 20 20:23:02 2010 +0000

    Added flagForDetection bit STAR; set for initial PSF candidates.  Renamed measureSourceUtils.py to utils.py (but kept old file for backwards compat)
</pre>
<h3><a name="c59f5c09"/></a>c59f5c09</h3>

<pre>
commit c59f5c09fd57df80216de27fa30a247e4bfd6ded
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Wed Dec 7 17:13:13 2011 -0500

    Test that a PSF estimated in the top corner of an image is valid in the bottom left (i.e. XY0 is correctly handled)
</pre>
<h3><a name="c48442b8"/></a>c48442b8</h3>

<pre>
commit c48442b88492cb3bfea50a649cc7200296aef6cc
Author: rhl <rhl@git.lsstcorp.org>
Date:   Wed Feb 11 07:21:33 2009 +0000

    Updates to PSF now that we are close to using it.  Provide factory function, createPSF
</pre>
<h3><a name="e38be0fc"/></a>e38be0fc</h3>

<pre>
commit e38be0fc1957073df10ea88d891f5948c4bf9f3f
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Fri Dec 2 22:11:29 2011 -0500

    Cleaned up tests; Make spatial variation linear so model is exact
</pre>
<h3><a name="14dbe409"/></a>14dbe409</h3>

<pre>
commit 14dbe409ed8255ee6086a982178d791db186d21e
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Wed Mar 11 11:58:33 2015 -0400

    Changes in HSC-1180 require that psf.flux.flags be available.  Fixed on master
</pre>
<h3><a name="0eb369b5"/></a>0eb369b5</h3>

<pre>
commit 0eb369b526d78134485e38c8c58b4652b302b4d1
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Fri Mar 15 17:37:16 2013 -0400

    Remove PsfFactory and createPsf; replace with direct ctor calls.
</pre>
<h3><a name="85ab1211"/></a>85ab1211</h3>

<pre>
commit 85ab1211e8e50166554d0f5b1b70d95f9849901c
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Thu Jan 31 01:13:07 2013 -0500

    Give source measurement drivers a more uniform and readable API
    
    MeasureSources must now be informed upon creation whether it will be used for forced measurement.
    Renamed apply(source, exposure) to applyWithPeak.
    Renamed apply(...) with references to applyForced.
    All applyXX() methods now support centroid tweak-ups (with different defaults).
    Centroids are tweaked if centroider.name!=None even in forced photometry mode.
    Test code modified to test new centroid-tweaking options; see also #2612.
</pre>
<h3><a name="87502864"/></a>87502864</h3>

<pre>
commit 875028643d4570a95ffd112a88cd4b0ed1cb54ad
Author: rhl <rhl@git.lsstcorp.org>
Date:   Mon Mar 2 19:39:28 2009 +0000

    Make PsfCandidate inherit from lsst::afw::math::SpatialCellImageCandidate<ImageT>; use afw mosaic code to display psf images
</pre>
<h3><a name="5d7608d9"/></a>5d7608d9</h3>

<pre>
commit 5d7608d992e8631a5dbbf8b281c1517987e9a7ba
Author: rhl <rhl@git.lsstcorp.org>
Date:   Mon Mar 16 18:14:51 2009 +0000

    Work on test/examples code
</pre>
<h3><a name="f5b81018"/></a>f5b81018</h3>

<pre>
commit f5b810185e334994c0858ae6b617620d69aca510
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Wed Dec 10 16:34:07 2014 -0500

    Add support for new CalibFlux slot in measurement configuration
    
    By default, we'll use flux.naive for this slot, as that's appropriate for
    large apertures, and it's not being used for anything else.
</pre>
<h3><a name="8133f031"/></a>8133f031</h3>

<pre>
commit 8133f031584920e094b39b9523e5bad26e945f0d
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Wed Nov 7 15:41:02 2012 -0500

    Add description
    
    ... after I had to figure this out yet again
</pre>
<h3><a name="667181e6"/></a>667181e6</h3>

<pre>
commit 667181e67ec14f367786a2a3e8ce3dea56bcbe25
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Wed Nov 7 15:45:55 2012 -0500

    Test the objectSizeStarSelector
    
    N.b. I had to fiddle with the image generation to make the tests pass,
    and with the secondMomentStarSelector configs to get it to work --- it was
    a miracle that it ever did for these sparse images with Ixx \propto Iyy
    
    N.b. relaxed the tolerance for extrapolating the PSF in the sub-image test,
    but also added a more stringent smaller-extrapolation case
</pre>
<h3><a name="b0d8591f"/></a>b0d8591f</h3>

<pre>
commit b0d8591f0e28fd34c95f1548ebda5695e46d2a22
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Mon Feb 20 18:14:44 2012 -0500

    merge from tickets/1843; tests/psf.py is failing, but it appears to be failing on master too
</pre>
<h3><a name="23486076"/></a>23486076</h3>

<pre>
commit 23486076c5cd0952678c469d8f80ffc908083cf2
Author: Steven Bickerton <bick@astro.princeton.edu>
Date:   Mon Jan 30 22:17:35 2012 -0600

    psfSelectTest passes ... but slow in determination.
</pre>
<h3><a name="3831a07c"/></a>3831a07c</h3>

<pre>
commit 3831a07c0440d03e9c0780a5c459f107a0100001
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Thu Dec 1 09:55:49 2011 -0500

    Added code to generate an image of residuals
</pre>
<h3><a name="12444e00"/></a>12444e00</h3>

<pre>
commit 12444e008a7052ce674f99b699a2bd26a1972877
Author: rhl <rhl@git.lsstcorp.org>
Date:   Tue Feb 10 00:58:27 2009 +0000

    Worked on convolving with PSFs
</pre>
<h3><a name="2cd72006"/></a>2cd72006</h3>

<pre>
commit 2cd720065fb7de2cb9df0c337e1ae7a93b823160
Author: rhl <rhl@git.lsstcorp.org>
Date:   Tue Aug 17 19:43:44 2010 +0000

    Code works for isolated sources, with c. 0.1% errors for object centered at a pixel corner
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="d1f7059b"/></a>d1f7059b</h3>

<pre>
commit d1f7059bc81c5b7fc902a9c1f656ecefc2151c56
Author: Russell Owen <rowen@uw.edu>
Date:   Wed Sep 10 12:40:56 2014 -0700

    Specify image origin in two unit tests.
</pre>
<h3><a name="0332997a"/></a>0332997a</h3>

<pre>
commit 0332997a6f5430001c459f1cdf986a0ad38607a5
Author: Russell Owen <rowen@uw.edu>
Date:   Fri Mar 7 12:03:52 2014 -0800

    Fixed remaining unit tests
</pre>
<h3><a name="8eb96543"/></a>8eb96543</h3>

<pre>
commit 8eb96543de1d07e02313d8f699655f5a31290f95
Author: Perry Gee <pgee@physics.ucdavis.edu>
Date:   Fri Aug 29 17:57:19 2014 -0700

    DM-1070 - fix any unit tests which assume table version 0
</pre>
<h3><a name="b2772e6d"/></a>b2772e6d</h3>

<pre>
commit b2772e6d5e81933aee84c0d68a11e82a23b342f3
Author: Russell Owen <rowen@uw.edu>
Date:   Wed Mar 12 13:46:20 2014 -0700

    Commented out invalid unit test. I'll file a ticket.
</pre>
<h3><a name="6855784a"/></a>6855784a</h3>

<pre>
commit 6855784ab77fc63a63ec8782767bc5fdd517ca0d
Author: Paul Price <price@astro.princeton.edu>
Date:   Mon Jun 17 17:04:57 2013 -0400

    tests: ensure PsfDeterminer masks blends (#2933)
</pre>
<h3><a name="e9706731"/></a>e9706731</h3>

<pre>
commit e970673179cb0625f6efe5b78be04d6b96ad9f16
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Thu Jan 22 18:15:49 2015 -0500

    Update tests to adapt to removal of NaiveFlux and SincFlux
    
    These have now been replaced by CircularApertureFlux.
</pre>
<h3><a name="503e6741"/></a>503e6741</h3>

<pre>
commit 503e67413fed4bc1618e87b036e3baa8fad4fe22
Author: Russell Owen <rowen@uw.edu>
Date:   Thu Sep 18 17:38:16 2014 -0700

    Restore image origin in several places
</pre>
<h3><a name="2d3a5fcc"/></a>2d3a5fcc</h3>

<pre>
commit 2d3a5fccae9908251c54deaba743fc34137a65f5
Author: Russell Owen <rowen@uw.edu>
Date:   Thu Sep 11 17:45:03 2014 -0700

    Remove explicit use of image origin = PARENT; use default
</pre>
<h3><a name="6e52ace2"/></a>6e52ace2</h3>

<pre>
commit 6e52ace2e675ee56403e755754fcaf3e14d21541
Author: pgee <pgee@pgeepc2.physics.ucdavis.edu>
Date:   Mon Dec 8 11:08:39 2014 -0800

    DM-1608 move tests which will remain in meas_alg to new meas_base measurement framework.
    
    Also, delete those which were moved in DM-1456
</pre>
</div>


[Return to list](#homelist)
# <a name="lib/libmeas_algorithms.dylib-gdb.py"/></a>lib/libmeas_algorithms.dylib-gdb.py
### Diff:

<pre>
                import os.path, sys
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2    <a href="#21af0bb5">21af0bb5</a> + import lsst.utils</div>
                import gdb
                #
                # Adjust the load path to include lsst.gdb, bypassing the regular lsstimport mechanism as
                # the version of python running within gdb may not be the same as we are using for lsst processing
                #
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
7    <a href="#42f139d8">42f139d8</a> - printerDir = os.path.join(os.environ["MEAS_ALGORITHMS_DIR"], "python", "lsst", "gdb")</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
8    <a href="#21af0bb5">21af0bb5</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
9    <a href="#21af0bb5">21af0bb5</a> + measAlgorithmsDir = lsst.utils.getPackageDir('meas_algorithms')</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
10   <a href="#21af0bb5">21af0bb5</a> + printerDir = os.path.join(measAlgorithmsDir, "python", "lsst", "gdb")</div>
                if printerDir not in sys.path:
                    sys.path.append(printerDir)
                
                import meas.algorithms.printers
                
                meas.algorithms.printers.register(gdb.current_objfile())
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="42f139d8"/></a>42f139d8</h3>

<pre>
commit 42f139d8ac30330848d5431cf89c96836e994e36
Author: rhl <rhl@git.lsstcorp.org>
Date:   Fri Jul 1 19:41:59 2011 +0000

    Started gdb pretty print support
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="21af0bb5"/></a>21af0bb5</h3>

<pre>
commit 21af0bb557d73ee16cc3a02e547739e1cd6def5d
Author: Joshua Hoblitt <josh@hoblitt.com>
Date:   Tue May 26 15:42:16 2015 -0700

    replace eups.productDir() calls with lsst.utils.getPackageDir()
</pre>
</div>


[Return to list](#homelist)
# <a name="tests/testWarpedPsf.cc"/></a>tests/testWarpedPsf.cc
### Diff:

<pre>
                #define BOOST_TEST_DYN_LINK
                #define BOOST_TEST_MODULE DISTORTION
                #include <boost/test/unit_test.hpp>
                
                #include <boost/random.hpp>
                #include <boost/make_shared.hpp>
                
                #include "lsst/meas/algorithms/WarpedPsf.h"
                
                using namespace std;
                using namespace Eigen;
                using namespace lsst::afw::geom;
                using namespace lsst::afw::math;
                using namespace lsst::afw::image;
                using namespace lsst::afw::detection;
                using namespace lsst::afw::geom::ellipses;
                using namespace lsst::meas::algorithms;
                
                
                static boost::random::mt19937 rng(0);  // RNG deliberately initialized with same seed every time
                static boost::random::uniform_int_distribution<> uni_int(0,100);
                static boost::random::uniform_01<> uni_double;
                
                
                // -------------------------------------------------------------------------------------------------
                //
                // Helper functions
                
                
                static inline Point2D randpt()
                {
                    // returns randomly located point in [-100,100] x [-100,100]
                    return Point2D(200*uni_double(rng)-100, 200*uni_double(rng)-100);
                }
                
                static inline double dist(const Point2D &p1, const Point2D &p2)
                {
                    double dx = p1.getX() - p2.getX();
                    double dy = p1.getY() - p2.getY();
                    return sqrt(dx*dx + dy*dy);
                }
                
                static inline double dist(const AffineTransform &a1, const AffineTransform &a2)
                {
                    double ret = 0.0;
                    for (int i = 0; i < 6; i++)
                        ret += (a1[i]-a2[i]) * (a1[i]-a2[i]);
                    return sqrt(ret);
                }
                
                static inline double compare(const Image<double> &im1, const Image<double> &im2)
                {
                    assert(im1.getWidth() == im2.getWidth());
                    assert(im1.getHeight() == im2.getHeight());
                    assert(im1.getX0() == im2.getX0());
                    assert(im1.getY0() == im2.getY0());
                
                    double t11 = 0.0;
                    double t12 = 0.0;
                    double t22 = 0.0;
                
                    int nx = im1.getWidth();
                    int ny = im1.getHeight();
                
                    for (int i = 0; i < nx; i++) {
                        for (int j = 0; j < ny; j++) {
                            double x = im1(i,j);
                            double y = im2(i,j);
                            t11 += x*x;
                            t12 += (x-y)*(x-y);
                            t22 += y*y;
                        }
                    }
                
                    assert(t11 > 0.0);
                    assert(t22 > 0.0);
                    return sqrt(fabs(t12) / sqrt(t11*t22));
                }
                
                
                //
                // General quadratic distortion of the form
                //   x' = x + Ax + By + Cx^2 + Dxy + Ey^2
                //   y' = y + Fx + Gy + Hx^2 + Ixy + Jy^2
                //
                class ToyXYTransform : public XYTransform
                {
                public:
                    ToyXYTransform(double A, double B, double C, double D, double E, 
                                   double F, double G, double H, double I, double J)
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
91   <a href="#b2464af2">b2464af2</a> -         : XYTransform(false), _A(A), _B(B), _C(C), _D(D), _E(E), _F(F), _G(G), _H(H), _I(I), _J(J)</div>
              ?                       -----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
91   <a href="#f3e31876">f3e31876</a> +         : XYTransform(), _A(A), _B(B), _C(C), _D(D), _E(E), _F(F), _G(G), _H(H), _I(I), _J(J)</div>
                    { }
                
                    virtual ~ToyXYTransform() { }
                
                    virtual PTR(XYTransform) clone() const
                    {
                        return PTR(XYTransform) (new ToyXYTransform(_A,_B,_C,_D,_E,_F,_G,_H,_I,_J));
                    }
                
                    virtual Point2D forwardTransform(Point2D const &pixel) const
                    {
                        double x = pixel.getX();
                        double y = pixel.getY();
                        
                        return Point2D(x + _A*x + _B*y + _C*x*x + _D*x*y + _E*y*y,
                                       y + _F*x + _G*y + _H*x*x + _I*x*y + _J*y*y);
                    }
                
                    virtual Point2D reverseTransform(Point2D const &pixel) const
                    {
                        static const int maxiter = 1000;
                        Point2D ret = pixel;
                        
                        // very slow and boneheaded iteration scheme but OK for testing purposes
                        for (int i = 0; i < maxiter; i++) {
                            Point2D q = forwardTransform(ret);
                            double dx = q.getX() - pixel.getX();
                            double dy = q.getY() - pixel.getY();
                
                #if 0
                            cerr << "iteration " << i << ": (" << dx << "," << dy << ")\n";
                #endif
                
                            if (dx*dx + dy*dy < 1.0e-24)
                                return ret;
                
                            ret = Point2D(ret.getX() - dx, ret.getY() - dy);
                        }
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
131  <a href="#b2464af2">b2464af2</a> -         throw LSST_EXCEPT(lsst::pex::exceptions::InvalidParameterException, </div>
              ?                                                                   ^^^^^^ ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
131  <a href="#ed246562">ed246562</a> +         throw LSST_EXCEPT(lsst::pex::exceptions::InvalidParameterError, </div>
              ?                                                                   ^^ ^
                                          "max iterations exceeded");
                    }
                    
                    // factory function
                    static boost::shared_ptr<ToyXYTransform> makeRandom()
                    {
                        double A = 0.1 * (uni_double(rng)-0.5);
                        double B = 0.1 * (uni_double(rng)-0.5);
                        double C = 0.0001 * (uni_double(rng)-0.5);
                        double D = 0.0001 * (uni_double(rng)-0.5);
                        double E = 0.0001 * (uni_double(rng)-0.5);
                        double F = 0.1 * (uni_double(rng)-0.5);
                        double G = 0.1 * (uni_double(rng)-0.5);
                        double H = 0.0001 * (uni_double(rng)-0.5);
                        double I = 0.0001 * (uni_double(rng)-0.5);
                        double J = 0.0001 * (uni_double(rng)-0.5);
                
                        return PTR(ToyXYTransform) (new ToyXYTransform(A,B,C,D,E,F,G,H,I,J));
                    }
                
                protected:
                    double _A, _B, _C, _D, _E, _F, _G, _H, _I, _J;
                };
                
                
                // -------------------------------------------------------------------------------------------------
                //
                // ToyPsf: general PDF of the form
                //   exp(-ax^2/2 - bxy - cy^2/2)
                //
                // where
                //   a = 0.1 (1 + Ax + By)
                //   b = 0.1 (Cx + Dy)
                //   c = 0.1 (1 + Ex + Fy)
                //
                
                
                //
                // Helper function which fills an image with a normalized 2D Gaussian of the form
                //   exp(-a(x-px)^2/2 - b(x-px)(y-py) - c(y-py)^2/2)
                //
                static PTR(Image<double>) fill_gaussian(double a, double b, double c, double px, double py, 
                                                        int nx, int ny, int x0, int y0)
                {
                    // smallest eigenvalue
                    double lambda = 0.5 * (a+c + sqrt((a-c)*(a-c) + b*b));
                
                    // approximate size of box needed to hold kernel
                    double width = sqrt(20/lambda);
                
                    assert(lambda > 1.0e-10);
                    assert(x0-px <= -width && x0-px+nx-1 >= width);
                    assert(y0-py <= -width && y0-py+ny-1 >= width);
                
                    PTR(Image<double>) im = boost::make_shared<Image<double> >(nx, ny);
                    im->setXY0(x0, y0);
                
                    double imSum = 0.0;
                
                    for (int i = 0; i < nx; i++) {
                        for (int j = 0; j < ny; j++) {
                            double x = i+x0-px;
                            double y = j+y0-py;
                            double t = exp(-0.5*a*x*x - b*x*y - 0.5*c*y*y);
                            (*im)(i,j) = t;
                            imSum += t;
                        }
                    }
                
                    (*im) /= imSum;
                    return im;
                }
                
                
                struct ToyPsf : public ImagePsf
                {    
                    double _A, _B, _C, _D, _E, _F;
                
                    ToyPsf(double A, double B, double C, double D, double E, double F)
                        : _A(A), _B(B), _C(C), _D(D), _E(E), _F(F) 
                    { }
                
                    virtual ~ToyPsf() { }
                    
                    virtual PTR(Psf) clone() const 
                    { 
                        return boost::make_shared<ToyPsf>(_A,_B,_C,_D,_E,_F); 
                    }
                
                    void evalABC(double &a, double &b, double &c, Point2D const &p) const
                    {
                        double x = p.getX();
                        double y = p.getY();
                
                        a = 0.1 * (1.0 + _A*x + _B*y);
                        b = 0.1 * (_C*x + _D*y);
                        c = 0.1 * (1.0 + _E*x + _F*y);
                    }
                    
                    virtual PTR(Image) doComputeKernelImage(Point2D const &ccdXY, Color const &) const {
                        static const int nside = 100;
                
                        double a, b, c;
                        this->evalABC(a, b, c, ccdXY);
                
                        return fill_gaussian(a, b, c, 0, 0, 2*nside+1, 2*nside+1, -nside, -nside);
                    }
                    
                    // factory function
                    static boost::shared_ptr<ToyPsf> makeRandom()
                    {
                        double A = 0.005 * (uni_double(rng)-0.5);
                        double B = 0.005 * (uni_double(rng)-0.5);
                        double C = 0.005 * (uni_double(rng)-0.5);
                        double D = 0.005 * (uni_double(rng)-0.5);
                        double E = 0.005 * (uni_double(rng)-0.5);
                        double F = 0.005 * (uni_double(rng)-0.5);
                
                        return boost::make_shared<ToyPsf> (A,B,C,D,E,F);
                    }
                
                };
                
                
                BOOST_AUTO_TEST_CASE(warpedPsf)
                {
                    PTR(XYTransform) distortion = ToyXYTransform::makeRandom();
                
                    PTR(ToyPsf) unwarped_psf = ToyPsf::makeRandom();
                    PTR(WarpedPsf) warped_psf = boost::make_shared<WarpedPsf> (unwarped_psf, distortion);
                
                    Point2D p = randpt();
                    Point2D q = distortion->reverseTransform(p);
                
                    // warped image
                    PTR(Image<double>) im = warped_psf->computeImage(p);
                    int nx = im->getWidth();
                    int ny = im->getHeight();
                    int x0 = im->getX0();
                    int y0 = im->getY0();
                
                    double a, b, c;
                    unwarped_psf->evalABC(a, b, c, q);
                
                    Eigen::Matrix2d m0;
                    m0 << a, b,
                          b, c;
                    
                    AffineTransform atr = distortion->linearizeReverseTransform(p);
                
                    Eigen::Matrix2d md;
                    md << atr.getLinear()[0], atr.getLinear()[2],
                          atr.getLinear()[1], atr.getLinear()[3];   // LinearTransform transposed index convention
                
                    Eigen::Matrix2d m1 = md.transpose() * m0 * md;
                
                    // this should be the same as the warped image, up to artifacts from warping/pixelization
                    PTR(Image<double>) im2 = fill_gaussian(m1(0,0), m1(0,1), m1(1,1), 
                                                           p.getX(), p.getY(), nx, ny, x0, y0);
                
                    // TODO: improve this test; the ideal thing would be to repeat with 
                    // finer resolutions and more stringent threshold
                    BOOST_CHECK(compare(*im,*im2) < 0.005);
                }
                
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="b2464af2"/></a>b2464af2</h3>

<pre>
commit b2464af205082256fc5636574304ac6473d18c2c
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Tue Mar 19 14:15:41 2013 -0400

    Move KernelPsf, DoubleGaussianPsf, WarpedPsf, and associated tests to meas_algorithms.
    
    Moving Psf classes to meas_algorithms will let us implement shape and aperture
    flux measurements on Psf models using code in meas_algorithms.
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="f3e31876"/></a>f3e31876</h3>

<pre>
commit f3e31876d93e56d69dee884acb1e1e358bc8547f
Author: Russell Owen <rowen@uw.edu>
Date:   Wed Feb 19 13:50:35 2014 -0800

    Fix XYTransform constructor to remove obsolete flag.
</pre>
<h3><a name="ed246562"/></a>ed246562</h3>

<pre>
commit ed2465629cb2a0b4fe5aedeb9f447da02cf38736
Author: Russell Owen <rowen@uw.edu>
Date:   Tue Jun 17 16:16:40 2014 -0700

    Renamed exceptions
</pre>
</div>


[Return to list](#homelist)
# <a name="include/lsst/meas/algorithms/PcaPsf.h"/></a>include/lsst/meas/algorithms/PcaPsf.h
### Diff:

<pre>
                // -*- lsst-c++ -*-
                /*
                 * LSST Data Management System
                 * Copyright 2008-2013 LSST Corporation.
                 *
                 * This product includes software developed by the
                 * LSST Project (http://www.lsst.org/).
                 *
                 * This program is free software: you can redistribute it and/or modify
                 * it under the terms of the GNU General Public License as published by
                 * the Free Software Foundation, either version 3 of the License, or
                 * (at your option) any later version.
                 *
                 * This program is distributed in the hope that it will be useful,
                 * but WITHOUT ANY WARRANTY; without even the implied warranty of
                 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                 * GNU General Public License for more details.
                 *
                 * You should have received a copy of the LSST License Statement and
                 * the GNU General Public License along with this program.  If not,
                 * see <http://www.lsstcorp.org/LegalNotices/>.
                 */
                
                #ifndef LSST_MEAS_ALGORITHMS_PcaPsf_h_INCLUDED
                #define LSST_MEAS_ALGORITHMS_PcaPsf_h_INCLUDED
                
                #include "lsst/meas/algorithms/KernelPsf.h"
                
                namespace lsst { namespace meas { namespace algorithms {
                
                /**
                 * @brief Represent a PSF as a linear combination of PCA (== Karhunen-Loeve) basis functions
                 */
                class PcaPsf : public lsst::afw::table::io::PersistableFacade<PcaPsf>, public KernelPsf {
                public:
                
                    /**
                     *  @brief Constructor for a PcaPsf
                     *
                     *  @param[in] kernel           Kernel that defines the Psf.
                     *  @param[in] averagePosition  Average position of stars used to construct the Psf.
                     */
                    explicit PcaPsf(
                        PTR(afw::math::LinearCombinationKernel) kernel,
                        afw::geom::Point2D const & averagePosition = afw::geom::Point2D()
                    );
                
                    /// Polymorphic deep copy; should usually be unnecessary as Psfs are immutable.x
                    virtual PTR(afw::detection::Psf) clone() const;
                
                    /// PcaPsf always has a LinearCombinationKernel, so we can override getKernel to make it more useful.
                    PTR(afw::math::LinearCombinationKernel const) getKernel() const;
                
                private:
                
                    // Name used in table persistence; the rest of is implemented by KernelPsf.
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
57   <a href="#7d137b7e">7d137b7e</a> -     virtual std::string getPersistenceName() const;</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
57   <a href="#4a328860">4a328860</a> +     virtual std::string getPersistenceName() const { return "PcaPsf"; }</div>
              ?                                                   ++++++++++++++++++ ++
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
58   <a href="#7d137b7e">7d137b7e</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
59   <a href="#7d137b7e">7d137b7e</a> -     virtual std::string getPythonModule() const;</div>
                
                    friend class boost::serialization::access;
                
                    template <class Archive>
                    void serialize(Archive&, unsigned int const) {
                        boost::serialization::void_cast_register<PcaPsf,
                            lsst::afw::detection::Psf>(static_cast<PcaPsf*>(0), static_cast<lsst::afw::detection::Psf*>(0));
                    }
                
                };
                
                }}}
                
                namespace boost {
                namespace serialization {
                
                template <class Archive>
                inline void save_construct_data(
                    Archive& ar, lsst::meas::algorithms::PcaPsf const* p,
                    unsigned int const) {
                    lsst::afw::math::LinearCombinationKernel const* kernel = p->getKernel().get();
                    ar << make_nvp("kernel", kernel);
                    lsst::afw::geom::Point2D averagePosition = p->getAveragePosition();
                    ar << make_nvp("averagePositionX", averagePosition.getX());
                    ar << make_nvp("averagePositionY", averagePosition.getY());
                }
                
                template <class Archive>
                inline void load_construct_data(
                    Archive& ar, lsst::meas::algorithms::PcaPsf* p,
                    unsigned int const) {
                    lsst::afw::math::LinearCombinationKernel* kernel;
                    ar >> make_nvp("kernel", kernel);
                    double x=0.0, y=0.0;
                    ar >> make_nvp("averagePositionX", x);
                    ar >> make_nvp("averagePositionY", y);
                    ::new(p) lsst::meas::algorithms::PcaPsf(PTR(lsst::afw::math::LinearCombinationKernel)(kernel),
                                                            lsst::afw::geom::Point2D(x, y));
                }
                
                }} // namespace boost::serialization
                
                #endif // !LSST_MEAS_ALGORITHMS_PcaPsf_h_INCLUDED
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="7d137b7e"/></a>7d137b7e</h3>

<pre>
commit 7d137b7e4539117419bcd70a7e08cdfe7478442f
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Fri Mar 1 17:00:02 2013 +0900

    Set Python modules appropriately for afw::table::io::Persistables.
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="4a328860"/></a>4a328860</h3>

<pre>
commit 4a328860d327f90711445018aa97ad8779dee93b
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Mon Dec 17 13:29:19 2012 -0500

    Implement persistence for PcaPsf.
</pre>
</div>


[Return to list](#homelist)
# <a name="include/lsst/meas/algorithms/CoaddPsf.h"/></a>include/lsst/meas/algorithms/CoaddPsf.h
### Diff:

<pre>
                // -*- lsst-c++ -*-
                /*
                 * LSST Data Management System
                 * Copyright 2008-2013 LSST Corporation.
                 *
                 * This product includes software developed by the
                 * LSST Project (http://www.lsst.org/).
                 *
                 * This program is free software: you can redistribute it and/or modify
                 * it under the terms of the GNU General Public License as published by
                 * the Free Software Foundation, either version 3 of the License, or
                 * (at your option) any later version.
                 *
                 * This program is distributed in the hope that it will be useful,
                 * but WITHOUT ANY WARRANTY; without even the implied warranty of
                 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                 * GNU General Public License for more details.
                 *
                 * You should have received a copy of the LSST License Statement and
                 * the GNU General Public License along with this program.  If not,
                 * see <http://www.lsstcorp.org/LegalNotices/>.
                 */
                
                #if !defined(LSST_MEAS_ALGORITHMS_COADDPSF_H)
                #define LSST_MEAS_ALGORITHMS_COADDPSF_H
                
                #include <boost/make_shared.hpp>
                #include "lsst/base.h"
                #include "lsst/meas/algorithms/ImagePsf.h"
                #include "lsst/afw/image/Wcs.h"
                #include "lsst/afw/table/Exposure.h"
                #include "lsst/afw/table/types.h"
                #include "lsst/afw/geom/Box.h"
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
34   <a href="#3507c21a">3507c21a</a> - #include "lsst/afw/geom/polygon/Polygon.h"</div>
                #include "lsst/afw/math/warpExposure.h"
                
                namespace lsst { namespace meas { namespace algorithms {
                
                /**
                 *  @brief CoaddPsf is the Psf derived to be used for non-PSF-matched Coadd images.
                 *
                 *  It incorporates the logic of James Jee's Stackfit algorithm for estimating the
                 *  Psf of coadd by coadding the images of the Psf models of each input exposure.
                 */
                class CoaddPsf : public afw::table::io::PersistableFacade<CoaddPsf>, public ImagePsf {
                public:
                
                    /**
                     * @brief Main constructors for CoaddPsf
                     *
                     * The ExposureCatalog contains info about each visit/ccd in Coadd; this must be provided to the
                     * constructor, and cannot be changed.
                     *
                     * @param[in] catalog           ExposureCatalog containing the id, bbox, wcs, psf and weight for
                     *                              each ccd/visit.  This is usually the same catalog as the "ccds"
                     *                              catalog in the coadd Exposure's CoaddInputs.
                     * @param[in] coaddWcs          Wcs for the coadd.
                     * @param[in] weightFieldName   Field name that contains the weight of the exposure in the coadd;
                     *                              defaults to "weight".
                     * @param[in] warpingKernelName Name of warping kernel
                     * @param[in] cacheSize         Warping kernel cache size
                     */
                    explicit CoaddPsf(
                        afw::table::ExposureCatalog const & catalog,
                        afw::image::Wcs const & coaddWcs,
                        std::string const & weightFieldName = "weight",
                        std::string const & warpingKernelName="lanczos3",
                        int cacheSize=10000
                    );
                
                    /// Polymorphic deep copy.  Usually unnecessary, as Psfs are immutable.
                    virtual PTR(afw::detection::Psf) clone() const;
                
                    /**
                     *  @brief Return the average of the positions of the stars that went into this Psf.
                     *
                     *  For CoaddPsf, this is calculated as the weighted average of the average positions
                     *  of all the component Psfs.
                     */
                    virtual afw::geom::Point2D getAveragePosition() const { return _averagePosition; }
                
                    /// Return the Wcs of the coadd (defines the coordinate system of the Psf).
                    PTR(afw::image::Wcs const) getCoaddWcs() { return _coaddWcs; }
                
                    /// Return the number of component Psfs in this CoaddPsf
                    int getComponentCount() const;
                
                    /// Return the Psf of the component image at index
                    CONST_PTR(afw::detection::Psf) getPsf(int index);
                
                    /// Return the Wcs of the component image at index
                    CONST_PTR(afw::image::Wcs) getWcs(int index);
                
                    /// Return the weight of the component image at index
                    double getWeight(int index);
                
                    /// Return the exposure ID of the component image at index
                    afw::table::RecordId getId(int index);
                
                    /// Return the bounding box (in component image Pixel coordinates) of the component image at index
                    afw::geom::Box2I getBBox(int index);
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
103  <a href="#3507c21a">3507c21a</a> -     /// Return the valid Polygon (in component image Pixel coordinates) of the component image at index</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
104  <a href="#3507c21a">3507c21a</a> -     CONST_PTR(afw::geom::polygon::Polygon) getValidPolygon(int index);</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
105  <a href="#3507c21a">3507c21a</a> - </div>
                    /**
                     *  @brief Return true if the CoaddPsf persistable (always true).
                     *
                     *  While it's actually possible to construct a CoaddPsf that isn't persistable (because its nested
                     *  Psfs and Wcss are not persistable) in artificial situations, in realistic situations it's
                     *  pretty much impossible, because persistence is a necessary part of how CoaddPsfs are built.
                     *  And it's simpler and much faster if we just always return true, rather than loop over the
                     *  elements and check each one.
                     */
                    virtual bool isPersistable() const { return true; }
                
                    // Factory used to read CoaddPsf from an InputArchive; defined only in the source file.
                    class Factory;
                
                protected:
                
                    PTR(afw::detection::Psf::Image) doComputeKernelImage(
                        afw::geom::Point2D const & ccdXY,
                        afw::image::Color const & color
                    ) const;
                
                    // See afw::table::io::Persistable::getPersistenceName
                    virtual std::string getPersistenceName() const;
                
                    // See afw::table::io::Persistable::getPythonModule
                    virtual std::string getPythonModule() const;
                
                    // See afw::table::io::Persistable::write
                    virtual void write(OutputArchiveHandle & handle) const;
                
                    // Used by persistence only
                    explicit CoaddPsf(
                        afw::table::ExposureCatalog const & catalog, ///< Unpersisted catalog
                        PTR(afw::image::Wcs const) coaddWcs,         ///< WCS for the coadd
                        afw::geom::Point2D const & averagePosition,  ///< Default position for accessors
                        std::string const & warpingKernelName="lanczos3",    ///< Warping kernel name
                        int cacheSize=10000                          ///< Kernel cache size
                    );
                
                private:
                
                    afw::table::ExposureCatalog _catalog;
                    CONST_PTR(afw::image::Wcs) _coaddWcs;
                    afw::table::Key<double> _weightKey;
                    afw::geom::Point2D _averagePosition;
                    std::string _warpingKernelName;   // could be removed if we could get this from _warpingControl (#2949)
                    CONST_PTR(afw::math::WarpingControl) _warpingControl;
                };
                
                }}} // namespace lsst::meas::algorithms
                
                #endif
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="3507c21a"/></a>3507c21a</h3>

<pre>
commit 3507c21affa8bb07194496b5b2e781af60c3e404
Author: Bob Armstrong <rearmstr@gmail.com>
Date:   Mon Sep 15 15:06:22 2014 -0400

    CoaddPsf: Ensure that coaddPsf only includes regions that are valid.
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
</div>


[Return to list](#homelist)
# <a name="include/lsst/meas/algorithms.h"/></a>include/lsst/meas/algorithms.h
### Diff:

<pre>
                /* 
                 * LSST Data Management System
                 * Copyright 2008, 2009, 2010 LSST Corporation.
                 * 
                 * This product includes software developed by the
                 * LSST Project (http://www.lsst.org/).
                 *
                 * This program is free software: you can redistribute it and/or modify
                 * it under the terms of the GNU General Public License as published by
                 * the Free Software Foundation, either version 3 of the License, or
                 * (at your option) any later version.
                 * 
                 * This program is distributed in the hope that it will be useful,
                 * but WITHOUT ANY WARRANTY; without even the implied warranty of
                 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                 * GNU General Public License for more details.
                 * 
                 * You should have received a copy of the LSST License Statement and 
                 * the GNU General Public License along with this program.  If not, 
                 * see <http://www.lsstcorp.org/LegalNotices/>.
                 */
                 
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
23   <a href="#ad055a67">ad055a67</a> - #include "algorithms/Measure.h"</div>
                #include "lsst/meas/algorithms/CR.h"
                #include "lsst/meas/algorithms/Interp.h"
                #include "lsst/meas/algorithms/PSF.h"
                #include "lsst/meas/algorithms/PsfCandidate.h"
                #include "lsst/meas/algorithms/SpatialModelPsf.h"
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
29   <a href="#b0d8591f">b0d8591f</a> - #include "lsst/meas/algorithms/Measure.h"</div>
                #include "lsst/meas/algorithms/Shapelet.h"
                #include "lsst/meas/algorithms/ShapeletInterpolation.h"
                #include "lsst/meas/algorithms/ShapeletKernel.h"
                #include "lsst/meas/algorithms/ShapeletPsfCandidate.h"
                #include "lsst/meas/algorithms/SizeMagnitudeStarSelector.h"
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
35   <a href="#b0d8591f">b0d8591f</a> - #include "lsst/meas/algorithms/detail/SincPhotometry.h"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
36   <a href="#b0d8591f">b0d8591f</a> - #include "lsst/meas/algorithms/FluxControl.h"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
37   <a href="#b0d8591f">b0d8591f</a> - #include "lsst/meas/algorithms/CentroidControl.h"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
38   <a href="#b0d8591f">b0d8591f</a> - #include "lsst/meas/algorithms/ShapeControl.h"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
39   <a href="#df2793a0">df2793a0</a> - #include "lsst/meas/algorithms/CorrectFluxes.h"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
40   <a href="#b0d8591f">b0d8591f</a> - #include "lsst/meas/algorithms/Classification.h"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
41   <a href="#b0d8591f">b0d8591f</a> - #include "lsst/meas/algorithms/PixelFlags.h"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
42   <a href="#b0d8591f">b0d8591f</a> - #include "lsst/meas/algorithms/SkyCoord.h"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
43   <a href="#22270023">22270023</a> - #include "lsst/meas/algorithms/RecordCentroid.h"</div>
                #include "lsst/meas/algorithms/KernelPsf.h"
                #include "lsst/meas/algorithms/SingleGaussianPsf.h"
                #include "lsst/meas/algorithms/DoubleGaussianPsf.h"
                #include "lsst/meas/algorithms/PcaPsf.h"
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
48   <a href="#f96ca54d">f96ca54d</a> - #include "lsst/meas/algorithms/SdssShapeControl.h"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
49   <a href="#f96ca54d">f96ca54d</a> - #include "lsst/meas/algorithms/GaussianFluxControl.h"</div>
                #include "lsst/meas/algorithms/CoaddPsf.h"
                #include "lsst/meas/algorithms/WarpedPsf.h"
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
52   <a href="#a5b0e165">a5b0e165</a> - #include "lsst/meas/algorithms/Photometry.h"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
53   <a href="#88d3bd3f">88d3bd3f</a> - #include "lsst/meas/algorithms/Jacobian.h"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
54   <a href="#57d718bf">57d718bf</a> - #include "lsst/meas/algorithms/FocalPlane.h"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
55   <a href="#1293a31c">1293a31c</a> - #include "lsst/meas/algorithms/BinnedWcs.h"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
56   <a href="#7cbd8df1">7cbd8df1</a> - #include "lsst/meas/algorithms/CoaddBoundedField.h"</div>
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="7cbd8df1"/></a>7cbd8df1</h3>

<pre>
commit 7cbd8df1c9d4e6712af9ae51eb92d84cc47f9b15
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Wed Jun 4 17:10:07 2014 -0400

    Add CoaddBoundedField class to coadd aperture corrections
</pre>
<h3><a name="b0d8591f"/></a>b0d8591f</h3>

<pre>
commit b0d8591f0e28fd34c95f1548ebda5695e46d2a22
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Mon Feb 20 18:14:44 2012 -0500

    merge from tickets/1843; tests/psf.py is failing, but it appears to be failing on master too
</pre>
<h3><a name="a5b0e165"/></a>a5b0e165</h3>

<pre>
commit a5b0e165f74cab1e7a62ddbb47006b69b411653f
Author: Paul Price <price@astro.princeton.edu>
Date:   Mon Feb 25 19:25:07 2013 +0900

    Clean up the SincCoeffs caching model.
    
    Made the SincCoeffs singleton class public (in lsst::meas::algorithms::photometry)
    so users can explicitly cache coefficients for desired (circular) apertures.
    Coeffs are only marked persistent when they're placed in the cache.
    Apertures are now specified as an lsst::afw::geom::ellipses::Axes so that
    conversions between different types of ellipses can happen automatically.
    SincCoeffs cache is now available from Python too.
    Add test for caching.
</pre>
<h3><a name="ad055a67"/></a>ad055a67</h3>

<pre>
commit ad055a676f2fcf05be7d9ed9de76463805544fe5
Author: dubcovsky <dubcovsky@git.lsstcorp.org>
Date:   Tue Mar 10 21:54:20 2009 +0000

    added algorithms.h for simple include statements
</pre>
<h3><a name="1293a31c"/></a>1293a31c</h3>

<pre>
commit 1293a31c19c238ba2c2acd8f67ec1be742764b66
Author: Paul Price <price@astro.princeton.edu>
Date:   Thu Mar 20 16:47:59 2014 -0400

    add BinnedWcs
    
    Wraps Wcs with binning.  This is intended for use in background
    modeling, where we bin the image into super-pixels.
</pre>
<h3><a name="df2793a0"/></a>df2793a0</h3>

<pre>
commit df2793a0a4dc9c9732dd6ba77e1f197fe0aac01d
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Wed Mar 27 18:13:12 2013 -0400

    Move aperture correction and ScaledFlux-tying into a pluggable algorithm.
</pre>
<h3><a name="88d3bd3f"/></a>88d3bd3f</h3>

<pre>
commit 88d3bd3f32cf4d0138b80148e57bc275fc8c3454
Author: Paul Price <price@astro.princeton.edu>
Date:   Fri May 3 10:23:54 2013 -0400

    Jacobian: add Algorithm to compute the Jacobian.
    
    The Jacobian is calculated relative to the JacobianControl.pixelScale.
</pre>
<h3><a name="57d718bf"/></a>57d718bf</h3>

<pre>
commit 57d718bf51b255adf5789e389dfb776ecaa062d1
Author: Paul Price <price@astro.princeton.edu>
Date:   Sun May 26 03:45:26 2013 +0900

    fix up building of focalplane algorithm
</pre>
<h3><a name="f96ca54d"/></a>f96ca54d</h3>

<pre>
commit f96ca54dc15b5c7dca52f96164f0b987de82e8c4
Author: Paul Price <price@astro.princeton.edu>
Date:   Thu Feb 7 16:28:47 2013 -0500

    Use common values for adaptive moments convergence parameters.
    
    Review (https://dev.lsstcorp.org/trac/ticket/2638#comment:6) notes that
    the adaptive moments convergence parameters are reused multiple times.
    Using the same values (declared as 'const' in SdssShape.h) should reduce
    the potential for confusion.
    
    This necessitated a bit of reorganisation --- the SdssShapeControl and
    GaussianFluxControl have been moved into their own header files, so the
    standard FluxControl.h and ShapeControl.h don't have to include (directly)
    a detail.
</pre>
<h3><a name="22270023"/></a>22270023</h3>

<pre>
commit 22270023600897f2221803628e0904b707155cce
Author: Paul Price <price@astro.princeton.edu>
Date:   Thu Apr 26 16:39:55 2012 -0400

    Since forced photometry simply uses the centroid from the reference source, it might be desirable to record what that x,y position is.  The RecordCentroid algorithm just saves the centroid passed to it.  Unfortunately, it cannot be used in a 'slot'.
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
</div>


[Return to list](#homelist)
# <a name="python/lsst/meas/algorithms/findCosmicRaysConfig.py"/></a>python/lsst/meas/algorithms/findCosmicRaysConfig.py
### Diff:

<pre>
                # 
                # LSST Data Management System
                # Copyright 2008, 2009, 2010 LSST Corporation.
                # 
                # This product includes software developed by the
                # LSST Project (http://www.lsst.org/).
                #
                # This program is free software: you can redistribute it and/or modify
                # it under the terms of the GNU General Public License as published by
                # the Free Software Foundation, either version 3 of the License, or
                # (at your option) any later version.
                # 
                # This program is distributed in the hope that it will be useful,
                # but WITHOUT ANY WARRANTY; without even the implied warranty of
                # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                # GNU General Public License for more details.
                # 
                # You should have received a copy of the LSST License Statement and 
                # the GNU General Public License along with this program.  If not, 
                # see <http://www.lsstcorp.org/LegalNotices/>.
                #
                import lsst.pex.config as pexConfig
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
23   <a href="#1d4ffae2">1d4ffae2</a> - from . import algorithmsLib</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
24   <a href="#1d4ffae2">1d4ffae2</a> - from . import detection</div>
                
                class FindCosmicRaysConfig(pexConfig.Config):
                    """Config for the findCosmicRays function
                    """
                    nCrPixelMax = pexConfig.Field(
                        dtype = int,
                        doc = "maximum number of contaminated pixels",
                        default = 10000,
                    )
                    minSigma = pexConfig.Field(
                        dtype = float,
                        doc = "CRs must be > this many sky-sig above sky",
                        default = 6.0,
                    )
                    min_DN = pexConfig.Field(
                        dtype = float,
                        doc = "CRs must have > this many DN (== electrons/gain) in initial detection",
                        default = 150.0,
                    )
                    cond3_fac = pexConfig.Field(
                        dtype = float,
                        doc = "used in condition 3 for CR; see CR.cc code",
                        default = 2.5,
                    )
                    cond3_fac2 = pexConfig.Field(
                        dtype = float,
                        doc = "used in condition 3 for CR; see CR.cc code",
                        default = 0.6,
                    )
                    niteration = pexConfig.Field(
                        dtype = int,
                        doc = "number of times to look for contaminated pixels near known CR pixels",
                        default = 3,
                    )
                    keepCRs = pexConfig.Field(
                        dtype = bool,
                        doc = "Don't interpolate over CR pixels",
                        default = False,
                    )
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
64   <a href="#1d4ffae2">1d4ffae2</a> -     background = pexConfig.ConfigField(</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
65   <a href="#1d4ffae2">1d4ffae2</a> -         dtype = detection.estimateBackground.ConfigClass,</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
66   <a href="#1d4ffae2">1d4ffae2</a> -         doc = "Background estimation configuration"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
67   <a href="#1d4ffae2">1d4ffae2</a> -         )</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
68   <a href="#1d4ffae2">1d4ffae2</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
69   <a href="#1d4ffae2">1d4ffae2</a> -     def setDefaults(self):</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
70   <a href="#2925c3a4">2925c3a4</a> -         self.background.useApprox = False</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
71   <a href="#1d4ffae2">1d4ffae2</a> -         self.background.binSize = 100000</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
72   <a href="#1d4ffae2">1d4ffae2</a> -         self.background.statisticsProperty = "MEDIAN"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
73   <a href="#1d4ffae2">1d4ffae2</a> -         self.background.undersampleStyle = "REDUCE_INTERP_ORDER"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
74   <a href="#1d4ffae2">1d4ffae2</a> -         self.background.algorithm = "AKIMA_SPLINE"</div>
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="2925c3a4"/></a>2925c3a4</h3>

<pre>
commit 2925c3a4c485f38aa6aec9cc057f844af48d24d1
Author: Steven Bickerton <steven.bickerton@gmail.com>
Date:   Fri Aug 29 12:52:02 2014 +0900

    allow Approx to be selected for background.
</pre>
<h3><a name="1d4ffae2"/></a>1d4ffae2</h3>

<pre>
commit 1d4ffae208574b210a627a473f3d63a0b09d9825
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Tue Feb 26 06:06:52 2013 +0900

    Support full background models when detecting cosmic rays
    
    Needed for e.g. M31
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
</div>


[Return to list](#homelist)
# <a name="python/lsst/meas/algorithms/detection.py"/></a>python/lsst/meas/algorithms/detection.py
### Diff:

<pre>
                 
                # LSST Data Management System
                # Copyright 2008, 2009, 2010, 2011 LSST Corporation.
                # 
                # This product includes software developed by the
                # LSST Project (http://www.lsst.org/).
                #
                # This program is free software: you can redistribute it and/or modify
                # it under the terms of the GNU General Public License as published by
                # the Free Software Foundation, either version 3 of the License, or
                # (at your option) any later version.
                # 
                # This program is distributed in the hope that it will be useful,
                # but WITHOUT ANY WARRANTY; without even the implied warranty of
                # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                # GNU General Public License for more details.
                # 
                # You should have received a copy of the LSST License Statement and 
                # the GNU General Public License along with this program.  If not, 
                # see <http://www.lsstcorp.org/LegalNotices/>.
                #
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
22   <a href="#b0d8591f">b0d8591f</a> - import numpy</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
23   <a href="#b0d8591f">b0d8591f</a> - </div>
                import lsstDebug
                import lsst.pex.logging as pexLogging 
                
                import lsst.pex.config as pexConfig
                import lsst.afw.math as afwMath
                import lsst.afw.table as afwTable
                import lsst.afw.image as afwImage
                import lsst.afw.geom as afwGeom
                import lsst.afw.detection as afwDet
                import lsst.pipe.base as pipeBase
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
35   <a href="#b0d8591f">b0d8591f</a> - from . import algorithmsLib</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
36   <a href="#b0d8591f">b0d8591f</a> - </div>
                __all__ = ("SourceDetectionConfig", "SourceDetectionTask", "getBackground",
                           "estimateBackground", "BackgroundConfig", "addExposures")
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
40   <a href="#9e16f9e8">9e16f9e8</a> - import lsst.daf.persistence as dafPersist</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
41   <a href="#4a085ef2">4a085ef2</a> - import lsst.pex.config as pexConfig</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
42   <a href="#7ef81330">7ef81330</a> - import lsst.afw.detection as afwDet</div>
                import lsst.afw.display.ds9 as ds9
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
44   <a href="#5eab5bda">5eab5bda</a> - import lsst.afw.geom as afwGeom</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
45   <a href="#5eab5bda">5eab5bda</a> - import lsst.afw.image as afwImage</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
46   <a href="#7ef81330">7ef81330</a> - import lsst.afw.math as afwMath</div>
                
                class BackgroundConfig(pexConfig.Config):
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
39   <a href="#c1eaaa92">c1eaaa92</a> +     """!Config for background estimation</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
40   <a href="#9e83767f">9e83767f</a> +     """</div>
                    statisticsProperty = pexConfig.ChoiceField(
                        doc="type of statistic to use for grid points",
                        dtype=str, default="MEANCLIP",
                        allowed={
                            "MEANCLIP": "clipped mean",
                            "MEAN": "unclipped mean",
                            "MEDIAN": "median",
                            }
                        )
                    undersampleStyle = pexConfig.ChoiceField(
                        doc="behaviour if there are too few points in grid for requested interpolation style",
                        dtype=str, default="REDUCE_INTERP_ORDER",
                        allowed={
                            "THROW_EXCEPTION": "throw an exception if there are too few points",
                            "REDUCE_INTERP_ORDER": "use an interpolation style with a lower order.",
                            "INCREASE_NXNYSAMPLE": "Increase the number of samples used to make the interpolation grid.",
                            }
                        )
                    binSize = pexConfig.RangeField(
                        doc="how large a region of the sky should be used for each background point",
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
69   <a href="#2925c3a4">2925c3a4</a> -         dtype=int, default=128, min=10</div>
              ?                            - ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
61   <a href="#ea4e9351">ea4e9351</a> +         dtype=int, default=256, min=10</div>
              ?                             ^^
                        )
                    algorithm = pexConfig.ChoiceField(
                        doc="how to interpolate the background values. This maps to an enum; see afw::math::Background",
                        dtype=str, default="NATURAL_SPLINE", optional=True,
                        allowed={
                            "CONSTANT" : "Use a single constant value",
                            "LINEAR" : "Use linear interpolation",
                            "NATURAL_SPLINE" : "cubic spline with zero second derivative at endpoints",
                            "AKIMA_SPLINE": "higher-level nonlinear spline that is more robust to outliers",
                            "NONE": "No background estimation is to be attempted",
                            }
                        )
                    ignoredPixelMask = pexConfig.ListField(
                        doc="Names of mask planes to ignore while estimating the background",
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
84   <a href="#4a70da67">4a70da67</a> -         dtype=str, default = ["BAD", "EDGE", "DETECTED", "DETECTED_NEGATIVE", "NO_DATA",],</div>
              ?                               -------                                       ------------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
76   <a href="#ea4e9351">ea4e9351</a> +         dtype=str, default = ["EDGE", "DETECTED", "DETECTED_NEGATIVE"],</div>
                        itemCheck = lambda x: x in afwImage.MaskU().getMaskPlaneDict().keys(),
                        )
                    isNanSafe = pexConfig.Field(
                        doc="Ignore NaNs when estimating the background",
                        dtype=bool, default=False,
                    )
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
92   <a href="#2925c3a4">2925c3a4</a> -     useApprox = pexConfig.Field(</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
93   <a href="#2925c3a4">2925c3a4</a> -         doc="Use Approximate (Chebyshev) to model background.",</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
94   <a href="#2925c3a4">2925c3a4</a> -         dtype=bool, default=True,</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
95   <a href="#2925c3a4">2925c3a4</a> -     )</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
96   <a href="#2925c3a4">2925c3a4</a> -     approxOrder = pexConfig.Field(</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
97   <a href="#2925c3a4">2925c3a4</a> -         doc="Apprimation order for background Chebyshev (valid only with useApprox=True)",</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
98   <a href="#2925c3a4">2925c3a4</a> -         dtype=int, default=6,</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
99   <a href="#2925c3a4">2925c3a4</a> -     )</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
100  <a href="#2925c3a4">2925c3a4</a> -     </div>
                    def validate(self):
                        pexConfig.Config.validate(self)
                        # Allow None to be used as an equivalent for "NONE", even though C++ expects the latter.
                        if self.algorithm is None:
                            self.algorithm = "NONE"
                
                class SourceDetectionConfig(pexConfig.Config):
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
91   <a href="#c1eaaa92">c1eaaa92</a> +     """!Configuration parameters for the SourceDetectionTask</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
92   <a href="#9e83767f">9e83767f</a> +     """</div>
                    minPixels = pexConfig.RangeField(
                        doc="detected sources with fewer than the specified number of pixels will be ignored",
                        dtype=int, optional=False, default=1, min=0,
                    )
                    isotropicGrow = pexConfig.Field(
                        doc="Pixels should be grown as isotropically as possible (slower)",
                        dtype=bool, optional=False, default=False,
                    )
                    nSigmaToGrow = pexConfig.Field(
                        doc="Grow detections by nSigmaToGrow * sigma; if 0 then do not grow",
                        dtype=float, default=2.4, # 2.4 pixels/sigma is roughly one pixel/FWHM
                    )
                    returnOriginalFootprints = pexConfig.Field(
                        doc="Grow detections to set the image mask bits, but return the original (not-grown) footprints",
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
122  <a href="#8e9fb159">8e9fb159</a> -         dtype=bool, optional=False, default=False</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
107  <a href="#3a2c781d">3a2c781d</a> +         dtype=bool, optional=False, default=True    # TODO: set default to False once we have a deblender; ticket #2138</div>
                    )
                    thresholdValue = pexConfig.RangeField(
                        doc="Threshold for footprints",
                        dtype=float, optional=False, default=5.0, min=0.0,
                    )
                    includeThresholdMultiplier = pexConfig.RangeField(
                        doc="Include threshold relative to thresholdValue",
                        dtype=float, default=1.0, min=0.0,
                        )        
                    thresholdType = pexConfig.ChoiceField(
                        doc="specifies the desired flavor of Threshold",
                        dtype=str, optional=False, default="stdev",
                        allowed={
                            "variance": "threshold applied to image variance",
                            "stdev": "threshold applied to image std deviation",
                            "value": "threshold applied to image value",
                            "pixel_stdev": "threshold applied to per-pixel std deviation",
                        }
                    )
                    thresholdPolarity = pexConfig.ChoiceField(
                        doc="specifies whether to detect positive, or negative sources, or both",
                        dtype=str, optional=False, default="positive",
                        allowed={
                            "positive": "detect only positive sources",
                            "negative": "detect only negative sources",
                            "both": "detect both positive and negative sources",
                        }
                    )
                    adjustBackground = pexConfig.Field(
                        dtype = float,
                        doc = "Fiddle factor to add to the background; debugging only",
                        default = 0.0,
                    )
                    reEstimateBackground = pexConfig.Field(
                        dtype = bool,
                        doc = "Estimate the background again after final source detection?",
                        default = True, optional=False,
                    )
                    background = pexConfig.ConfigField(
                        dtype=BackgroundConfig,
                        doc="Background re-estimation configuration"
                        )
                
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
151  <a href="#9e83767f">9e83767f</a> + ## \addtogroup LSST_task_documentation</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
152  <a href="#9e83767f">9e83767f</a> + ## \{</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
153  <a href="#9e83767f">9e83767f</a> + ## \page sourceDetectionTask</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
154  <a href="#9e83767f">9e83767f</a> + ## \ref SourceDetectionTask_ "SourceDetectionTask"</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
155  <a href="#662c0a80">662c0a80</a> + ## \copybrief SourceDetectionTask</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
156  <a href="#9e83767f">9e83767f</a> + ## \}</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
157  <a href="#9e83767f">9e83767f</a> + </div>
                class SourceDetectionTask(pipeBase.Task):
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
167  <a href="#b0d8591f">b0d8591f</a> -     """</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
159  <a href="#9e83767f">9e83767f</a> +     """!</div>
              ?        +
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
160  <a href="#9e83767f">9e83767f</a> + \anchor SourceDetectionTask_</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
161  <a href="#9e83767f">9e83767f</a> + </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
168  <a href="#0fa9ad60">0fa9ad60</a> -     Detect positive and negative sources on an exposure and return a new SourceCatalog.</div>
              ? ^^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
162  <a href="#9e83767f">9e83767f</a> + \brief Detect positive and negative sources on an exposure and return a new \link table.SourceCatalog\endlink.</div>
              ? ^^^^^^                                                                      ++++++++++++             ++++++++
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
163  <a href="#9e83767f">9e83767f</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
164  <a href="#b94aaf90">b94aaf90</a> + \section meas_algorithms_detection_Contents Contents</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
165  <a href="#9e83767f">9e83767f</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
166  <a href="#9e83767f">9e83767f</a> +  - \ref meas_algorithms_detection_Purpose</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
167  <a href="#9e83767f">9e83767f</a> +  - \ref meas_algorithms_detection_Initialize</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
168  <a href="#226094cd">226094cd</a> +  - \ref meas_algorithms_detection_Invoke</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
169  <a href="#9e83767f">9e83767f</a> +  - \ref meas_algorithms_detection_Config</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
170  <a href="#9e83767f">9e83767f</a> +  - \ref meas_algorithms_detection_Debug</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
171  <a href="#9e83767f">9e83767f</a> +  - \ref meas_algorithms_detection_Example</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
172  <a href="#9e83767f">9e83767f</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
173  <a href="#226094cd">226094cd</a> + \section meas_algorithms_detection_Purpose      Description</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
174  <a href="#9e83767f">9e83767f</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
175  <a href="#9e83767f">9e83767f</a> + \copybrief SourceDetectionTask</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
176  <a href="#9e83767f">9e83767f</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
177  <a href="#226094cd">226094cd</a> + \section meas_algorithms_detection_Initialize   Task initialisation</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
178  <a href="#9e83767f">9e83767f</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
179  <a href="#9e83767f">9e83767f</a> + \copydoc init</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
180  <a href="#9e83767f">9e83767f</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
181  <a href="#226094cd">226094cd</a> + \section meas_algorithms_detection_Invoke       Invoking the Task</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
182  <a href="#9e83767f">9e83767f</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
183  <a href="#9e83767f">9e83767f</a> + \copydoc run</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
184  <a href="#9e83767f">9e83767f</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
185  <a href="#9e83767f">9e83767f</a> + \section meas_algorithms_detection_Config       Configuration parameters</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
186  <a href="#9e83767f">9e83767f</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
187  <a href="#9e83767f">9e83767f</a> + See \ref SourceDetectionConfig</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
188  <a href="#9e83767f">9e83767f</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
189  <a href="#226094cd">226094cd</a> + \section meas_algorithms_detection_Debug                Debug variables</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
190  <a href="#9e83767f">9e83767f</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
191  <a href="#9e83767f">9e83767f</a> + The \link lsst.pipe.base.cmdLineTask.CmdLineTask command line task\endlink interface supports a</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
192  <a href="#9e83767f">9e83767f</a> + flag \c -d to import \b debug.py from your \c PYTHONPATH; see \ref baseDebug for more about \b debug.py files.</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
193  <a href="#9e83767f">9e83767f</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
194  <a href="#9e83767f">9e83767f</a> + The available variables in SourceDetectionTask are:</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
195  <a href="#9e83767f">9e83767f</a> + <DL></div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
196  <a href="#9e83767f">9e83767f</a> +   <DT> \c display</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
197  <a href="#9e83767f">9e83767f</a> +   <DD></div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
198  <a href="#9e83767f">9e83767f</a> +   - If True, display the exposure on ds9's frame 0.  +ve detections in blue, -ve detections in cyan</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
199  <a href="#9e83767f">9e83767f</a> +   - If display > 1, display the convolved exposure on frame 1</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
200  <a href="#9e83767f">9e83767f</a> + </DL></div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
201  <a href="#9e83767f">9e83767f</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
202  <a href="#226094cd">226094cd</a> + \section meas_algorithms_detection_Example      A complete example of using SourceDetectionTask</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
203  <a href="#9e83767f">9e83767f</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
204  <a href="#9e83767f">9e83767f</a> + This code is in \link measAlgTasks.py\endlink in the examples directory, and can be run as \em e.g.</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
205  <a href="#9e83767f">9e83767f</a> + \code</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
206  <a href="#9e83767f">9e83767f</a> + examples/measAlgTasks.py --ds9</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
207  <a href="#9e83767f">9e83767f</a> + \endcode</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
208  <a href="#9e83767f">9e83767f</a> + \dontinclude measAlgTasks.py</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
209  <a href="#9e83767f">9e83767f</a> + The example also runs the SourceMeasurementTask; see \ref meas_algorithms_measurement_Example for more explanation.</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
210  <a href="#9e83767f">9e83767f</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
211  <a href="#9e83767f">9e83767f</a> + Import the task (there are some other standard imports; read the file if you're confused)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
212  <a href="#9e83767f">9e83767f</a> + \skipline SourceDetectionTask</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
213  <a href="#9e83767f">9e83767f</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
214  <a href="#9e83767f">9e83767f</a> + We need to create our task before processing any data as the task constructor</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
215  <a href="#bee4d682">bee4d682</a> + can add an extra column to the schema, but first we need an almost-empty Schema</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
216  <a href="#bee4d682">bee4d682</a> + \skipline makeMinimalSchema</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
217  <a href="#bee4d682">bee4d682</a> + after which we can call the constructor:</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
218  <a href="#9e83767f">9e83767f</a> + \skip SourceDetectionTask.ConfigClass</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
219  <a href="#9e83767f">9e83767f</a> + \until detectionTask</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
220  <a href="#9e83767f">9e83767f</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
221  <a href="#9e83767f">9e83767f</a> + We're now ready to process the data (we could loop over multiple exposures/catalogues using the same</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
222  <a href="#9e83767f">9e83767f</a> + task objects).  First create the output table:</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
223  <a href="#9e83767f">9e83767f</a> + \skipline afwTable</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
224  <a href="#9e83767f">9e83767f</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
225  <a href="#9e83767f">9e83767f</a> + And process the image</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
226  <a href="#bee4d682">bee4d682</a> + \skipline result</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
227  <a href="#bee4d682">bee4d682</a> + (You may not be happy that the threshold was set in the config before creating the Task rather than being set</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
228  <a href="#bee4d682">bee4d682</a> + separately for each exposure.  You \em can reset it just before calling the run method if you must, but we</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
229  <a href="#bee4d682">bee4d682</a> + should really implement a better solution).</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
230  <a href="#9e83767f">9e83767f</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
231  <a href="#9e83767f">9e83767f</a> + We can then unpack and use the results:</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
232  <a href="#9e83767f">9e83767f</a> + \skip sources</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
233  <a href="#9e83767f">9e83767f</a> + \until print</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
234  <a href="#9e83767f">9e83767f</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
235  <a href="#9e83767f">9e83767f</a> + <HR></div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
236  <a href="#9e83767f">9e83767f</a> + To investigate the \ref meas_algorithms_detection_Debug, put something like</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
237  <a href="#9e83767f">9e83767f</a> + \code{.py}</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
238  <a href="#9e83767f">9e83767f</a> +     import lsstDebug</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
239  <a href="#9e83767f">9e83767f</a> +     def DebugInfo(name):</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
240  <a href="#9e83767f">9e83767f</a> +         di = lsstDebug.getInfo(name)        # N.b. lsstDebug.Info(name) would call us recursively</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
241  <a href="#9e83767f">9e83767f</a> +         if name == "lsst.meas.algorithms.detection":</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
242  <a href="#9e83767f">9e83767f</a> +             di.display = 1</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
243  <a href="#9e83767f">9e83767f</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
244  <a href="#9e83767f">9e83767f</a> +         return di</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
245  <a href="#9e83767f">9e83767f</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
246  <a href="#9e83767f">9e83767f</a> +     lsstDebug.Info = DebugInfo</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
247  <a href="#9e83767f">9e83767f</a> + \endcode</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
248  <a href="#9e83767f">9e83767f</a> + into your debug.py file and run measAlgTasks.py with the \c --debug flag.</div>
                    """
                    ConfigClass = SourceDetectionConfig
                    _DefaultName = "sourceDetection"
                
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
253  <a href="#9e83767f">9e83767f</a> +     # Need init as well as __init__ because "\copydoc __init__" fails (doxygen bug 732264)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
254  <a href="#e9597626">e9597626</a> +     def init(self, schema=None, **kwds):</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
255  <a href="#9e83767f">9e83767f</a> +         """!Create the detection task.  Most arguments are simply passed onto pipe.base.Task.</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
256  <a href="#9e83767f">9e83767f</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
257  <a href="#9e83767f">9e83767f</a> +         \param schema An lsst::afw::table::Schema used to create the output lsst.afw.table.SourceCatalog</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
258  <a href="#9e83767f">9e83767f</a> +         \param **kwds Keyword arguments passed to lsst.pipe.base.task.Task.__init__.</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
259  <a href="#9e83767f">9e83767f</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
260  <a href="#9e83767f">9e83767f</a> +         If schema is not None, a 'flags.negative' field will be added to label detections</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
261  <a href="#9e83767f">9e83767f</a> +         made with a negative threshold.</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
262  <a href="#9e83767f">9e83767f</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
263  <a href="#9e83767f">9e83767f</a> +         \note This task can add fields to the schema, so any code calling this task must ensure that</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
264  <a href="#bc4b5c7c">bc4b5c7c</a> +         these columns are indeed present in the input match list; see \ref Example</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
265  <a href="#9e83767f">9e83767f</a> +         """</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
266  <a href="#e9597626">e9597626</a> +         self.__init__(schema, **kwds)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
267  <a href="#9e83767f">9e83767f</a> + </div>
                    def __init__(self, schema=None, **kwds):
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
269  <a href="#bc4b5c7c">bc4b5c7c</a> +         """!Create the detection task.  See SourceDetectionTask.init for documentation</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
174  <a href="#b0d8591f">b0d8591f</a> -         """Create the detection task.  Most arguments are simply passed onto pipe_base.Task.</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
175  <a href="#b0d8591f">b0d8591f</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
176  <a href="#b0d8591f">b0d8591f</a> -         If schema is not None, it will be used to register a 'flags.negative' flag field</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
177  <a href="#b0d8591f">b0d8591f</a> -         that will be set for negative detections.</div>
                        """
                        pipeBase.Task.__init__(self, **kwds)
                        if schema is not None:
                            self.negativeFlagKey = schema.addField(
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
182  <a href="#b0d8591f">b0d8591f</a> -                 "flags.negative", type="Flag",</div>
              ?                       ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
274  <a href="#8cffc17a">8cffc17a</a> +                 "flags_negative", type="Flag",</div>
              ?                       ^
                                doc="set if source was detected as significantly negative"
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
184  <a href="#b0d8591f">b0d8591f</a> -                 )</div>
              ? ----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
276  <a href="#8cffc17a">8cffc17a</a> +             )</div>
                        else:
                            if self.config.thresholdPolarity == "both":
                                self.log.log(self.log.WARN, "Detection polarity set to 'both', but no flag will be "\
                                             "set to distinguish between positive and negative detections")
                            self.negativeFlagKey = None
                
                    @pipeBase.timeMethod
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
192  <a href="#e57166a5">e57166a5</a> -     def makeSourceCatalog(self, table, exposure, doSmooth=True, sigma=None, clearMask=True):</div>
              ?         ^^^^^^ ^^^^^^^^^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
284  <a href="#9e83767f">9e83767f</a> +     def run(self, table, exposure, doSmooth=True, sigma=None, clearMask=True):</div>
              ?         ^ ^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
193  <a href="#0fa9ad60">0fa9ad60</a> -         """Run source detection and create a SourceCatalog.</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
285  <a href="#9e83767f">9e83767f</a> +         """!Run source detection and create a SourceCatalog.</div>
              ?            +
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
195  <a href="#8cf150dd">8cf150dd</a> -         To avoid dealing with sources and tables, use detectFootprints() to just get the FootprintSets.</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
196  <a href="#b0d8591f">b0d8591f</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
197  <a href="#0fa9ad60">0fa9ad60</a> -         @param table    lsst.afw.table.SourceTable object that will be used to created the SourceCatalog.</div>
              ?         ^                                                                            -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
287  <a href="#9e83767f">9e83767f</a> +         \param table    lsst.afw.table.SourceTable object that will be used to create the SourceCatalog.</div>
              ?         ^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
198  <a href="#b0d8591f">b0d8591f</a> -         @param exposure Exposure to process; DETECTED mask plane will be set in-place.</div>
              ?         ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
288  <a href="#9e83767f">9e83767f</a> +         \param exposure Exposure to process; DETECTED mask plane will be set in-place.</div>
              ?         ^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
199  <a href="#11f0ee2f">11f0ee2f</a> -         @param doSmooth if True, smooth the image before detection using a Gaussian of width sigma</div>
              ?         ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
289  <a href="#9e83767f">9e83767f</a> +         \param doSmooth if True, smooth the image before detection using a Gaussian of width sigma (default: True)</div>
              ?         ^                                                                                         ++++++++++++++++
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
200  <a href="#11f0ee2f">11f0ee2f</a> -         @param sigma    sigma of PSF (pixels); used for smoothing and to grow detections;</div>
              ?         ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
290  <a href="#9e83767f">9e83767f</a> +         \param sigma    sigma of PSF (pixels); used for smoothing and to grow detections;</div>
              ?         ^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
201  <a href="#11f0ee2f">11f0ee2f</a> -             if None then measure the sigma of the PSF of the exposure</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
291  <a href="#9e83767f">9e83767f</a> +             if None then measure the sigma of the PSF of the exposure (default: None)</div>
              ?                                                                      ++++++++++++++++
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
202  <a href="#b00b5189">b00b5189</a> -         @param clearMask Clear DETECTED{,_NEGATIVE} planes before running detection</div>
              ?         ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
292  <a href="#9e83767f">9e83767f</a> +         \param clearMask Clear DETECTED{,_NEGATIVE} planes before running detection (default: True)</div>
              ?         ^                                                                          ++++++++++++++++
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
293  <a href="#9e83767f">9e83767f</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
294  <a href="#9e83767f">9e83767f</a> +         \return a lsst.pipe.base.Struct with:</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
295  <a href="#9e83767f">9e83767f</a> +           - sources -- an lsst.afw.table.SourceCatalog object</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
296  <a href="#9e83767f">9e83767f</a> +           - fpSets --- lsst.pipe.base.Struct returned by \link detectFootprints \endlink</div>
                        
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
204  <a href="#685f7aa2">685f7aa2</a> -         @return a Struct with:</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
205  <a href="#685f7aa2">685f7aa2</a> -           sources -- an lsst.afw.table.SourceCatalog object</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
206  <a href="#685f7aa2">685f7aa2</a> -           fpSets --- Struct returned by detectFootprints</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
298  <a href="#9e83767f">9e83767f</a> +         \throws ValueError if flags.negative is needed, but isn't in table's schema</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
299  <a href="#9e83767f">9e83767f</a> +         \throws lsst.pipe.base.TaskError if sigma=None, doSmooth=True and the exposure has no PSF</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
300  <a href="#9e83767f">9e83767f</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
301  <a href="#9e83767f">9e83767f</a> +         \note</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
302  <a href="#9e83767f">9e83767f</a> +         If you want to avoid dealing with Sources and Tables, you can use detectFootprints()</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
303  <a href="#9e83767f">9e83767f</a> +         to just get the afw::detection::FootprintSet%s.</div>
                        
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
208  <a href="#11f0ee2f">11f0ee2f</a> -         @raise pipe_base TaskError if sigma=None, doSmooth=True and the exposure has no PSF</div>
                        """
                        if self.negativeFlagKey is not None and self.negativeFlagKey not in table.getSchema():
                            raise ValueError("Table has incorrect Schema")
                        fpSets = self.detectFootprints(exposure=exposure, doSmooth=doSmooth, sigma=sigma,
                                                       clearMask=clearMask)
                        sources = afwTable.SourceCatalog(table)
                        table.preallocate(fpSets.numPos + fpSets.numNeg) # not required, but nice
                        if fpSets.negative:
                            fpSets.negative.makeSources(sources)
                            if self.negativeFlagKey:
                                for record in sources:
                                    record.set(self.negativeFlagKey, True)
                        if fpSets.positive:
                            fpSets.positive.makeSources(sources)
                        return pipeBase.Struct(
                            sources = sources,
                            fpSets = fpSets
                            )
                
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
324  <a href="#bc4b5c7c">bc4b5c7c</a> +     ## An alias for run             \deprecated Remove this alias after checking for where it's used</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
325  <a href="#9e83767f">9e83767f</a> +     makeSourceCatalog = run</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
326  <a href="#9e83767f">9e83767f</a> + </div>
                    @pipeBase.timeMethod
                    def detectFootprints(self, exposure, doSmooth=True, sigma=None, clearMask=True):
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
230  <a href="#b0d8591f">b0d8591f</a> -         """Detect footprints.</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
329  <a href="#9e83767f">9e83767f</a> +         """!Detect footprints.</div>
              ?            +
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
232  <a href="#b9b3956b">b9b3956b</a> -         @param exposure Exposure to process; DETECTED{,_NEGATIVE} mask plane will be set in-place.</div>
              ?         ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
331  <a href="#9e83767f">9e83767f</a> +         \param exposure Exposure to process; DETECTED{,_NEGATIVE} mask plane will be set in-place.</div>
              ?         ^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
233  <a href="#11f0ee2f">11f0ee2f</a> -         @param doSmooth if True, smooth the image before detection using a Gaussian of width sigma</div>
              ?         ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
332  <a href="#9e83767f">9e83767f</a> +         \param doSmooth if True, smooth the image before detection using a Gaussian of width sigma</div>
              ?         ^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
234  <a href="#11f0ee2f">11f0ee2f</a> -         @param sigma    sigma of PSF (pixels); used for smoothing and to grow detections;</div>
              ?         ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
333  <a href="#9e83767f">9e83767f</a> +         \param sigma    sigma of PSF (pixels); used for smoothing and to grow detections;</div>
              ?         ^
                            if None then measure the sigma of the PSF of the exposure
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
236  <a href="#18e934cf">18e934cf</a> -         @param clearMask Clear both DETECTED and DETECTED_NEGATIVE planes before running detection</div>
              ?         ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
335  <a href="#9e83767f">9e83767f</a> +         \param clearMask Clear both DETECTED and DETECTED_NEGATIVE planes before running detection</div>
              ?         ^
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
238  <a href="#b0d8591f">b0d8591f</a> -         @return a lsst.pipe.base.Struct with fields:</div>
              ?         ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
337  <a href="#9e83767f">9e83767f</a> +         \return a lsst.pipe.base.Struct with fields:</div>
              ?         ^
                        - positive: lsst.afw.detection.FootprintSet with positive polarity footprints (may be None)
                        - negative: lsst.afw.detection.FootprintSet with negative polarity footprints (may be None)
                        - numPos: number of footprints in positive or 0 if detection polarity was negative
                        - numNeg: number of footprints in negative or 0 if detection polarity was positive
                        - background: re-estimated background.  None if reEstimateBackground==False
                        
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
245  <a href="#11f0ee2f">11f0ee2f</a> -         @raise pipe_base TaskError if sigma=None and the exposure has no PSF</div>
              ?         ^ ^^ ^^    ^    ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
344  <a href="#9e83767f">9e83767f</a> +         \throws lsst.pipe.base.TaskError if sigma=None and the exposure has no PSF</div>
              ?         ^^^ ^^ ^^^^^^    ^    ^
                        """
                        try:
                            import lsstDebug
                            display = lsstDebug.Info(__name__).display
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
250  <a href="#4a085ef2">4a085ef2</a> -         except ImportError, e:</div>
              ?                           ---
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
349  <a href="#2d6e13ab">2d6e13ab</a> +         except ImportError:</div>
                            try:
                                display
                            except NameError:
                                display = False
                
                        if exposure is None:
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
257  <a href="#4a085ef2">4a085ef2</a> -             raise RuntimeException("No exposure for detection")</div>
              ?                           ^^^^^^ ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
356  <a href="#2d6e13ab">2d6e13ab</a> +             raise RuntimeError("No exposure for detection")</div>
              ?                           ^^ ^
                
                        maskedImage = exposure.getMaskedImage()
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
260  <a href="#b0d8591f">b0d8591f</a> -         region = maskedImage.getBBox(afwImage.PARENT)</div>
              ?                                      ---------------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
359  <a href="#2d3a5fcc">2d3a5fcc</a> +         region = maskedImage.getBBox()</div>
                
                        if clearMask:
                            mask = maskedImage.getMask()
                            mask &= ~(mask.getPlaneBitMask("DETECTED") | mask.getPlaneBitMask("DETECTED_NEGATIVE"))
                            del mask
                
                        if sigma is None:
                            psf = exposure.getPsf()
                            if psf is None:
                                raise pipeBase.TaskError("exposure has no PSF; must specify sigma")
                            shape = psf.computeShape()
                            sigma = shape.getDeterminantRadius()
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
273  <a href="#535c114f">535c114f</a> -             if not numpy.isfinite(sigma):</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
274  <a href="#1ec70a82">1ec70a82</a> -                 raise RuntimeError("Non-finite PSF width: %f" % sigma)</div>
                
                        self.metadata.set("sigma", sigma)
                        self.metadata.set("doSmooth", doSmooth)
                        
                        if not doSmooth:
                            convolvedImage = maskedImage.Factory(maskedImage)
                            middle = convolvedImage
                        else:
                            # smooth using a Gaussian (which is separate, hence fast) of width sigma
                            # make a SingleGaussian (separable) kernel with the 'sigma'
                            psf = exposure.getPsf()
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
286  <a href="#c0fd7da0">c0fd7da0</a> -             kWidth = (int(sigma * 7 + 0.5) / 2) * 2 + 1 # make sure it is odd</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
383  <a href="#e11ad0c8">e11ad0c8</a> +             kWidth = (int(sigma * 7 + 0.5) // 2) * 2 + 1 # make sure it is odd</div>
              ?                                             +
                            self.metadata.set("smoothingKernelWidth", kWidth)
                            gaussFunc = afwMath.GaussianFunction1D(sigma)
                            gaussKernel = afwMath.SeparableKernel(kWidth, kWidth, gaussFunc, gaussFunc)
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
291  <a href="#11f0ee2f">11f0ee2f</a> -             convolvedImage = maskedImage.Factory(maskedImage.getBBox(afwImage.PARENT))</div>
              ?                                                                      ---------------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
388  <a href="#2d3a5fcc">2d3a5fcc</a> +             convolvedImage = maskedImage.Factory(maskedImage.getBBox())</div>
                
                            afwMath.convolve(convolvedImage, maskedImage, gaussKernel, afwMath.ConvolutionControl())
                            #
                            # Only search psf-smooth part of frame
                            #
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
297  <a href="#b0d8591f">b0d8591f</a> -             goodBBox = gaussKernel.shrinkBBox(convolvedImage.getBBox(afwImage.PARENT))</div>
              ?                                                                      ---------------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
394  <a href="#2d3a5fcc">2d3a5fcc</a> +             goodBBox = gaussKernel.shrinkBBox(convolvedImage.getBBox())</div>
                            middle = convolvedImage.Factory(convolvedImage, goodBBox, afwImage.PARENT, False)
                            #
                            # Mark the parts of the image outside goodBBox as EDGE
                            #
                            self.setEdgeBits(maskedImage, goodBBox, maskedImage.getMask().getPlaneBitMask("EDGE"))
                
                        fpSets = pipeBase.Struct(positive=None, negative=None)
                
                        if self.config.thresholdPolarity != "negative":
                            fpSets.positive = self.thresholdImage(middle, "positive")
                        if self.config.reEstimateBackground or self.config.thresholdPolarity != "positive":
                            fpSets.negative = self.thresholdImage(middle, "negative")
                
                        for polarity, maskName in (("positive", "DETECTED"), ("negative", "DETECTED_NEGATIVE")):
                            fpSet = getattr(fpSets, polarity)
                            if fpSet is None:
                                continue
                            fpSet.setRegion(region)
                            if self.config.nSigmaToGrow > 0:
                                nGrow = int((self.config.nSigmaToGrow * sigma) + 0.5)
                                self.metadata.set("nGrow", nGrow)
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
319  <a href="#11f0ee2f">11f0ee2f</a> -                 fpSet = afwDet.FootprintSet(fpSet, nGrow, False)</div>
              ?                                                           ---
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
416  <a href="#2d6e13ab">2d6e13ab</a> +                 fpSet = afwDet.FootprintSet(fpSet, nGrow, self.config.isotropicGrow)</div>
              ?                                                             +++++++++++++++++++++++
                            fpSet.setMask(maskedImage.getMask(), maskName)
                            if not self.config.returnOriginalFootprints:
                                setattr(fpSets, polarity, fpSet)
                
                        fpSets.numPos = len(fpSets.positive.getFootprints()) if fpSets.positive is not None else 0
                        fpSets.numNeg = len(fpSets.negative.getFootprints()) if fpSets.negative is not None else 0
                
                        if self.config.thresholdPolarity != "negative":
                            self.log.log(self.log.INFO, "Detected %d positive sources to %g sigma." %
                                         (fpSets.numPos, self.config.thresholdValue))
                
                        fpSets.background = None
                        if self.config.reEstimateBackground:
                            mi = exposure.getMaskedImage()
                            bkgd = getBackground(mi, self.config.background)
                
                            if self.config.adjustBackground:
                                self.log.log(self.log.WARN, "Fiddling the background by %g" % self.config.adjustBackground)
                
                                bkgd += self.config.adjustBackground
                            fpSets.background = bkgd
                            self.log.log(self.log.INFO, "Resubtracting the background after object detection")
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
342  <a href="#2925c3a4">2925c3a4</a> - </div>
                            mi -= bkgd.getImageF()
                            del mi
                
                        if self.config.thresholdPolarity == "positive":
                            if self.config.reEstimateBackground:
                                mask = maskedImage.getMask()
                                mask &= ~mask.getPlaneBitMask("DETECTED_NEGATIVE")
                                del mask
                            fpSets.negative = None
                        else:
                            self.log.log(self.log.INFO, "Detected %d negative sources to %g %s" %
                                         (fpSets.numNeg, self.config.thresholdValue,
                                          ("DN" if self.config.thresholdType == "value" else "sigma")))
                
                        if display:
                            ds9.mtv(exposure, frame=0, title="detection")
                
                            if convolvedImage and display and display > 1:
                                ds9.mtv(convolvedImage, frame=1, title="PSF smoothed")
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
363  <a href="#4a085ef2">4a085ef2</a> -             if middle and display and display > 1:</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
364  <a href="#4a085ef2">4a085ef2</a> -                 ds9.mtv(middle, frame=2, title="middle")</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
365  <a href="#b0d8591f">b0d8591f</a> - </div>
                        return fpSets
                
                    def thresholdImage(self, image, thresholdParity, maskName="DETECTED"):
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
369  <a href="#b0d8591f">b0d8591f</a> -         """Threshold the convolved image, returning a FootprintSet.</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
462  <a href="#9e83767f">9e83767f</a> +         """!Threshold the convolved image, returning a FootprintSet.</div>
              ?            +
                        Helper function for detect().
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
372  <a href="#b0d8591f">b0d8591f</a> -         @param image The (optionally convolved) MaskedImage to threshold</div>
              ?         ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
465  <a href="#9e83767f">9e83767f</a> +         \param image The (optionally convolved) MaskedImage to threshold</div>
              ?         ^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
373  <a href="#b0d8591f">b0d8591f</a> -         @param thresholdParity Parity of threshold</div>
              ?         ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
466  <a href="#9e83767f">9e83767f</a> +         \param thresholdParity Parity of threshold</div>
              ?         ^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
374  <a href="#4a085ef2">4a085ef2</a> -         @param maskName Name of mask to set</div>
              ?         ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
467  <a href="#9e83767f">9e83767f</a> +         \param maskName Name of mask to set</div>
              ?         ^
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
376  <a href="#b0d8591f">b0d8591f</a> -         @return FootprintSet</div>
              ?         ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
469  <a href="#9e83767f">9e83767f</a> +         \return FootprintSet</div>
              ?         ^
                        """
                        parity = False if thresholdParity == "negative" else True
                        threshold = afwDet.createThreshold(self.config.thresholdValue, self.config.thresholdType, parity)
                        threshold.setIncludeMultiplier(self.config.includeThresholdMultiplier)
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
381  <a href="#88196ac2">88196ac2</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
382  <a href="#88196ac2">88196ac2</a> -         if self.config.thresholdType == 'stdev':</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
383  <a href="#4a70da67">4a70da67</a> -             bad = image.getMask().getPlaneBitMask(['BAD', 'SAT', 'EDGE', 'NO_DATA',])</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
384  <a href="#88196ac2">88196ac2</a> -             sctrl = afwMath.StatisticsControl()</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
385  <a href="#4a70da67">4a70da67</a> -             sctrl.setAndMask(bad)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
386  <a href="#88196ac2">88196ac2</a> -             stats = afwMath.makeStatistics(image, afwMath.STDEVCLIP, sctrl)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
387  <a href="#88196ac2">88196ac2</a> -             thres = stats.getValue(afwMath.STDEVCLIP) * self.config.thresholdValue</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
388  <a href="#d90603df">d90603df</a> -             threshold = afwDet.createThreshold(thres, 'value', parity)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
389  <a href="#88196ac2">88196ac2</a> -             threshold.setIncludeMultiplier(self.config.includeThresholdMultiplier)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
390  <a href="#88196ac2">88196ac2</a> - </div>
                        fpSet = afwDet.FootprintSet(image, threshold, maskName, self.config.minPixels)
                        return fpSet
                
                    @staticmethod
                    def setEdgeBits(maskedImage, goodBBox, edgeBitmask):
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
396  <a href="#b0d8591f">b0d8591f</a> -         """Set the edgeBitmask bits for all of maskedImage outside goodBBox"""</div>
              ?                                                                            ---
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
479  <a href="#c1eaaa92">c1eaaa92</a> +         """!Set the edgeBitmask bits for all of maskedImage outside goodBBox</div>
              ?            +
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
480  <a href="#c1eaaa92">c1eaaa92</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
481  <a href="#c1eaaa92">c1eaaa92</a> +         \param[in,out] maskedImage  image on which to set edge bits in the mask</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
482  <a href="#c1eaaa92">c1eaaa92</a> +         \param[in] goodBBox  bounding box of good pixels, in LOCAL coordinates</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
483  <a href="#c1eaaa92">c1eaaa92</a> +         \param[in] edgeBitmask  bit mask to OR with the existing mask bits in the region outside goodBBox </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
484  <a href="#c1eaaa92">c1eaaa92</a> +         """</div>
                        msk = maskedImage.getMask()
                
                        mx0, my0 = maskedImage.getXY0()
                        for x0, y0, w, h in ([0, 0,
                                              msk.getWidth(), goodBBox.getBeginY() - my0],
                                             [0, goodBBox.getEndY() - my0, msk.getWidth(),
                                              maskedImage.getHeight() - (goodBBox.getEndY() - my0)],
                                             [0, 0,
                                              goodBBox.getBeginX() - mx0, msk.getHeight()],
                                             [goodBBox.getEndX() - mx0, 0,
                                              maskedImage.getWidth() - (goodBBox.getEndX() - mx0), msk.getHeight()],
                                             ):
                            edgeMask = msk.Factory(msk, afwGeom.BoxI(afwGeom.PointI(x0, y0),
                                                                     afwGeom.ExtentI(w, h)), afwImage.LOCAL)
                            edgeMask |= edgeBitmask
                
                def addExposures(exposureList):
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
414  <a href="#7ef81330">7ef81330</a> -     """</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
415  <a href="#7ef81330">7ef81330</a> -     Add a set of exposures together. </div>
              ?                                     -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
502  <a href="#c1eaaa92">c1eaaa92</a> +     """!Add a set of exposures together.</div>
              ?     ++++
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
416  <a href="#7ef81330">7ef81330</a> -     Assumes that all exposures in set have the same dimensions</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
503  <a href="#c1eaaa92">c1eaaa92</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
504  <a href="#c1eaaa92">c1eaaa92</a> +     \param[in] exposureList  sequence of exposures to add</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
505  <a href="#c1eaaa92">c1eaaa92</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
506  <a href="#c1eaaa92">c1eaaa92</a> +     \return an exposure of the same size as each exposure in exposureList,</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
507  <a href="#c1eaaa92">c1eaaa92</a> +     with the metadata from exposureList[0] and a masked image equal to the</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
508  <a href="#c1eaaa92">c1eaaa92</a> +     sum of all the exposure's masked images.</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
509  <a href="#c1eaaa92">c1eaaa92</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
510  <a href="#c1eaaa92">c1eaaa92</a> +     \throw LsstException if the exposures do not all have the same dimensions (but does not check xy0)</div>
                    """
                    exposure0 = exposureList[0]
                    image0 = exposure0.getMaskedImage()
                
                    addedImage = image0.Factory(image0, True)
                    addedImage.setXY0(image0.getXY0())
                
                    for exposure in exposureList[1:]:
                        image = exposure.getMaskedImage()
                        addedImage += image
                
                    addedExposure = exposure0.Factory(addedImage, exposure0.getWcs())
                    return addedExposure
                
                def getBackground(image, backgroundConfig, nx=0, ny=0, algorithm=None):
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
432  <a href="#7ef81330">7ef81330</a> -     """</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
433  <a href="#7ef81330">7ef81330</a> -     Make a new Exposure which is exposure - background</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
526  <a href="#c1eaaa92">c1eaaa92</a> +     """!Estimate the background of an image (a thin layer on lsst.afw.math.makeBackground)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
527  <a href="#c1eaaa92">c1eaaa92</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
528  <a href="#c1eaaa92">c1eaaa92</a> +     \param[in] image  image whose background is to be computed</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
529  <a href="#c1eaaa92">c1eaaa92</a> +     \param[in] backgroundConfig  configuration (a BackgroundConfig)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
530  <a href="#c1eaaa92">c1eaaa92</a> +     \param[in] nx  number of x bands; 0 for default</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
531  <a href="#c1eaaa92">c1eaaa92</a> +     \param[in] ny  number of y bands; 0 for default</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
532  <a href="#c1eaaa92">c1eaaa92</a> +     \param[in] algorithm  name of interpolation algorithm; see lsst.afw.math.BackgroundControl for details</div>
                    """
                    backgroundConfig.validate();
                
                    if not nx:
                        nx = image.getWidth()//backgroundConfig.binSize + 1
                    if not ny:
                        ny = image.getHeight()//backgroundConfig.binSize + 1
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
441  <a href="#c16fcfe1">c16fcfe1</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
442  <a href="#9f392b13">9f392b13</a> -     displayBackground = lsstDebug.Info(__name__).displayBackground</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
443  <a href="#9f392b13">9f392b13</a> -     if displayBackground:</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
444  <a href="#9f392b13">9f392b13</a> -         import itertools</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
445  <a href="#9f392b13">9f392b13</a> -         ds9.mtv(image, frame=1)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
446  <a href="#9f392b13">9f392b13</a> -         xPosts = numpy.rint(numpy.linspace(0, image.getWidth() + 1, num=nx, endpoint=True))</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
447  <a href="#9f392b13">9f392b13</a> -         yPosts = numpy.rint(numpy.linspace(0, image.getHeight() + 1, num=ny, endpoint=True))</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
448  <a href="#9f392b13">9f392b13</a> -         with ds9.Buffering():</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
449  <a href="#9f392b13">9f392b13</a> -             for (xMin, xMax), (yMin, yMax) in itertools.product(zip(xPosts[:-1], xPosts[1:]),</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
450  <a href="#9f392b13">9f392b13</a> -                                                                 zip(yPosts[:-1], yPosts[1:])):</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
451  <a href="#9f392b13">9f392b13</a> -                 ds9.line([(xMin, yMin), (xMin, yMax), (xMax, yMax), (xMax, yMin), (xMin, yMin)], frame=1)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
452  <a href="#9f392b13">9f392b13</a> - </div>
                
                    sctrl = afwMath.StatisticsControl()
                    sctrl.setAndMask(reduce(lambda x, y: x | image.getMask().getPlaneBitMask(y),
                                            backgroundConfig.ignoredPixelMask, 0x0))
                    sctrl.setNanSafe(backgroundConfig.isNanSafe)
                
                    pl = pexLogging.Debug("meas.utils.sourceDetection.getBackground")
                    pl.debug(3, "Ignoring mask planes: %s" % ", ".join(backgroundConfig.ignoredPixelMask))
                
                    if not algorithm:
                        algorithm = backgroundConfig.algorithm
                        
                    bctrl = afwMath.BackgroundControl(algorithm, nx, ny,
                                                      backgroundConfig.undersampleStyle, sctrl,
                                                      backgroundConfig.statisticsProperty)
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
469  <a href="#0dbf6700">0dbf6700</a> -     if backgroundConfig.useApprox:</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
470  <a href="#0dbf6700">0dbf6700</a> -         actrl = afwMath.ApproximateControl(afwMath.ApproximateControl.CHEBYSHEV, backgroundConfig.approxOrder)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
471  <a href="#0dbf6700">0dbf6700</a> -         bctrl.setApproximateControl(actrl)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
472  <a href="#4dbeaa8c">4dbeaa8c</a> - </div>
                    return afwMath.makeBackground(image, bctrl)
                
                getBackground.ConfigClass = BackgroundConfig
                    
                def estimateBackground(exposure, backgroundConfig, subtract=True, stats=True,
                                       statsKeys=None):
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
479  <a href="#2868db0d">2868db0d</a> -     """</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
480  <a href="#124d7e90">124d7e90</a> -     Estimate exposure's background using parameters in backgroundConfig.  </div>
              ?                                                                         --
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
562  <a href="#c1eaaa92">c1eaaa92</a> +     """!Estimate exposure's background using parameters in backgroundConfig.</div>
              ?     ++++
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
563  <a href="#c1eaaa92">c1eaaa92</a> + </div>
                    If subtract is true, make a copy of the exposure and subtract the background.  
                    If `stats` is True, measure the mean and variance of the background and
                    add them to the background-subtracted exposure's metadata with keys
                    "BGMEAN" and "BGVAR", or the keys given in `statsKeys` (2-tuple of strings).
                    
                    Return background, backgroundSubtractedExposure
                    """
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
488  <a href="#2925c3a4">2925c3a4</a> - </div>
                    displayBackground = lsstDebug.Info(__name__).displayBackground
                
                    maskedImage = exposure.getMaskedImage()
                
                    background = getBackground(maskedImage, backgroundConfig)
                
                    if not background:
                        raise RuntimeError, "Unable to estimate background for exposure"
                
                    bgimg = None
                    
                    if displayBackground > 1:
                        bgimg = background.getImageF()
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
502  <a href="#9f392b13">9f392b13</a> -         ds9.mtv(bgimg, title="background", frame=3)</div>
              ?                                                  ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
584  <a href="#6f288216">6f288216</a> +         ds9.mtv(bgimg, title="background", frame=1)</div>
              ?                                                  ^
                
                    if not subtract:
                        return background, None
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
507  <a href="#5eab5bda">5eab5bda</a> -     bbox = maskedImage.getBBox(afwImage.PARENT)</div>
              ?                                ---------------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
589  <a href="#2d3a5fcc">2d3a5fcc</a> +     bbox = maskedImage.getBBox()</div>
                    backgroundSubtractedExposure = exposure.Factory(exposure, bbox, afwImage.PARENT, True)
                    copyImage = backgroundSubtractedExposure.getMaskedImage().getImage()
                    if bgimg is None:
                        bgimg = background.getImageF()
                    copyImage -= bgimg
                
                    # Record statistics of the background in the bgsub exposure metadata.
                    # (lsst.daf.base.PropertySet)
                    if stats:
                        if statsKeys is None:
                            mnkey  = 'BGMEAN'
                            varkey = 'BGVAR'
                        else:
                            mnkey,varkey = statsKeys
                        meta = backgroundSubtractedExposure.getMetadata()
                        s = afwMath.makeStatistics(bgimg, afwMath.MEAN | afwMath.VARIANCE)
                        bgmean = s.getValue(afwMath.MEAN)
                        bgvar  = s.getValue(afwMath.VARIANCE)
                        meta.addDouble(mnkey,  bgmean)
                        meta.addDouble(varkey,  bgvar)
                    
                    if displayBackground:
                        ds9.mtv(backgroundSubtractedExposure, title="subtracted")
                
                    return background, backgroundSubtractedExposure
                estimateBackground.ConfigClass = BackgroundConfig
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="0fa9ad60"/></a>0fa9ad60</h3>

<pre>
commit 0fa9ad6092b97c9cd0e29827d107cfb1b2dd76fc
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Thu Feb 23 12:28:57 2012 -0500

    updated to reflect VectorT->CatalogT name change in afw
</pre>
<h3><a name="4a085ef2"/></a>4a085ef2</h3>

<pre>
commit 4a085ef2bd8a3628bd4f64cad29f60699a9af177
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Wed Mar 7 16:33:20 2012 -0500

    superficial changes to make merging to meas/algorithms cleaner
</pre>
<h3><a name="d90603df"/></a>d90603df</h3>

<pre>
commit d90603dfb2d6b21b4c6e888bfe43f5a33d7037a9
Author: Naoki Yasuda <yasudank@gmail.com>
Date:   Fri Jul 18 12:10:24 2014 +0900

    Propagate thresholdParity correctly in thresholdImage.
</pre>
<h3><a name="124d7e90"/></a>124d7e90</h3>

<pre>
commit 124d7e9038983ddd5fd78a2f7f6f1fc11d0d3341
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Fri Jan 20 00:21:36 2012 -0500

    converted 3/4 paf dictionaries to pex_config; sourceMeasurementTest is failing, but I'm hoping this will be fixed when the last paf dictionary is converted.
</pre>
<h3><a name="18e934cf"/></a>18e934cf</h3>

<pre>
commit 18e934cf9ad6f5d139d3853c35e17be8855b6817
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Tue Mar 26 15:34:56 2013 +0900

    Clarify documentation
</pre>
<h3><a name="b9b3956b"/></a>b9b3956b</h3>

<pre>
commit b9b3956b0057a780999112ab96fbde415dd0f37c
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Wed May 30 10:04:50 2012 -0400

    Support not clearing planes before detecting.
</pre>
<h3><a name="7ef81330"/></a>7ef81330</h3>

<pre>
commit 7ef81330c2938ba27d333a62f49ccea779f763d9
Author: rhl <rhl@git.lsstcorp.org>
Date:   Fri Nov 27 16:52:27 2009 +0000

    Moving python utilities that don't depend on pex harness into meas/utils
</pre>
<h3><a name="5eab5bda"/></a>5eab5bda</h3>

<pre>
commit 5eab5bda8de3a58f0b58f9b583f31fe5fddba94f
Author: rowen <rowen@git.lsstcorp.org>
Date:   Mon Apr 11 22:45:39 2011 +0000

    First cut. Can't run unit tests yet.
</pre>
<h3><a name="535c114f"/></a>535c114f</h3>

<pre>
commit 535c114fcf6287795f72e9532c426ef4b89adf8d
Author: Paul Price <price@astro.princeton.edu>
Date:   Thu May 30 15:29:19 2013 -0400

    detection: disable smoothing if PSF has non-finite width
    
    If the PSF is so awful as to have non-finite width, we'll push
    forward as we can by disabling smoothing.
</pre>
<h3><a name="685f7aa2"/></a>685f7aa2</h3>

<pre>
commit 685f7aa2bdd853e5e099b70ce37d7251c16e7eee
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Thu Mar 15 12:07:30 2012 -0400

    SourceDetectionTask.makeSourceCatalog now returns a struct so the original FootprintSets are not lost
</pre>
<h3><a name="11f0ee2f"/></a>11f0ee2f</h3>

<pre>
commit 11f0ee2fba8d9389d9ecd51401d6af21c29993cc
Author: Russell Owen <rowen@uw.edu>
Date:   Fri Jan 25 10:18:22 2013 -0800

    Modified SourceDetectionTask as follows:
    - Added parameters sigma and doSmooth to allow more flexibility in calling detection
    - Changed config parameter nGrow to nSigmaToGrow
    Backward compatibility notice: the default settings will fail if the exposure has no PSF
    (which is not the case for any existing tasks in pipe_tasks).
    Other than that it should operate much like before except the amount grown will depend on
    the measured sigma of the PSF of the exposure.
</pre>
<h3><a name="4a70da67"/></a>4a70da67</h3>

<pre>
commit 4a70da670aab39ffda9a7b16e32dc9598692705d
Author: Paul Price <price@astro.princeton.edu>
Date:   Fri May 23 15:44:56 2014 -0400

    Adapt to new mask bit NO_DATA replacing EDGE (DM-669)
    
    NO_DATA means a warp/coadd pixel doesn't map to a CCD.
    EDGE means a pixel is near the edge and couldn't be searched
    for sources.
</pre>
<h3><a name="b00b5189"/></a>b00b5189</h3>

<pre>
commit b00b5189a5bec030d10d51e227c225d3e1043cde
Author: Russell Owen <rowen@uw.edu>
Date:   Fri May 31 12:10:40 2013 -0700

    Fix indentation error
</pre>
<h3><a name="2925c3a4"/></a>2925c3a4</h3>

<pre>
commit 2925c3a4c485f38aa6aec9cc057f844af48d24d1
Author: Steven Bickerton <steven.bickerton@gmail.com>
Date:   Fri Aug 29 12:52:02 2014 +0900

    allow Approx to be selected for background.
</pre>
<h3><a name="4dbeaa8c"/></a>4dbeaa8c</h3>

<pre>
commit 4dbeaa8cfaf091484dfe7eef0abeb6deeb672e49
Author: Steven Bickerton <steven.bickerton@gmail.com>
Date:   Tue Apr 14 16:32:27 2015 +0900

    set ApproximateControl when BackgroundControl is created.
</pre>
<h3><a name="e57166a5"/></a>e57166a5</h3>

<pre>
commit e57166a56f09d81bffa398cd34eb931560f6a7d2
Merge: 50dd1f7 79232cd
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Thu Feb 21 20:37:11 2013 +0900

    Merge LSST/next into HSC/stage-ncsa-3
    
    Conflicts:
    	python/lsst/meas/algorithms/objectSizeStarSelector.py
</pre>
<h3><a name="9f392b13"/></a>9f392b13</h3>

<pre>
commit 9f392b134502f6e4fbbd8759806b15f89a267e5a
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed Mar 19 15:08:17 2014 +0000

    detection: additional debugging plots for background
    
    Plots the superpixels in ds9.
</pre>
<h3><a name="8cf150dd"/></a>8cf150dd</h3>

<pre>
commit 8cf150dd822d09af9b47da5ce514c389fd09e690
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Mon Feb 27 18:09:56 2012 -0500

    miscellanous tweaks for pipe_tasks afw.table conversion
</pre>
<h3><a name="9e16f9e8"/></a>9e16f9e8</h3>

<pre>
commit 9e16f9e82e340322af4fab4f2ee8211a55fdeb90
Author: rhl <rhl@git.lsstcorp.org>
Date:   Tue Aug 3 16:56:30 2010 +0000

    Handle proxies
</pre>
<h3><a name="b0d8591f"/></a>b0d8591f</h3>

<pre>
commit b0d8591f0e28fd34c95f1548ebda5695e46d2a22
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Mon Feb 20 18:14:44 2012 -0500

    merge from tickets/1843; tests/psf.py is failing, but it appears to be failing on master too
</pre>
<h3><a name="c0fd7da0"/></a>c0fd7da0</h3>

<pre>
commit c0fd7da029d9368ea43b5a69d5dac3f446eddae1
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Sat Mar 16 22:02:53 2013 -0400

    Remove Kernel getters from Psf, replace with member function to get Kernel-like Image from Psf.
    
    CoaddPsf implementation now uses base class doComputeImage, allowing
    us to only shift once and handle normalizePeak properly.
</pre>
<h3><a name="2868db0d"/></a>2868db0d</h3>

<pre>
commit 2868db0dc0ba271f645d5a1b398fa213f2049a4c
Author: dubcovsky <dubcovsky@git.lsstcorp.org>
Date:   Thu Apr 8 18:03:04 2010 +0000

    Fixed type in sourceDetection.py
</pre>
<h3><a name="0dbf6700"/></a>0dbf6700</h3>

<pre>
commit 0dbf670042adaa023f697206496edf4b031bbb1e
Author: Steven Bickerton <steven.bickerton@gmail.com>
Date:   Mon Apr 20 16:56:07 2015 +0900

    Set approx only when useApprox == True.
</pre>
<h3><a name="88196ac2"/></a>88196ac2</h3>

<pre>
commit 88196ac2836e17096ac73127afccba1059d6774d
Author: Naoki Yasuda <yasudank@gmail.com>
Date:   Fri Apr 18 09:08:36 2014 +0900

    In SourceDetectionTask.thresholdImage(), not to use masked ('BAD' or 'SAT') pixels
    to determine threshold values for detection in the case of thresholdType='stdev'.
</pre>
<h3><a name="8e9fb159"/></a>8e9fb159</h3>

<pre>
commit 8e9fb159a3227f848e0db1ecacf7819599f1c03b
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Thu Apr 23 13:03:36 2015 -0400

    Change default for detection.returnOriginalFootprints
    
    Most consumers of detection now run the deblender, so they
    want the grown footprints, not the originals.
</pre>
<h3><a name="c16fcfe1"/></a>c16fcfe1</h3>

<pre>
commit c16fcfe1e8e7710010a20a1e4785943b10f58139
Author: price <price@git.lsstcorp.org>
Date:   Fri Aug 5 21:41:44 2011 +0000

    Updates from RHL to ignore detected sources when subtracting background.
</pre>
<h3><a name="1ec70a82"/></a>1ec70a82</h3>

<pre>
commit 1ec70a82214a21f3e8b7404910c1299e911b9fa4
Author: Paul Price <price@astro.princeton.edu>
Date:   Thu May 30 15:33:18 2013 -0400

    detection: raise exception if PSF has non-finite width
    
    I changed my mind about trying to push on: there's more that
    depends on the PSF width than just the smoothing.  And then
    there's the fact that all the measurement algorithms rely on
    the PSF being decent.  So better just to raise an exception.
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="ea4e9351"/></a>ea4e9351</h3>

<pre>
commit ea4e9351c39a3a8a14ac38852fb825860278d120
Author: Paul Price <price@astro.princeton.edu>
Date:   Thu Jun 7 00:20:34 2012 +0900

    When reestimating the background, don't use a default BackgroundConfig, but allow the user to modify it.
</pre>
<h3><a name="2d6e13ab"/></a>2d6e13ab</h3>

<pre>
commit 2d6e13ab8b8c511dd58a91d45efc74343f833b68
Author: Russell Owen <rowen@uw.edu>
Date:   Mon Jun 9 11:26:22 2014 -0700

    Fix DM-700 (use config.isotropicGrow). Also remove many unused imports and fix RuntimeException->RuntimeError.
</pre>
<h3><a name="6f288216"/></a>6f288216</h3>

<pre>
commit 6f288216e4c48e7a3b96139fe347072dddfb9741
Author: Dustin Lang <dstn@astro.princeton.edu>
Date:   Thu Apr 26 15:49:29 2012 -0500

    background estimation: record the mean and variance
</pre>
<h3><a name="226094cd"/></a>226094cd</h3>

<pre>
commit 226094cd2d8d03b77c83dd06d56ed1b78eeabe23
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Wed Jul 23 08:29:51 2014 -0400

    Worked on docs
</pre>
<h3><a name="bee4d682"/></a>bee4d682</h3>

<pre>
commit bee4d682807202a27ce42b2c5d788a5d3769fea9
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Sat Jun 28 20:03:36 2014 -0400

    Don't reset a config after creating the Task.
    
    Also improved the example commentary
</pre>
<h3><a name="c1eaaa92"/></a>c1eaaa92</h3>

<pre>
commit c1eaaa928382aa21ff3515398e44ee3a51a8110a
Author: Russell Owen <rowen@uw.edu>
Date:   Thu Sep 18 17:38:10 2014 -0700

    Clean up documentation
</pre>
<h3><a name="8cffc17a"/></a>8cffc17a</h3>

<pre>
commit 8cffc17a6d7cb20dd0e247c2696750bdc3ccc93c
Author: Perry Gee <pgee@physics.ucdavis.edu>
Date:   Sat Mar 14 21:18:25 2015 -0500

    Changes for review and removal of Version0FlagMapper
    
    Other fixes for review
</pre>
<h3><a name="9e83767f"/></a>9e83767f</h3>

<pre>
commit 9e83767f39563e2d890d7613fa4d04f6a50126dd
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Fri Jun 27 16:00:58 2014 -0400

    Document SourceDetectionTask and SourceMeasurementTask
    
    Also:
     cleaned up the debugging output a trifle
     made SourceDetectionTask.makeSourceCatalog a mere alias for SourceDetectionTask.run
     suppressed a spurious doxygen warning about PsfFormatter::doubleGaussianPsfRegistration
</pre>
<h3><a name="bc4b5c7c"/></a>bc4b5c7c</h3>

<pre>
commit bc4b5c7ccf9fdfa5ccd485cc28e3a5cdd7533276
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Tue Jul 8 10:34:51 2014 -0500

    Updated task docs
</pre>
<h3><a name="662c0a80"/></a>662c0a80</h3>

<pre>
commit 662c0a808ede6ce8a6a195651b1e35251cae665a
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Mon Jun 30 18:51:13 2014 -0400

    Worked on task documentation
</pre>
<h3><a name="e9597626"/></a>e9597626</h3>

<pre>
commit e95976267cc78e55b7c15ba566142a03bb2a7a1e
Author: Perry Gee <pgee@physics.ucdavis.edu>
Date:   Mon Aug 18 19:39:58 2014 -0500

    DM-958 - Use schema to get the tableVersion.
</pre>
<h3><a name="e11ad0c8"/></a>e11ad0c8</h3>

<pre>
commit e11ad0c8d0d60b2e556483f24d9d14d4ee21c99c
Author: Russell Owen <rowen@uw.edu>
Date:   Thu Feb 20 17:20:43 2014 -0800

    Add a Gaussian PSF factory that can produce single or double Gaussians
    
    Try a PSF factory
    
    Updated __init__
    
    Updatd to use gaussianPsfFactory
    
    Get rid uf unused analytic PSF registry.
    For the Gaussian PSF factory change units of FWHM from arcsec to pixels.
    
    Add a unit test for GaussianPsfFactory and fix various bugs.
</pre>
<h3><a name="3a2c781d"/></a>3a2c781d</h3>

<pre>
commit 3a2c781d34c5604f0e4c2e6ef3587db766cd17ee
Author: Dustin Lang <dstn@astro.princeton.edu>
Date:   Thu Jun 21 13:30:08 2012 -0400

    propagate deblended child mask bits to source flags
</pre>
<h3><a name="2d3a5fcc"/></a>2d3a5fcc</h3>

<pre>
commit 2d3a5fccae9908251c54deaba743fc34137a65f5
Author: Russell Owen <rowen@uw.edu>
Date:   Thu Sep 11 17:45:03 2014 -0700

    Remove explicit use of image origin = PARENT; use default
</pre>
<h3><a name="b94aaf90"/></a>b94aaf90</h3>

<pre>
commit b94aaf90e7d2c8e42ba44070853dc67bbb1639b9
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Sat Jun 28 09:52:43 2014 -0400

    Name Contents \section
</pre>
</div>


[Return to list](#homelist)
# <a name="include/lsst/meas/algorithms/SingleGaussianPsf.h"/></a>include/lsst/meas/algorithms/SingleGaussianPsf.h
### Diff:

<pre>
                // -*- lsst-c++ -*-
                /*
                 * LSST Data Management System
                 * Copyright 2008-2013 LSST Corporation.
                 *
                 * This product includes software developed by the
                 * LSST Project (http://www.lsst.org/).
                 *
                 * This program is free software: you can redistribute it and/or modify
                 * it under the terms of the GNU General Public License as published by
                 * the Free Software Foundation, either version 3 of the License, or
                 * (at your option) any later version.
                 *
                 * This program is distributed in the hope that it will be useful,
                 * but WITHOUT ANY WARRANTY; without even the implied warranty of
                 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                 * GNU General Public License for more details.
                 *
                 * You should have received a copy of the LSST License Statement and
                 * the GNU General Public License along with this program.  If not,
                 * see <http://www.lsstcorp.org/LegalNotices/>.
                 */
                
                #ifndef LSST_MEAS_ALGORITHMS_SingleGaussianPsf_h_INCLUDED
                #define LSST_MEAS_ALGORITHMS_SingleGaussianPsf_h_INCLUDED
                
                #include "lsst/base.h"
                #include "lsst/meas/algorithms/KernelPsf.h"
                #include "boost/serialization/nvp.hpp"
                #include "boost/serialization/void_cast.hpp"
                
                namespace lsst { namespace meas { namespace algorithms {
                
                /*!
                 * @brief Represent a PSF as a circularly symmetrical double Gaussian
                 */
                class SingleGaussianPsf : public afw::table::io::PersistableFacade<SingleGaussianPsf>, public KernelPsf {
                public:
                
                    /**
                     *  @brief Constructor for a SingleGaussianPsf
                     *
                     *  @param[in] width   Number of columns in realizations of the PSF at a point.
                     *  @param[in] height  Number of rows in realizations of the PSF at a point.
                     *  @param[in] sigma   Radius of the Gaussian.
                     *
                     *  Additional arguments are historical and ignored, and maybe be removed in the future.
                     */
                    explicit SingleGaussianPsf(int width, int height, double sigma);
                
                    /// Polymorphic deep copy; should usually unnecessary because Psfs are immutable.
                    virtual PTR(afw::detection::Psf) clone() const;
                
                    /// Return the radius of the Gaussian.
                    double getSigma() const { return _sigma; }
                
                    /// Whether the Psf is persistable; always true.
                    virtual bool isPersistable() const { return true; }
                
                protected:
                
                    virtual std::string getPersistenceName() const;
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
64   <a href="#7d137b7e">7d137b7e</a> -     virtual std::string getPythonModule() const;</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
65   <a href="#7d137b7e">7d137b7e</a> - </div>
                    virtual void write(OutputArchiveHandle & handle) const;
                
                private:
                    double _sigma;                     ///< Width of Gaussian
                
                private:
                    friend class boost::serialization::access;
                    template <class Archive>
                    void serialize(Archive&, unsigned int const) {
                        boost::serialization::void_cast_register<SingleGaussianPsf, lsst::afw::detection::Psf>(
                            static_cast<SingleGaussianPsf*>(0), static_cast<lsst::afw::detection::Psf*>(0));
                    }
                };
                
                }}} // namespace lsst::meas::algorithms
                
                namespace boost { namespace serialization {
                
                template <class Archive>
                inline void save_construct_data(
                    Archive& ar, lsst::meas::algorithms::SingleGaussianPsf const* p,
                    unsigned int const) {
                    int width = p->getKernel()->getWidth();
                    int height = p->getKernel()->getHeight();
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
90   <a href="#80cc17e0">80cc17e0</a> -     double const sigma = p->getSigma();</div>
              ?            ------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
88   <a href="#fd34dc59">fd34dc59</a> +     double sigma = p->getSigma();</div>
                    ar << make_nvp("width", width);
                    ar << make_nvp("height", height);
                    ar << make_nvp("sigma", sigma);
                }
                
                template <class Archive>
                inline void load_construct_data(
                    Archive& ar, lsst::meas::algorithms::SingleGaussianPsf* p,
                    unsigned int const) {
                    int width;
                    int height;
                    double sigma;
                    ar >> make_nvp("width", width);
                    ar >> make_nvp("height", height);
                    ar >> make_nvp("sigma", sigma);
                    ::new(p) lsst::meas::algorithms::SingleGaussianPsf(width, height, sigma);
                }
                
                }} // namespace boost::serialization
                
                #endif // !LSST_MEAS_ALGORITHMS_SingleGaussianPsf_h_INCLUDED
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="80cc17e0"/></a>80cc17e0</h3>

<pre>
commit 80cc17e0fa4238a853db2873b7b1588f7bbcbbf0
Merge: 1f9fcb9 18e934c
Author: Paul Price <price@astro.princeton.edu>
Date:   Tue Apr 30 14:06:10 2013 -0400

    Merge remote-tracking branch 'lsst/master'
    
    Conflicts:
    	include/lsst/meas/algorithms/SingleGaussianPsf.h
    	python/lsst/meas/algorithms/detection.py
    	tests/measureSources.py
</pre>
<h3><a name="7d137b7e"/></a>7d137b7e</h3>

<pre>
commit 7d137b7e4539117419bcd70a7e08cdfe7478442f
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Fri Mar 1 17:00:02 2013 +0900

    Set Python modules appropriately for afw::table::io::Persistables.
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="fd34dc59"/></a>fd34dc59</h3>

<pre>
commit fd34dc59b455ca563be256ebc91ad2f5b473c9fb
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Thu Apr 25 10:20:16 2013 -0500

    Fix make_nvp lookup bug by passing an l-value
</pre>
</div>


[Return to list](#homelist)
# <a name="src/SpatialModelPsf.cc"/></a>src/SpatialModelPsf.cc
### Diff:

<pre>
                // -*- LSST-C++ -*-
                
                /* 
                 * LSST Data Management System
                 * Copyright 2008, 2009, 2010 LSST Corporation.
                 * 
                 * This product includes software developed by the
                 * LSST Project (http://www.lsst.org/).
                 *
                 * This program is free software: you can redistribute it and/or modify
                 * it under the terms of the GNU General Public License as published by
                 * the Free Software Foundation, either version 3 of the License, or
                 * (at your option) any later version.
                 * 
                 * This program is distributed in the hope that it will be useful,
                 * but WITHOUT ANY WARRANTY; without even the implied warranty of
                 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                 * GNU General Public License for more details.
                 * 
                 * You should have received a copy of the LSST License Statement and 
                 * the GNU General Public License along with this program.  If not, 
                 * see <http://www.lsstcorp.org/LegalNotices/>.
                 */
                 
                /*!
                 * @brief Implementation of code to determine spatial model of PSF
                 *
                 * @file
                 *
                 * @ingroup algorithms
                 */
                #include <numeric>
                
                #if !defined(DOXYGEN)
                #   include "Minuit2/FCNBase.h"
                #   include "Minuit2/FunctionMinimum.h"
                #   include "Minuit2/MnMigrad.h"
                #   include "Minuit2/MnMinos.h"
                #   include "Minuit2/MnPrint.h"
                #endif
                
                #include "Eigen/Core"
                #include "Eigen/Cholesky"
                #include "Eigen/SVD"
                
                #include "lsst/afw/detection/Footprint.h"
                #include "lsst/afw/math/SpatialCell.h"
                #include "lsst/afw/math/FunctionLibrary.h"
                #include "lsst/afw/geom/Point.h"
                #include "lsst/afw/geom/Box.h"
                #include "lsst/meas/algorithms/ImagePca.h"
                #include "lsst/meas/algorithms/SpatialModelPsf.h"
                #include "lsst/meas/algorithms/PsfCandidate.h"
                
                namespace afwDetection = lsst::afw::detection;
                namespace afwGeom = lsst::afw::geom;
                namespace afwImage = lsst::afw::image;
                namespace afwMath = lsst::afw::math;
                
                namespace lsst {
                namespace meas {
                namespace algorithms {
                
                namespace {
                
                int const WARP_BUFFER(1);          // Buffer (border) around kernel to prevent warp issues
                std::string const WARP_ALGORITHM("lanczos5"); // Name of warping algorithm to use
                
                
                // A class to pass around to all our PsfCandidates which builds the PcaImageSet
                template<typename PixelT>
                class SetPcaImageVisitor : public afwMath::CandidateVisitor {
                    typedef afwImage::Image<PixelT> ImageT;
                    typedef afwImage::MaskedImage<PixelT> MaskedImageT;
                    typedef afwImage::Exposure<PixelT> ExposureT;
                public:
                    explicit SetPcaImageVisitor(
                            PsfImagePca<MaskedImageT> *imagePca, // Set of Images to initialise
                            unsigned int const mask=0x0                    // Ignore pixels with any of these bits set
                                               ) :
                        afwMath::CandidateVisitor(),
                        _imagePca(imagePca)
                        {
                            ;
                        }
                    
                    // Called by SpatialCellSet::visitCandidates for each Candidate
                    void processCandidate(afwMath::SpatialCellCandidate *candidate) {
                        PsfCandidate<PixelT> *imCandidate = dynamic_cast<PsfCandidate<PixelT> *>(candidate);
                        if (imCandidate == NULL) {
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
91   <a href="#553f6be7">553f6be7</a> -             throw LSST_EXCEPT(lsst::pex::exceptions::LogicErrorException,</div>
              ?                                                                ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
91   <a href="#ed246562">ed246562</a> +             throw LSST_EXCEPT(lsst::pex::exceptions::LogicError,</div>
                                              "Failed to cast SpatialCellCandidate to PsfCandidate");
                        }
                
                        try {
                            typename MaskedImageT::Ptr im = imCandidate->getOffsetImage(WARP_ALGORITHM,
                                                                                        WARP_BUFFER);
                
                            
                            //static int count = 0;
                            //im->writeFits(str(boost::format("cand%03d.fits") % count));
                            //count += 1;
                
                            afwMath::StatisticsControl sctrl;
                            sctrl.setNanSafe(false);
                
                            if (!lsst::utils::isfinite(afwMath::makeStatistics(*im->getImage(),
                                                                               afwMath::MAX, sctrl).getValue())) {
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
109  <a href="#02f10cab">02f10cab</a> -                 throw LSST_EXCEPT(lsst::pex::exceptions::RuntimeErrorException,</div>
              ?                                                                      ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
109  <a href="#ed246562">ed246562</a> +                 throw LSST_EXCEPT(lsst::pex::exceptions::RuntimeError,</div>
                                                  str(boost::format("Image at %d, %d contains NaN")
                                                      % imCandidate->getXCenter() % imCandidate->getYCenter()));
                
                            }
                            if (!lsst::utils::isfinite(afwMath::makeStatistics(*im->getVariance(),
                                                                               afwMath::MAX, sctrl).getValue())) {
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
116  <a href="#02f10cab">02f10cab</a> -                 throw LSST_EXCEPT(lsst::pex::exceptions::RuntimeErrorException,</div>
              ?                                                                      ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
116  <a href="#ed246562">ed246562</a> +                 throw LSST_EXCEPT(lsst::pex::exceptions::RuntimeError,</div>
                                                  str(boost::format("Variance of Image at %d, %d contains NaN")
                                                      % imCandidate->getXCenter() % imCandidate->getYCenter()));
                            }
                
                            _imagePca->addImage(im, imCandidate->getSource()->getPsfFlux());
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
122  <a href="#2fbce80a">2fbce80a</a> -         } catch(lsst::pex::exceptions::LengthErrorException &) {</div>
              ?                                                   ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
122  <a href="#ed246562">ed246562</a> +         } catch(lsst::pex::exceptions::LengthError &) {</div>
                            return;
                        }
                    }
                private:
                    PsfImagePca<MaskedImageT> *_imagePca; // the ImagePca we're building
                };
                
                /************************************************************************************************************/
                /// A class to pass around to all our PsfCandidates to count our candidates
                template<typename PixelT>
                class countVisitor : public afwMath::CandidateVisitor {
                    typedef afwImage::MaskedImage<PixelT> MaskedImage;
                    typedef afwImage::Exposure<PixelT> Exposure;
                public:
                    explicit countVisitor() : afwMath::CandidateVisitor(), _n(0) {}
                    
                    void reset() {
                        _n = 0;
                    }
                    
                    // Called by SpatialCellSet::visitCandidates for each Candidate
                    void processCandidate(afwMath::SpatialCellCandidate *candidate) {
                        PsfCandidate<PixelT> *imCandidate = dynamic_cast<PsfCandidate<PixelT> *>(candidate);
                        if (imCandidate == NULL) {
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
147  <a href="#aebf9ce2">aebf9ce2</a> -             throw LSST_EXCEPT(lsst::pex::exceptions::LogicErrorException,</div>
              ?                                                                ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
147  <a href="#ed246562">ed246562</a> +             throw LSST_EXCEPT(lsst::pex::exceptions::LogicError,</div>
                                              "Failed to cast SpatialCellCandidate to PsfCandidate");
                        }
                        
                        try {
                            imCandidate->getMaskedImage();
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
153  <a href="#aebf9ce2">aebf9ce2</a> -         } catch(lsst::pex::exceptions::LengthErrorException &) {</div>
              ?                                                   ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
153  <a href="#ed246562">ed246562</a> +         } catch(lsst::pex::exceptions::LengthError &) {</div>
                            return;
                        }
                            
                        ++_n;
                    }
                    
                    // Return the number
                    double getN() const { return _n; }
                    
                private:
                    int mutable _n;                       // the desired number
                };
                
                
                /// Offset a kernel so that its sub-pixel position corresponds to that of some target image
                ///
                /// We place the kernel in an oversized image (dimensions expanded by WARP_BUFFER*2) and resample that,
                /// so that edge effects from resampling are minimised.
                template<typename ImageT>
                std::vector<typename ImageT::Ptr> offsetKernel(
                    afwMath::LinearCombinationKernel const& kernel, ///< the Kernel to offset
                    float dx, float dy                  ///< Offset to apply
                    )
                {
                    afwMath::KernelList kernels = kernel.getKernelList(); // The Kernels that kernel adds together
                    unsigned int const nKernel = kernels.size(); // Number of kernel components
                    std::vector<typename ImageT::Ptr> kernelImages(nKernel); // Images of each Kernel in kernels
                    if (nKernel == 0) {
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
182  <a href="#8e6973e4">8e6973e4</a> -         throw LSST_EXCEPT(lsst::pex::exceptions::LengthErrorException,</div>
              ?                                                             ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
182  <a href="#ed246562">ed246562</a> +         throw LSST_EXCEPT(lsst::pex::exceptions::LengthError,</div>
                                          "Kernel has no components");
                    }
                
                    ImageT scratch(kernel.getDimensions()); // Buffered scratch space
                    for (unsigned int i = 0; i != nKernel; ++i) {
                        kernels[i]->computeImage(scratch, false);
                        kernelImages[i] = afwMath::offsetImage(scratch, dx, dy, WARP_ALGORITHM, WARP_BUFFER);
                    }
                
                    return kernelImages;
                }
                
                } // Anonymous namespace
                
                /************************************************************************************************************/
                /**
                 * Return a Kernel::Ptr and a list of eigenvalues resulting from analysing the provided SpatialCellSet
                 *
                 * The Kernel is a LinearCombinationKernel of the first nEigenComponents eigenImages
                 *
                 * N.b. This is templated over the Pixel type of the science image
                 */
                template<typename PixelT>
                std::pair<afwMath::LinearCombinationKernel::Ptr, std::vector<double> > createKernelFromPsfCandidates(
                        afwMath::SpatialCellSet const& psfCells, ///< A SpatialCellSet containing PsfCandidates
                        lsst::afw::geom::Extent2I const& dims, ///< Dimensions of image
                        lsst::afw::geom::Point2I const& xy0,   ///< Origin of image
                        int const nEigenComponents,     ///< number of eigen components to keep; <= 0 => infty
                        int const spatialOrder,         ///< Order of spatial variation (cf. afw::math::PolynomialFunction2)
                        int const ksize,                ///< Size of generated Kernel images
                        int const nStarPerCell,         ///< max no. of stars per cell; <= 0 => infty
                        bool const constantWeight,       ///< should each star have equal weight in the fit?
                        int const border                 ///< Border size for background subtraction
                    )
                {
                    typedef typename afwImage::Image<PixelT> ImageT;
                    typedef typename afwImage::MaskedImage<PixelT> MaskedImageT;
                    typedef typename afwImage::Exposure<PixelT> ExposureT;
                    
                    //
                    // Set the sizes for PsfCandidates made from either Images or MaskedImages
                    //
                    //lsst::meas::algorithms::PsfCandidate<ImageT>::setWidth(ksize);
                    //lsst::meas::algorithms::PsfCandidate<ImageT>::setHeight(ksize);
                    //lsst::meas::algorithms::PsfCandidate<MaskedImageT>::setWidth(ksize);
                    //lsst::meas::algorithms::PsfCandidate<MaskedImageT>::setHeight(ksize);
                    lsst::meas::algorithms::PsfCandidate<PixelT>::setWidth(ksize);
                    lsst::meas::algorithms::PsfCandidate<PixelT>::setHeight(ksize);
                
                    
                    PsfImagePca<MaskedImageT> imagePca(constantWeight, border); // Here's the set of images we'll analyze
                
                    {
                        SetPcaImageVisitor<PixelT> importStarVisitor(&imagePca);
                        bool const ignoreExceptions = true;
                        psfCells.visitCandidates(&importStarVisitor, nStarPerCell, ignoreExceptions);
                    }
                
                    //
                    // Do a PCA decomposition of those PSF candidates.
                    //
                    // We have "gappy" data;  in other words we don't want to include any pixels with INTRP set
                    //
                    int niter = 10;                     // number of iterations of updateBadPixels
                    double deltaLim = 10.0;             // acceptable value of delta, the max change due to updateBadPixels
                    lsst::afw::image::MaskPixel const BAD = afwImage::Mask<>::getPlaneBitMask("BAD");
                    lsst::afw::image::MaskPixel const CR = afwImage::Mask<>::getPlaneBitMask("CR");
                    lsst::afw::image::MaskPixel const INTRP = afwImage::Mask<>::getPlaneBitMask("INTRP");
                    
                    for (int i = 0; i != niter; ++i) {
                        int const ncomp = (i == 0) ? 0 :
                            ((nEigenComponents == 0) ? imagePca.getEigenImages().size() : nEigenComponents);
                        double delta = imagePca.updateBadPixels(BAD | CR | INTRP, ncomp);
                        if (i > 0 && delta < deltaLim) {
                            break;
                        }
                        
                        imagePca.analyze();
                    }
                    
                    std::vector<typename MaskedImageT::Ptr> eigenImages = imagePca.getEigenImages();
                    std::vector<double> eigenValues = imagePca.getEigenValues();
                    int const nEigen = static_cast<int>(eigenValues.size());
                    
                    int const ncomp = (nEigenComponents <= 0 || nEigen < nEigenComponents) ? nEigen : nEigenComponents;
                    //
                    // Set the background level of the components to 0.0 to avoid coupling variable background
                    // levels to the form of the Psf.  More precisely, we calculate the mean of an outer "annulus"
                    // of width bkg_border
                    //
                    for (int k = 0; k != ncomp; ++k) {
                        ImageT const& im = *eigenImages[k]->getImage();
                
                        int bkg_border = 2;
                        if (bkg_border > im.getWidth()) {
                            bkg_border = im.getWidth() / 2;
                        }
                        if (bkg_border > im.getHeight()) {
                            bkg_border = im.getHeight() / 2;
                        }
                
                        double sum = 0;
                        // Bottom and Top borders
                        for (int i = 0; i != bkg_border; ++i) {
                            typename ImageT::const_x_iterator
                                ptrB = im.row_begin(i), ptrT = im.row_begin(im.getHeight() - i - 1);
                            for (int j = 0; j != im.getWidth(); ++j, ++ptrB, ++ptrT) {
                                sum += *ptrB + *ptrT;
                            }
                        }
                        for (int i = bkg_border; i < im.getHeight() - bkg_border; ++i) {
                            // Left and Right borders
                            typename ImageT::const_x_iterator
                                ptrL = im.row_begin(i), ptrR = im.row_begin(i) + im.getWidth() - bkg_border;
                            for (int j = 0; j != bkg_border; ++j, ++ptrL, ++ptrR) {
                                sum += *ptrL + *ptrR;
                            }
                        }
                        sum /= 2*(bkg_border*im.getWidth() + bkg_border*(im.getHeight() - 2*bkg_border));
                
                        *eigenImages[k] -= sum;
                    }
                    //
                    // Now build our LinearCombinationKernel; build the lists of basis functions
                    // and spatial variation, then assemble the Kernel
                    //
                    afwMath::KernelList  kernelList;
                    std::vector<afwMath::Kernel::SpatialFunctionPtr> spatialFunctionList;
                    afwGeom::Box2D const range = afwGeom::Box2D(afwGeom::Point2D(xy0), afwGeom::Extent2D(dims));
                
                    for (int i = 0; i != ncomp; ++i) {
                        {
                            // Enforce unit sum for kernel by construction
                            // Zeroth component has unit sum
                            // Other components have zero sum by normalising and then subtracting the zeroth component
                            ImageT& image = *eigenImages[i]->getImage();
                            double sum = std::accumulate(image.begin(true), image.end(true), 0.0);
                            if (i == 0) {
                                image /= sum;
                            } else {
                                for (typename ImageT::fast_iterator ptr0 = eigenImages[0]->getImage()->begin(true),
                                         ptr1 = image.begin(true), end = image.end(true); ptr1 != end; ++ptr0, ++ptr1) {
                                    *ptr1 = *ptr1 / sum - *ptr0;
                                }
                            }
                        }
                
                        kernelList.push_back(afwMath::Kernel::Ptr(new afwMath::FixedKernel(
                                                      afwImage::Image<afwMath::Kernel::Pixel>(*eigenImages[i]->getImage(),true)
                                                                                          )));
                
                        afwMath::Kernel::SpatialFunctionPtr
                //            spatialFunction(new afwMath::PolynomialFunction2<double>(spatialOrder));
                          spatialFunction(new afwMath::Chebyshev1Function2<double>(spatialOrder, range));
                        spatialFunction->setParameter(0, 1.0); // the constant term; all others are 0
                        spatialFunctionList.push_back(spatialFunction);
                    }
                
                    afwMath::LinearCombinationKernel::Ptr
                        psf(new afwMath::LinearCombinationKernel(kernelList, spatialFunctionList));
                
                    return std::make_pair(psf, eigenValues);
                }
                
                /************************************************************************************************************/
                /**
                 * Count the number of candidates in use
                 */
                template<typename PixelT>
                int countPsfCandidates(afwMath::SpatialCellSet const& psfCells,
                                       int const nStarPerCell)
                {
                    countVisitor<PixelT> counter;
                    psfCells.visitCandidates(&counter, nStarPerCell);
                
                    return counter.getN();    
                }
                
                /************************************************************************************************************/
                namespace {
                /**
                 * Fit the model mImage to the data;  the model is assumed to have been shifted to have the same centroid
                 *
                 * Return (chi^2, amplitude) where amplitude*model is the best fit to the data
                 */
                template<typename ModelImageT, typename DataImageT>
                std::pair<double, double>
                fitKernel(ModelImageT const& mImage,    // The model image at this point
                          DataImageT const& data,       // the data to fit
                          double lambda = 0.0,          // floor for variance is lambda*data
                          bool detected = true,         // only fit DETECTED pixels?
                          int const id=-1               // ID for this object; useful in debugging
                         ) {
                    assert(data.getDimensions() == mImage.getDimensions());
                    assert(id == id);
                    int const DETECTED = afwImage::Mask<>::getPlaneBitMask("DETECTED");
                    int const BAD = afwImage::Mask<>::getPlaneBitMask("CR") | afwImage::Mask<>::getPlaneBitMask("BAD");
                
                    double sumMM = 0.0, sumMD = 0.0, sumDD = 0.0; // sums of model*model/variance etc.
                    int npix = 0;                                 // number of pixels used to evaluate chi^2
                    for (int y = 0; y != data.getHeight(); ++y) {
                        typename ModelImageT::x_iterator mptr = mImage.row_begin(y);
                        for (typename DataImageT::x_iterator ptr = data.row_begin(y), end = data.row_end(y);
                             ptr != end; ++ptr, ++mptr) {
                            double const m = (*mptr)[0];       // value of model
                            double const d = ptr.image();      // value of data
                            double const var = ptr.variance() + lambda*d; // data's variance
                            if (detected && !(ptr.mask() & DETECTED)) {
                                continue;
                            }
                            if (ptr.mask() & BAD) {
                                continue;
                            }
                            if (var != 0.0) {                  // assume variance == 0 => infinity XXX
                                double const iVar = 1.0/var;
                                npix++;
                                sumMM += m*m*iVar;
                                sumMD += m*d*iVar;
                                sumDD += d*d*iVar;
                            }
                        }
                    }
                    
                    if (npix == 0) {
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
407  <a href="#c96eb542">c96eb542</a> -         throw LSST_EXCEPT(lsst::pex::exceptions::RangeErrorException, "No good pixels");</div>
              ?                                                            ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
407  <a href="#ed246562">ed246562</a> +         throw LSST_EXCEPT(lsst::pex::exceptions::RangeError, "No good pixels");</div>
                    }
                    if (sumMM == 0.0) {
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
410  <a href="#7edcdd83">7edcdd83</a> -         throw LSST_EXCEPT(lsst::pex::exceptions::RangeErrorException, "sum(data*data)/var == 0");</div>
              ?                                                            ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
410  <a href="#ed246562">ed246562</a> +         throw LSST_EXCEPT(lsst::pex::exceptions::RangeError, "sum(data*data)/var == 0");</div>
                    }
                
                    double const amp = sumMD/sumMM;     // estimate of amplitude of model at this point            
                    double const chi2 = (sumDD - 2*amp*sumMD + amp*amp*sumMM)/(npix - 1);
                
                #if 0
                    bool show = false;                  // Display the centre of the image; set from gdb
                        
                    if (show) {
                        show = true;                    // you can jump here in gdb to set show if direct attempts fail
                        int y = data.getHeight()/2;
                        int x = data.getWidth()/2;
                        int hsize = 2;
                        printf("\ndata  ");
                        for (int ii = -hsize; ii <= hsize; ++ii) {
                            for (int jj = -hsize; jj <= hsize; ++jj) {
                                printf("%7.1f ", data.at(x + jj, y - ii).image());
                            }
                            printf("  model  ");
                            for (int jj = -hsize; jj <= hsize; ++jj) {
                                printf("%7.1f ", amp*(*(mImage.at(x + jj, y - ii)))[0]);
                            }
                            printf("\n      ");
                        }
                        printf("%g  %.1f\n", amp, chi2);
                    }
                #endif
                        
                    return std::make_pair(chi2, amp);
                }
                }
                    
                /************************************************************************************************************/
                /*
                 * Fit for the spatial variation of the PSF parameters over the field
                 */
                /// A class to pass around to all our PsfCandidates to evaluate the PSF fit's X^2 
                template<typename PixelT>
                class evalChi2Visitor : public afwMath::CandidateVisitor {
                    typedef afwImage::Image<PixelT> Image;
                    typedef afwImage::MaskedImage<PixelT> MaskedImage;
                    typedef afwImage::Exposure<PixelT> Exposure;
                    
                    typedef afwImage::Image<afwMath::Kernel::Pixel> KImage;
                public:
                    explicit evalChi2Visitor(afwMath::Kernel const& kernel,
                                             double lambda
                                            ) :
                        afwMath::CandidateVisitor(),
                        _chi2(0.0), _kernel(kernel), _lambda(lambda),
                        _kImage(KImage::Ptr(new KImage(kernel.getDimensions()))) {
                    }
                    
                    void reset() {
                        _chi2 = 0.0;
                    }
                    
                    // Called by SpatialCellSet::visitCandidates for each Candidate
                    void processCandidate(afwMath::SpatialCellCandidate *candidate) {
                        PsfCandidate<PixelT> *imCandidate = dynamic_cast<PsfCandidate<PixelT> *>(candidate);
                        if (imCandidate == NULL) {
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
472  <a href="#553f6be7">553f6be7</a> -             throw LSST_EXCEPT(lsst::pex::exceptions::LogicErrorException,</div>
              ?                                                                ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
472  <a href="#ed246562">ed246562</a> +             throw LSST_EXCEPT(lsst::pex::exceptions::LogicError,</div>
                                              "Failed to cast SpatialCellCandidate to PsfCandidate");
                        }
                        
                        double const xcen = imCandidate->getSource()->getX();
                        double const ycen = imCandidate->getSource()->getY();
                
                        _kernel.computeImage(*_kImage, true, xcen, ycen);
                        typename MaskedImage::ConstPtr data;
                        try {
                            data = imCandidate->getOffsetImage(WARP_ALGORITHM, WARP_BUFFER);
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
483  <a href="#2fbce80a">2fbce80a</a> -         } catch(lsst::pex::exceptions::LengthErrorException &) {</div>
              ?                                                   ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
483  <a href="#ed246562">ed246562</a> +         } catch(lsst::pex::exceptions::LengthError &) {</div>
                            return;
                        }
                        
                        try {
                            std::pair<double, double> result = fitKernel(*_kImage, *data, _lambda, false,
                                                                         imCandidate->getSource()->getId());
                            
                            double dchi2 = result.first;      // chi^2 from this object
                            double const amp = result.second; // estimate of amplitude of model at this point
                            
                            imCandidate->setChi2(dchi2);
                            imCandidate->setAmplitude(amp);
                            
                            _chi2 += dchi2;
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
498  <a href="#553f6be7">553f6be7</a> -         } catch(lsst::pex::exceptions::RangeErrorException &e) {</div>
              ?                                                  ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
498  <a href="#ed246562">ed246562</a> +         } catch(lsst::pex::exceptions::RangeError &e) {</div>
                            imCandidate->setStatus(afwMath::SpatialCellCandidate::BAD);
                            imCandidate->setChi2(std::numeric_limits<double>::quiet_NaN());
                            imCandidate->setAmplitude(std::numeric_limits<double>::quiet_NaN());
                        }
                    }
                    
                    // Return the computed chi^2
                    double getValue() const { return _chi2; }
                    
                private:
                    double mutable _chi2;            // the desired chi^2
                    afwMath::Kernel const& _kernel;  // the kernel
                    double _lambda;                  // floor for variance is _lambda*data
                    typename KImage::Ptr mutable _kImage; // The Kernel at this point; a scratch copy
                };
                    
                /********************************************************************************************************/
                /**
                 * Fit a Kernel's spatial variability from a set of stars
                 */
                // Set the Kernel's spatial parameters from a vector
                void setSpatialParameters(afwMath::Kernel *kernel,
                                          std::vector<double> const& coeffs
                                         )
                {
                    int const nComponents = kernel->getNKernelParameters();
                    int const nSpatialParams = kernel->getNSpatialParameters();
                
                    assert (nComponents*nSpatialParams == static_cast<long>(coeffs.size()));
                
                    std::vector<std::vector<double> > kCoeffs; // coefficients rearranged for Kernel
                    kCoeffs.reserve(nComponents);
                    for (int i = 0; i != nComponents; ++i) {
                        kCoeffs.push_back(std::vector<double>(nSpatialParams));
                        std::copy(coeffs.begin() + i*nSpatialParams,
                                  coeffs.begin() + (i + 1)*nSpatialParams, kCoeffs[i].begin());
                    }
                    
                    kernel->setSpatialParameters(kCoeffs);
                }
                    
                /**
                 * Fit a Kernel's spatial variability from a set of stars
                 */
                // Set the Kernel's spatial parameters from an Eigen::VectorXd
                void setSpatialParameters(afwMath::Kernel *kernel,
                                          Eigen::VectorXd const& vec
                                         )
                {
                    int const nComponents = kernel->getNKernelParameters();
                    int const nSpatialParams = kernel->getNSpatialParameters();
                
                    assert (nComponents*nSpatialParams == vec.size());
                
                    std::vector<std::vector<double> > kCoeffs; // coefficients rearranged for Kernel
                    kCoeffs.reserve(nComponents);
                    for (int i = 0; i != nComponents; ++i) {
                        std::vector<double> spatialCoeffs(nSpatialParams);
                        for (int j = 0; j != nSpatialParams; ++j) {
                            spatialCoeffs[j] = vec[i*nSpatialParams + j];
                        }
                        kCoeffs.push_back(spatialCoeffs);
                    }
                    
                    kernel->setSpatialParameters(kCoeffs);
                }
                    
                //
                // The object that minuit minimises
                //
                template<typename PixelT>
                class MinimizeChi2 : public ROOT::Minuit2::FCNBase {
                public:
                    explicit MinimizeChi2(evalChi2Visitor<PixelT> & chi2Visitor,
                                          afwMath::Kernel *kernel,
                                          afwMath::SpatialCellSet const& psfCells,
                                          int nStarPerCell,
                                          int nComponents,
                                          int nSpatialParams
                                         ) : _errorDef(1.0),
                                             _chi2Visitor(chi2Visitor),
                                             _kernel(kernel),
                                             _psfCells(psfCells),
                                             _nStarPerCell(nStarPerCell),
                                             _nComponents(nComponents),
                                             _nSpatialParams(nSpatialParams) {}
                
                /**
                 * Error definition of the function. MINUIT defines Parameter errors as the
                 * change in Parameter Value required to change the function Value by up. Normally,
                 * for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.
                 * If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,
                 */
                    double Up() const { return _errorDef; }
                        
                    // Evaluate our cost function (in this case chi^2)
                    double operator()(const std::vector<double>& coeffs) const {
                        setSpatialParameters(_kernel, coeffs);
                        
                        _psfCells.visitCandidates(&_chi2Visitor, _nStarPerCell);
                        
                        return _chi2Visitor.getValue();
                    }
                    
                    void setErrorDef(double def) { _errorDef = def; }
                private:
                    double _errorDef;               // how much cost function has changed at the +- 1 error points
                    
                    evalChi2Visitor<PixelT>& _chi2Visitor;
                    afwMath::Kernel *_kernel;
                    afwMath::SpatialCellSet const& _psfCells;
                    int _nStarPerCell;
                    int _nComponents;
                    int _nSpatialParams;
                };
                    
                /************************************************************************************************************/
                /**
                 * Fit spatial kernel using full-nonlinear optimization to estimate candidate amplitudes
                 */    
                template<typename PixelT>
                std::pair<bool, double>
                fitSpatialKernelFromPsfCandidates(
                        afwMath::Kernel *kernel,                 ///< the Kernel to fit
                        afwMath::SpatialCellSet const& psfCells, ///< A SpatialCellSet containing PsfCandidates
                        int const nStarPerCell,                  ///< max no. of stars per cell; <= 0 => infty
                        double const tolerance,                  ///< Tolerance; how close chi^2 should be to true minimum
                        double const lambda                      ///< floor for variance is lambda*data
                                                 ) {
                    typedef typename afwImage::Image<PixelT> Image;
                
                    int const nComponents = kernel->getNKernelParameters();
                    int const nSpatialParams = kernel->getNSpatialParameters();
                    //
                    // visitor that evaluates the chi^2 of the current fit
                    //
                    evalChi2Visitor<PixelT> getChi2(*kernel, lambda);
                    //
                    // We have to unpack the Kernel coefficients into a linear array, coeffs
                    //
                    std::vector<double> coeffs;         // The coefficients we want to fit
                    coeffs.assign(nComponents*nSpatialParams, 0.0);
                
                    std::vector<double> stepSize;       // step sizes
                    stepSize.assign(nComponents*nSpatialParams, 100);
                    //
                    // Translate that into minuit's language
                    //
                    ROOT::Minuit2::MnUserParameters fitPar;
                    std::vector<std::string> paramNames;
                    paramNames.reserve(nComponents*nSpatialParams);
                    
                    for (int i = 0, c = 0; c != nComponents; ++c) {
                        coeffs[i] = 1;                  // the constant part of each spatial order
                        for (int s = 0; s != nSpatialParams; ++s, ++i) {
                            paramNames.push_back((boost::format("C%d:%d") % c % s).str());
                            fitPar.Add(paramNames[i].c_str(), coeffs[i], stepSize[i]);
                        }
                    }
                    fitPar.Fix("C0:0");
                    //
                    // Create the minuit object that knows how to minimise our functor
                    //
                    MinimizeChi2<PixelT> minimizerFunc(getChi2, kernel, psfCells, nStarPerCell, nComponents, nSpatialParams);
                
                    double const errorDef = 1.0;       // use +- 1sigma errors
                    minimizerFunc.setErrorDef(errorDef);
                    //
                    // tell minuit about it
                    //    
                    ROOT::Minuit2::MnMigrad migrad(minimizerFunc, fitPar);
                    //
                    // And let it loose
                    //
                    int maxFnCalls = 0;                 // i.e. unlimited
                    ROOT::Minuit2::FunctionMinimum min =
                        migrad(maxFnCalls, tolerance/(1e-4*errorDef)); // minuit uses 0.1*1e-3*tolerance*errorDef
                
                    float minChi2 = min.Fval();
                    bool const isValid = min.IsValid() && std::isfinite(minChi2);
                    
                    if (true || isValid) {              // calculate coeffs even in minuit is unhappy
                        for (int i = 0; i != nComponents*nSpatialParams; ++i) {
                            coeffs[i] = min.UserState().Value(i);
                        }
                
                        setSpatialParameters(kernel, coeffs);
                    }
                
                #if 0                                   // Estimate errors;  we don't really need this
                    ROOT::Minuit2::MnMinos minos(minimizerFunc, min);
                    for (int i = 0, c = 0; c != nComponents; ++c) {
                        for (int s = 0; s != nSpatialParams; ++s, ++i) {
                            char const *name = paramNames[i].c_str();
                            printf("%s %g", name, min.UserState().Value(name));
                            if (isValid && !fitPar.Parameter(fitPar.Index(name)).IsFixed()) {
                                printf(" (%g+%g)\n", minos(i).first, minos(i).second);
                            }
                            printf("\n");
                        }
                    }
                #endif
                    //
                    // One time more through the Candidates setting their chi^2 values. We'll
                    // do all the candidates this time, not just the first nStarPerCell
                    //
                    psfCells.visitAllCandidates(&getChi2, true);
                    
                    return std::make_pair(isValid, minChi2);
                }
                    
                /************************************************************************************************************/
                /**
                 * Fit spatial kernel using approximate fluxes for candidates, and solving a linear system of equations
                 */        
                namespace {
                /// A class to calculate the A and b matrices used to estimate the PSF's spatial structure
                ///
                /// Given a set of kernels, and postage stamps of stars, we want to generate a PSF:
                ///
                /// PSF(u,v;x,y) = K_0(u,v) + sum_(i>0) a_i F_i(x,y) K_i(u,v)
                ///
                /// where K_0 = k_0(u,v) / sum_(u,v) k_0(u,v)
                /// and K_(i>0) = k_i(u,v) / sum_(u,v) k_i(u,v) - K_0(u,v)
                ///
                /// The K_i, i > 0 have zero sum, while K_0 has unit sum, so the PSF sum will
                /// always be unity by construction.  This is basically the Alard
                /// (2000A&AS..144..363A) technique.
                ///
                /// The kernels provided to us here (through the 'kernel' in the constructor)
                /// are the K_i; the conversion from k_i to K_i is done elsewhere (e.g.,
                /// createKernelFromPsfCandidates).
                ///
                /// Then the problem may be expressed as the matrix problem, Ax = b, where:
                ///
                /// A_(i,j) = sum_(x,y,u,v) F_i(x,y) K_i(u,v) F_j(x,y) K_j(u,v)
                ///
                /// b_i = sum_(x,y,u,v) [D(u,v) - K_0(u,v)] F_i(x,y) K_i(u,v)
                ///
                /// Here, the sum_(x,y,u,v) means over all the postage stamps (u,v) of all the
                /// stars (different x,y positions).  We take x,y for the star as the x,y for
                /// the entire postage stamp, which greatly reduces the computation burden of
                /// recalculating the polynomial for every pixel.  This assumes that the spatial
                /// variation is smooth and gradual.
                ///
                /// Note that because the 0th component has no spatial variation (in a formal
                /// sense; its spatial variation is accomplished through its being subtracted
                /// from the other components), the 'A' matrix and 'b' vector have have
                /// dimensions (nComponents-1)*nSpatialParams, rather than
                /// nComponents*nSpatialParams.  This affects the bounds of some of the
                /// iterations, below.
                ///
                template<typename PixelT>
                class FillABVisitor : public afwMath::CandidateVisitor {
                    typedef afwImage::Image<PixelT> Image;
                    typedef afwImage::MaskedImage<PixelT> MaskedImage;
                    typedef afwImage::Exposure<PixelT> Exposure;
                    
                    typedef afwImage::Image<afwMath::Kernel::Pixel> KImage;
                public:
                    explicit FillABVisitor(afwMath::LinearCombinationKernel const& kernel, // the Kernel we're fitting
                                           double tau2=0.0                // floor to the per-candidate variance
                                          ) :
                        afwMath::CandidateVisitor(),
                        _kernel(kernel),
                        _tau2(tau2),
                        _nSpatialParams(_kernel.getNSpatialParameters()),
                        _nComponents(_kernel.getNKernelParameters()),
                        _basisImgs(),
                        _A((_nComponents-1)*_nSpatialParams, (_nComponents-1)*_nSpatialParams),
                        _b((_nComponents-1)*_nSpatialParams),
                        _basisDotBasis(_nComponents, _nComponents)
                    {
                        _basisImgs.resize(_nComponents);
                
                        _A.setZero();
                        _b.setZero();
                        //
                        // Get all the Kernel's components as Images
                        //
                        afwMath::KernelList const& kernels = _kernel.getKernelList(); // Kernel's components
                        for (int i = 0; i != _nComponents; ++i) {
                            _basisImgs[i] = typename KImage::Ptr(new KImage(kernels[i]->getDimensions()));
                            kernels[i]->computeImage(*_basisImgs[i], false);
                        }
                
                        //
                        // Calculate the inner products of the Kernel components once and for all
                        //
                        for (int i = 1; i != _nComponents; ++i) { // Don't need 0th component
                            for (int j = i; j != _nComponents; ++j) {
                                _basisDotBasis(i, j) = _basisDotBasis(j, i) =
                                    afwImage::innerProduct(*_basisImgs[i], *_basisImgs[j],
                                                           PsfCandidate<PixelT>::getBorderWidth());
                            }
                        }
                    }
                    
                    void reset() {}
                    
                    // Called by SpatialCellSet::visitCandidates for each Candidate
                    void processCandidate(afwMath::SpatialCellCandidate *candidate) {
                        PsfCandidate<PixelT> *imCandidate = dynamic_cast<PsfCandidate<PixelT> *>(candidate);
                        if (imCandidate == NULL) {
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
803  <a href="#aebf9ce2">aebf9ce2</a> -             throw LSST_EXCEPT(lsst::pex::exceptions::LogicErrorException,</div>
              ?                                                                ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
803  <a href="#ed246562">ed246562</a> +             throw LSST_EXCEPT(lsst::pex::exceptions::LogicError,</div>
                                              "Failed to cast SpatialCellCandidate to PsfCandidate");
                        }
                
                        CONST_PTR(MaskedImage) data;
                        try {
                            data = imCandidate->getMaskedImage(_kernel.getWidth(), _kernel.getHeight()); 
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
810  <a href="#aebf9ce2">aebf9ce2</a> -         } catch(lsst::pex::exceptions::LengthErrorException &) {</div>
              ?                                                   ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
810  <a href="#ed246562">ed246562</a> +         } catch(lsst::pex::exceptions::LengthError &) {</div>
                            return;
                        }
                        double const xcen = imCandidate->getXCenter();
                        double const ycen = imCandidate->getYCenter();
                        double const dx = afwImage::positionToIndex(xcen, true).second;
                        double const dy = afwImage::positionToIndex(ycen, true).second;
                
                #if 0
                        double const amp = imCandidate->getAmplitude();
                #else
                        /*
                         * Estimate the amplitude based on the current basis functions.
                         *
                         * N.b. you have to be a little careful here.  Consider a PSF that is phi == (N0 + b*y*N1)/(1 + b*y)
                         * where the amplitude of N0 and N1 is 1.0, so a star has profile I = A*(N0 + b*y*N1)/(1 + b*y)
                         *
                         * If we set the amplitude to be A = I(0)/phi(0) (i.e. the central value of the data and best-fit phi)
                         * then the coefficient of N0 becomes 1/(1 + b*y) which makes the model non-linear in y.
                         */
                        std::pair<afwMath::Kernel::Ptr, std::pair<double, double> > ret =
                            fitKernelToImage(_kernel, *data, afwGeom::Point2D(xcen, ycen));
                        double const amp = ret.second.first;
                #endif
                        
                        double const var = imCandidate->getVar();
                        double const ivar = 1/(var + _tau2); // Allow for floor on variance
                
                        // Spatial params of all the components
                        std::vector<std::vector<double> > params(_nComponents);
                        for (int ic = 1; ic != _nComponents; ++ic) { // Don't need params[0]
                            params[ic] = _kernel.getSpatialFunction(ic)->getDFuncDParameters(xcen, ycen);
                        }
                
                        std::vector<typename KImage::Ptr> basisImages = offsetKernel<KImage>(_kernel, dx, dy);
                
                        // Prepare values for basis dot data
                        // Scale data and subtract 0th component as part of unit kernel sum construction
                        typename Image::Ptr dataImage(new Image(*data->getImage(), true));
                        typename KImage::fast_iterator bPtr = basisImages[0]->begin(true);
                        for (typename Image::fast_iterator dPtr = dataImage->begin(true), end = dataImage->end(true);
                             dPtr != end; ++dPtr, ++bPtr) {
                            *dPtr = *dPtr / amp - *bPtr;
                        }
                
                        for (int i = 0, ic = 1; ic != _nComponents; ++ic) { // Don't need 0th component now
                            double const basisDotData = afwImage::innerProduct(*basisImages[ic], *dataImage,
                                                                               PsfCandidate<PixelT>::getBorderWidth());
                            for (int is = 0; is != _nSpatialParams; ++is, ++i) {
                                _b(i) += ivar*params[ic][is]*basisDotData;
                                
                                for (int j = i, jc = ic; jc != _nComponents; ++jc) {
                                    for (int js = (i == j) ? is : 0; js != _nSpatialParams; ++js, ++j) {
                                        _A(i, j) += ivar*params[ic][is]*params[jc][js]*_basisDotBasis(ic, jc);
                                        _A(j, i) = _A(i, j); // could do this after _A is fully calculated
                                    }
                                }
                            }
                        }
                    }
                
                    Eigen::MatrixXd const& getA() const { return _A; }
                    Eigen::VectorXd const& getB() const { return _b; }
                    
                private:
                    afwMath::LinearCombinationKernel const& _kernel;  // the kernel
                    double _tau2;                    // variance floor added in quadrature to true candidate variance
                    int const _nSpatialParams;       // number of spatial parameters
                    int const _nComponents;          // number of basis functions
                    std::vector<typename KImage::Ptr> _basisImgs; // basis function images from _kernel
                    Eigen::MatrixXd _A;              // We'll solve the matrix equation A x = b for the Kernel's coefficients
                    Eigen::VectorXd _b;
                    Eigen::MatrixXd _basisDotBasis;  // the inner products of the  Kernel components
                };
                
                
                /// A class to set the best-fit PSF amplitude for an object
                template<typename PixelT>
                class setAmplitudeVisitor : public afwMath::CandidateVisitor {
                    typedef afwImage::MaskedImage<PixelT> MaskedImage;
                    typedef afwImage::Exposure<PixelT> Exposure;
                public:
                    // Called by SpatialCellSet::visitCandidates for each Candidate
                    void processCandidate(afwMath::SpatialCellCandidate *candidate) {
                        PsfCandidate<PixelT> *imCandidate = dynamic_cast<PsfCandidate<PixelT> *>(candidate);
                        if (imCandidate == NULL) {
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
896  <a href="#aebf9ce2">aebf9ce2</a> -             throw LSST_EXCEPT(lsst::pex::exceptions::LogicErrorException,</div>
              ?                                                                ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
896  <a href="#ed246562">ed246562</a> +             throw LSST_EXCEPT(lsst::pex::exceptions::LogicError,</div>
                                              "Failed to cast SpatialCellCandidate to PsfCandidate");
                        }
                        imCandidate->setAmplitude(afwMath::makeStatistics(*imCandidate->getMaskedImage()->getImage(),
                                                                          afwMath::MAX).getValue());
                    }
                };
                
                }
                
                
                template<typename PixelT>
                std::pair<bool, double>
                fitSpatialKernelFromPsfCandidates(
                        afwMath::Kernel *kernel,                 ///< the Kernel to fit
                        afwMath::SpatialCellSet const& psfCells, ///< A SpatialCellSet containing PsfCandidates
                        bool const doNonLinearFit,               ///< Use the full-up nonlinear fitter
                        int const nStarPerCell,                  ///< max no. of stars per cell; <= 0 => infty
                        double const tolerance,                   ///< Tolerance; how close chi^2 should be to true minimum
                        double const lambda                       ///< floor for variance is lambda*data
                                                 )
                {
                    if (doNonLinearFit) {
                        return fitSpatialKernelFromPsfCandidates<PixelT>(kernel, psfCells, nStarPerCell, tolerance);
                    }
                
                    double const tau = 0;               // softening for errors
                
                    afwMath::LinearCombinationKernel const* lcKernel =
                        dynamic_cast<afwMath::LinearCombinationKernel const*>(kernel);
                    if (!lcKernel) {
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
927  <a href="#aebf9ce2">aebf9ce2</a> -         throw LSST_EXCEPT(lsst::pex::exceptions::LogicErrorException,</div>
              ?                                                            ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
927  <a href="#ed246562">ed246562</a> +         throw LSST_EXCEPT(lsst::pex::exceptions::LogicError,</div>
                                          "Failed to cast Kernel to LinearCombinationKernel while building spatial PSF model");
                    }
                #if 1
                    //
                    // Set the initial amplitudes of all our candidates
                    //
                    setAmplitudeVisitor<PixelT> setAmplitude;
                    psfCells.visitAllCandidates(&setAmplitude, true);
                #endif
                    //
                    // visitor that fills out the A and b matrices (we'll solve A x = b for the coeffs, x)
                    //
                    FillABVisitor<PixelT> getAB(*lcKernel, tau);
                    //
                    // Actually visit all our candidates
                    //
                    psfCells.visitCandidates(&getAB, nStarPerCell, true);
                    //
                    // Extract A and b, and solve Ax = b
                    //
                    Eigen::MatrixXd const& A = getAB.getA();
                    Eigen::VectorXd const& b = getAB.getB();
                    Eigen::VectorXd x0(b.size());       // Solution to matrix problem
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
951  <a href="#6f6b786b">6f6b786b</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
952  <a href="#6f6b786b">6f6b786b</a> -     switch (b.size()) {</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
953  <a href="#6f6b786b">6f6b786b</a> -       case 0:                           // One candidate, no spatial variability</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
954  <a href="#6f6b786b">6f6b786b</a> -         break;</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
955  <a href="#6f6b786b">6f6b786b</a> -       case 1:                           // eigen can't/won't handle 1x1 matrices</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
956  <a href="#6f6b786b">6f6b786b</a> -         x0(0) = b(0)/A(0, 0);</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
957  <a href="#6f6b786b">6f6b786b</a> -         break;</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
958  <a href="#6f6b786b">6f6b786b</a> -       default:</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
959  <a href="#6f6b786b">6f6b786b</a> -         x0 = A.jacobiSvd(Eigen::ComputeThinU | Eigen::ComputeThinV).solve(b);</div>
              ? ----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
951  <a href="#8a243a45">8a243a45</a> +     x0 = A.jacobiSvd(Eigen::ComputeThinU | Eigen::ComputeThinV).solve(b);</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
960  <a href="#6f6b786b">6f6b786b</a> -         break;</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
961  <a href="#6f6b786b">6f6b786b</a> -     }</div>
                #if 0
                    std::cout << "A " << A << std::endl;
                    std::cout << "b " << b.transpose() << std::endl;
                    std::cout << "x " << x.transpose() << std::endl;
                
                    afwImage::Image<double> img(b.size(), b.size());
                    for (int j = 0; j < b.size(); ++j) {
                        for (int i = 0; i < b.size(); ++i) {
                            img(i, j) = A(i, j);
                        }
                    }
                    img.writeFits("a.fits");
                
                    if (x.cols() >= 6) {
                        for (int i = 0; i != 6; ++i) {
                            double xcen = 25; double ycen = 35 + 35*i;
                            std::cout << "x, y " << xcen << " , " << ycen << " b "
                                      << (x[3] + xcen*x[4] + ycen*x[5])/(x[0] + xcen*x[1] + ycen*x[2]) << std::endl;
                        }
                    }
                #endif
                
                    // Generate kernel parameters (including 0th component) from matrix solution
                    Eigen::VectorXd x(kernel->getNKernelParameters() * kernel->getNSpatialParameters()); // Kernel parameters
                    x(0) = 1.0;
                    std::fill(x.data() + 1, x.data() + kernel->getNSpatialParameters(), 0.0);
                    std::copy(x0.data(), x0.data() + x0.size(), x.data() + kernel->getNSpatialParameters());
                
                    setSpatialParameters(kernel, x);
                    //
                    // One time more through the Candidates setting their chi^2 values. We'll
                    // do all the candidates this time, not just the first nStarPerCell
                    //
                    // visitor that evaluates the chi^2 of the current fit
                    //
                    evalChi2Visitor<PixelT> getChi2(*kernel, lambda);
                
                    psfCells.visitAllCandidates(&getChi2, true);
                    
                    return std::make_pair(true, getChi2.getValue());
                }
                
                /************************************************************************************************************/
                /**
                 * Subtract a PSF from an image at a given position
                 */
                template<typename MaskedImageT>
                double subtractPsf(afwDetection::Psf const& psf,      ///< the PSF to subtract
                                   MaskedImageT *data,                ///< Image to subtract PSF from
                                   double x,                          ///< column position
                                   double y,                          ///< row position
                                   double psfFlux                     ///< object's PSF flux (if not NaN)
                                  )
                {
                    if (lsst::utils::isnan(x + y)) {
                        return std::numeric_limits<double>::quiet_NaN();
                    }
                
                    //
                    // Get Psf candidate
                    //
                    afwDetection::Psf::Image::Ptr kImage = psf.computeImage(afwGeom::PointD(x, y));
                
                    //
                    // Now find the proper sub-Image
                    //
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
1028 <a href="#1764f99f">1764f99f</a> -     afwGeom::BoxI bbox = kImage->getBBox(afwImage::PARENT);</div>
              ?                                          ----------------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
1018 <a href="#2d3a5fcc">2d3a5fcc</a> +     afwGeom::BoxI bbox = kImage->getBBox();</div>
                    
                    typename MaskedImageT::Ptr subData(new MaskedImageT(*data, bbox, afwImage::PARENT, false)); // shallow copy
                    //
                    // Now we've got both; find the PSF's amplitude
                    //
                    double lambda = 0.0;                // floor for variance is lambda*data
                    try {
                        double chi2;                    // chi^2 for fit
                        double amp;                     // estimate of amplitude of model at this point
                
                        if (lsst::utils::isnan(psfFlux)) {
                            std::pair<double, double> result = fitKernel(*kImage, *subData, lambda, true);
                            chi2 = result.first;        // chi^2 for fit
                            amp = result.second;        // estimate of amplitude of model at this point
                        } else {
                            chi2 = std::numeric_limits<double>::quiet_NaN();
                            amp = psfFlux/afwMath::makeStatistics(*kImage, afwMath::SUM).getValue();
                        }
                        //
                        // Convert kImage to the proper type so that I can subtract it.
                        //
                        typename MaskedImageT::Image::Ptr
                            kImageF(new typename MaskedImageT::Image(*kImage, true)); // of data's type
                
                        *kImageF *= amp;
                        *subData->getImage() -= *kImageF;
                        
                        return chi2;
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
1057 <a href="#7edcdd83">7edcdd83</a> -     } catch(lsst::pex::exceptions::RangeErrorException &e) {</div>
              ?                                              ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
1047 <a href="#ed246562">ed246562</a> +     } catch(lsst::pex::exceptions::RangeError &e) {</div>
                        LSST_EXCEPT_ADD(e, (boost::format("Object at (%.2f, %.2f)") % x % y).str());
                        throw e;
                    }
                }
                
                /************************************************************************************************************/
                /**
                 * Fit a LinearCombinationKernel to an Image, allowing the coefficients of the components to vary
                 *
                 * @return std::pair(coefficients, std::pair(kernels, center amplitude))
                 */
                template<typename Image>
                std::pair<std::vector<double>, afwMath::KernelList>
                fitKernelParamsToImage(
                        afwMath::LinearCombinationKernel const& kernel, ///< the Kernel to fit
                        Image const& image,                             ///< the image to be fit
                        afwGeom::Point2D const& pos                     ///< the position of the object
                                )
                {
                    typedef afwImage::Image<afwMath::Kernel::Pixel> KernelT;
                
                    afwMath::KernelList kernels = kernel.getKernelList();         // the Kernels that kernel adds together
                    int const nKernel = kernels.size();
                
                    if (nKernel == 0) {
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
1083 <a href="#aebf9ce2">aebf9ce2</a> -         throw LSST_EXCEPT(lsst::pex::exceptions::LengthErrorException,</div>
              ?                                                             ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
1073 <a href="#ed246562">ed246562</a> +         throw LSST_EXCEPT(lsst::pex::exceptions::LengthError,</div>
                                          "Your kernel must have at least one component");
                    }
                
                    /*
                     * Go through all the kernels, get a copy centered at the desired sub-pixel position, and then
                     * extract a subImage from the parent image at the same place
                     */
                    std::vector<KernelT::Ptr> kernelImages = offsetKernel<KernelT>(kernel, pos[0], pos[1]);
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
1092 <a href="#0c10fe3f">0c10fe3f</a> -     afwGeom::BoxI bbox(kernelImages[0]->getBBox(afwImage::PARENT));</div>
              ?                                                 ----------------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
1082 <a href="#2d3a5fcc">2d3a5fcc</a> +     afwGeom::BoxI bbox(kernelImages[0]->getBBox());</div>
                    Image const& subImage(Image(image, bbox, afwImage::PARENT, false)); // shallow copy
                
                    /*
                     * Solve the linear problem  subImage = sum x_i K_i + epsilon; we solve this for x_i by constructing the
                     * normal equations, A x = b
                     */
                    Eigen::MatrixXd A(nKernel, nKernel);
                    Eigen::VectorXd b(nKernel);
                
                    for (int i = 0; i != nKernel; ++i) {
                        b(i) = afwImage::innerProduct(*kernelImages[i], *subImage.getImage());
                
                        for (int j = i; j != nKernel; ++j) {
                            A(i, j) = A(j, i) = afwImage::innerProduct(*kernelImages[i], *kernelImages[j]);
                        }
                    }
                    Eigen::VectorXd x(nKernel);
                
                    if (nKernel == 1) {
                        x(0) = b(0)/A(0, 0);
                    } else {
                        x = A.jacobiSvd(Eigen::ComputeThinU | Eigen::ComputeThinV).solve(b);
                    }
                
                    // the XY0() point of the shifted Kernel basis functions
                    int const x0 = kernelImages[0]->getX0(), y0 = kernelImages[0]->getY0(); 
                
                    afwMath::KernelList newKernels(nKernel);
                    std::vector<double> params(nKernel);
                    for (int i = 0; i != nKernel; ++i) {
                        afwMath::Kernel::Ptr newKernel(new afwMath::FixedKernel(*kernelImages[i]));
                        newKernel->setCtrX(x0 + static_cast<int>(newKernel->getWidth()/2));
                        newKernel->setCtrY(y0 + static_cast<int>(newKernel->getHeight()/2));
                
                        params[i] = x[i];
                        newKernels[i] = newKernel;
                    }
                
                    return std::make_pair(params, newKernels);
                }
                
                
                /************************************************************************************************************/
                /**
                 * Fit a LinearCombinationKernel to an Image, allowing the coefficients of the components to vary
                 *
                 * @return std::pair(best-fit kernel, std::pair(amp, chi^2))
                 */
                template<typename Image>
                std::pair<afwMath::Kernel::Ptr, std::pair<double, double> >
                fitKernelToImage(
                        afwMath::LinearCombinationKernel const& kernel, ///< the Kernel to fit
                        Image const& image,                             ///< the image to be fit
                        afwGeom::Point2D const& pos                     ///< the position of the object
                                )
                {
                    std::pair<std::vector<double>, afwMath::KernelList> const fit = 
                        fitKernelParamsToImage(kernel, image, pos);
                    std::vector<double> params = fit.first;
                    afwMath::KernelList kernels = fit.second;
                    int const nKernel = params.size();
                    assert(kernels.size() == static_cast<unsigned int>(nKernel));
                
                    double amp = 0.0;
                    for (int i = 0; i != nKernel; ++i) {
                        afwMath::Kernel::Ptr base = kernels[i];
                        afwMath::FixedKernel::Ptr k = boost::static_pointer_cast<afwMath::FixedKernel>(base);
                        amp += params[i] * k->getSum();
                    }
                
                    afwMath::Kernel::Ptr outputKernel(new afwMath::LinearCombinationKernel(kernels, params));
                    double chisq = 0.0;
                    outputKernel->setCtrX(kernels[0]->getCtrX());
                    outputKernel->setCtrY(kernels[0]->getCtrY());
                
                    return std::make_pair(outputKernel, std::make_pair(amp, chisq));
                }
                
                
                /************************************************************************************************************/
                //
                // Explicit instantiations
                //
                /// \cond
                    typedef float Pixel;
                
                    template
                    std::pair<afwMath::LinearCombinationKernel::Ptr, std::vector<double> >
                    createKernelFromPsfCandidates<Pixel>(afwMath::SpatialCellSet const&, afwGeom::Extent2I const&,
                                                         afwGeom::Point2I const&, int const, int const, int const,
                                                         int const, bool const, int const);
                    template
                    int countPsfCandidates<Pixel>(afwMath::SpatialCellSet const&, int const);
                
                    template
                    std::pair<bool, double>
                    fitSpatialKernelFromPsfCandidates<Pixel>(afwMath::Kernel *, afwMath::SpatialCellSet const&,
                                                             int const, double const, double const);
                    template
                    std::pair<bool, double>
                    fitSpatialKernelFromPsfCandidates<Pixel>(afwMath::Kernel *, afwMath::SpatialCellSet const&, bool const,
                                                             int const, double const, double const);
                
                    template
                    double subtractPsf(afwDetection::Psf const&, afwImage::MaskedImage<float> *, double, double, double);
                
                    template
                    std::pair<std::vector<double>, afwMath::KernelList>
                    fitKernelParamsToImage(afwMath::LinearCombinationKernel const&,
                                     afwImage::MaskedImage<Pixel> const&, afwGeom::Point2D const&);
                
                    template
                    std::pair<afwMath::Kernel::Ptr, std::pair<double, double> >
                    fitKernelToImage(afwMath::LinearCombinationKernel const&,
                                     afwImage::MaskedImage<Pixel> const&, afwGeom::Point2D const&);
                /// \endcond
                }}}
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="1764f99f"/></a>1764f99f</h3>

<pre>
commit 1764f99fb6e7eba7cd81cddc2364e2ef257cf3fc
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Tue Dec 6 11:05:14 2011 -0500

    Deal with sub-images correctly
</pre>
<h3><a name="aebf9ce2"/></a>aebf9ce2</h3>

<pre>
commit aebf9ce2d713bd98254faa5f81346d957f26ad60
Author: rhl <rhl@git.lsstcorp.org>
Date:   Fri May 14 18:55:19 2010 +0000

    Worked on linear fitting of the PSF.  Needs more work, but is better than the trunk code [faster, anyway]
</pre>
<h3><a name="0c10fe3f"/></a>0c10fe3f</h3>

<pre>
commit 0c10fe3f012e0eb2a410a6492c159f1396a653fb
Merge: b3a317e a2dbc52
Author: dubcovsky <dubcovsky@git.lsstcorp.org>
Date:   Wed Apr 13 22:17:16 2011 +0000

    #1556 fixes to photometry to pass tests
</pre>
<h3><a name="c96eb542"/></a>c96eb542</h3>

<pre>
commit c96eb5426ca6a1c506cace14f73a42c4a6099253
Author: rhl <rhl@git.lsstcorp.org>
Date:   Mon Feb 28 10:58:40 2011 +0000

    FootprintSet.getFootprints was returning a potentially dangling reference
</pre>
<h3><a name="553f6be7"/></a>553f6be7</h3>

<pre>
commit 553f6be71a44ec13d29ac40b4c41603254f77ba5
Author: bick <bick@git.lsstcorp.org>
Date:   Fri Oct 23 19:23:31 2009 +0000

    #819 clean-up.
</pre>
<h3><a name="8e6973e4"/></a>8e6973e4</h3>

<pre>
commit 8e6973e41f9a90b14608f38c968b41ced4464397
Author: price <price@git.lsstcorp.org>
Date:   Tue Aug 2 23:28:19 2011 +0000

    Changes to PSF determination to deal with edge effects when kernels are small (because we warp with lsst::afw::math::offsetImage to move the source centers on and off the pixel center).  Added method getOffsetImage() to PsfCandidate to return an image offset so that the source center is on the pixel center; the offset image is appropriately buffered so that we don't suffer edge effects; getImage() and getOffsetImage() both use a new private method, extractImage().  Using this new method when constructing the PcaPsf.  Added function to do the offsetting of the kernels using the extended offsetImage (with buffering).
</pre>
<h3><a name="7edcdd83"/></a>7edcdd83</h3>

<pre>
commit 7edcdd839a068f6d98b4b2b69be247ffc8dea091
Author: rhl <rhl@git.lsstcorp.org>
Date:   Sun Mar 8 06:22:11 2009 +0000

    Use SpatialCell's visitor technology to implement spatial modelling of PSFs
</pre>
<h3><a name="6f6b786b"/></a>6f6b786b</h3>

<pre>
commit 6f6b786bce8ca34bf4c67f75f965130dea027147
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Wed Mar 4 08:21:46 2015 -0500

    Handle small numbers of psfCandidates (HSC-1176)
</pre>
<h3><a name="02f10cab"/></a>02f10cab</h3>

<pre>
commit 02f10cab026b6dca5558e3903f4d00d928fef7a7
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Tue Nov 22 17:53:58 2011 -0500

    Oops.  This one's an orphan from the psf NaN fixes merged a while ago
</pre>
<h3><a name="2fbce80a"/></a>2fbce80a</h3>

<pre>
commit 2fbce80abaea8f32aef5df136af2cb6fb541879d
Author: rhl <rhl@git.lsstcorp.org>
Date:   Tue Jan 26 15:46:33 2010 +0000

    Code is running on gcc on os/x, but not with intel.  Doing a ci so as to be able to try with intel on Linux
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="8a243a45"/></a>8a243a45</h3>

<pre>
commit 8a243a45e07c24d4d07c53500486332bc0935c89
Author: jbosch <jbosch@git.lsstcorp.org>
Date:   Thu Sep 29 20:18:15 2011 +0000

    meas/algorithms #1752 - now passing all tests with Eigen 3
</pre>
<h3><a name="2d3a5fcc"/></a>2d3a5fcc</h3>

<pre>
commit 2d3a5fccae9908251c54deaba743fc34137a65f5
Author: Russell Owen <rowen@uw.edu>
Date:   Thu Sep 11 17:45:03 2014 -0700

    Remove explicit use of image origin = PARENT; use default
</pre>
<h3><a name="ed246562"/></a>ed246562</h3>

<pre>
commit ed2465629cb2a0b4fe5aedeb9f447da02cf38736
Author: Russell Owen <rowen@uw.edu>
Date:   Tue Jun 17 16:16:40 2014 -0700

    Renamed exceptions
</pre>
</div>


[Return to list](#homelist)
# <a name="ups/meas_algorithms.cfg"/></a>ups/meas_algorithms.cfg
### Diff:

<pre>
                # -*- python -*-
                
                import lsst.sconsUtils
                
                dependencies = {
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
6    <a href="#b0d8591f">b0d8591f</a> -     "required": ["utils", "afw", "boost_math", "pex_config", "pipe_base"],</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
6    <a href="#e0c53995">e0c53995</a> +     "required": ["utils", "afw", "boost_math", "pex_config", "meas_base", "pipe_base"],</div>
              ?                                                             +++++++++++++
                    "buildRequired": ["boost_test", "swig"],
                }
                
                config = lsst.sconsUtils.Configuration(
                    __file__,
                    headers=["lsst/meas/algorithms.h"],
                    hasDoxygenInclude=False,
                    hasSwigFiles=True,
                )
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="b0d8591f"/></a>b0d8591f</h3>

<pre>
commit b0d8591f0e28fd34c95f1548ebda5695e46d2a22
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Mon Feb 20 18:14:44 2012 -0500

    merge from tickets/1843; tests/psf.py is failing, but it appears to be failing on master too
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="e0c53995"/></a>e0c53995</h3>

<pre>
commit e0c5399542b1906c46316262cf9f39f3e0807254
Author: pgee <pgee@pgeepc2.physics.ucdavis.edu>
Date:   Thu Mar 12 14:33:02 2015 -0700

    Remove files not longer needs once measurement is removed from meas_algorithms
    
    DM-420 changes to retained files for removal of measurement
</pre>
</div>


[Return to list](#homelist)
# <a name="python/lsst/meas/algorithms/testUtils.py"/></a>python/lsst/meas/algorithms/testUtils.py
### Diff:

<pre>
                #!/usr/bin/env python
                #
                # LSST Data Management System
                # Copyright 2008-2013 LSST Corporation.
                #
                # This product includes software developed by the
                # LSST Project (http://www.lsst.org/).
                #
                # This program is free software: you can redistribute it and/or modify
                # it under the terms of the GNU General Public License as published by
                # the Free Software Foundation, either version 3 of the License, or
                # (at your option) any later version.
                #
                # This program is distributed in the hope that it will be useful,
                # but WITHOUT ANY WARRANTY; without even the implied warranty of
                # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                # GNU General Public License for more details.
                #
                # You should have received a copy of the LSST License Statement and
                # the GNU General Public License along with this program.  If not,
                # see <http://www.lsstcorp.org/LegalNotices/>.
                #
                
                import numpy
                
                import lsst.afw.image           as afwImage
                import lsst.afw.geom            as afwGeom
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
28   <a href="#138e4ce0">138e4ce0</a> - import lsst.afw.table           as afwTable</div>
                from .algorithmsLib import SingleGaussianPsf
                
                def plantSources(bbox, kwid, sky, coordList, addPoissonNoise=True):
                    """Make an exposure with stars (modelled as Gaussians)
                
                    @param bbox: parent bbox of exposure
                    @param kwid: kernel width (and height; kernel is square)
                    @param sky: amount of sky background (counts)
                    @param coordList: a list of [x, y, counts, sigma], where:
                        * x,y are relative to exposure origin
                        * counts is the integrated counts for the star
                        * sigma is the Gaussian sigma in pixels
                    @param addPoissonNoise: add Poisson noise to the exposure?
                    """
                    # make an image with sources
                    img = afwImage.ImageD(bbox)
                    meanSigma = 0.0
                    for coord in coordList:
                        x, y, counts, sigma = coord
                        meanSigma += sigma
                
                        # make a single gaussian psf
                        psf = SingleGaussianPsf(kwid, kwid, sigma)
                
                        # make an image of it and scale to the desired number of counts
                        thisPsfImg = psf.computeImage(afwGeom.PointD(int(x), int(y)))
                        thisPsfImg *= counts
                
                        # bbox a window in our image and add the fake star image
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
58   <a href="#138e4ce0">138e4ce0</a> -         imgSeg = img.Factory(img, thisPsfImg.getBBox(afwImage.PARENT), afwImage.PARENT)</div>
              ?                                                      --------------- -----------------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
57   <a href="#2d3a5fcc">2d3a5fcc</a> +         imgSeg = img.Factory(img, thisPsfImg.getBBox())</div>
                        imgSeg += thisPsfImg
                    meanSigma /= len(coordList)
                
                    img += sky
                
                    # add Poisson noise
                    if (addPoissonNoise):
                        numpy.random.seed(seed=1) # make results reproducible
                        imgArr = img.getArray()
                        imgArr[:] = numpy.random.poisson(imgArr)
                
                    # bundle into a maskedimage and an exposure
                    mask = afwImage.MaskU(bbox)
                    var = img.convertFloat()
                    img -= sky
                    mimg = afwImage.MaskedImageF(img.convertFloat(), mask, var)
                    exposure = afwImage.makeExposure(mimg)
                
                    # insert an approximate psf
                    psf = SingleGaussianPsf(kwid, kwid, meanSigma)
                    exposure.setPsf(psf)
                
                    return exposure
                
                
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="138e4ce0"/></a>138e4ce0</h3>

<pre>
commit 138e4ce08a5d66b0e7ac4f7ff003b4ca84f207a9
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Thu Mar 28 12:45:56 2013 -0400

    Move generally-useful test utility code out of apCorrTest.
    
    Several unit tests were using apCorrTest.plantSources; this function has
    been moved to meas.algorithms.testUtils, so we can safely delete
    apCorrTest if we'd like, and also allow downstream packages to use
    plantSources.
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="2d3a5fcc"/></a>2d3a5fcc</h3>

<pre>
commit 2d3a5fccae9908251c54deaba743fc34137a65f5
Author: Russell Owen <rowen@uw.edu>
Date:   Thu Sep 11 17:45:03 2014 -0700

    Remove explicit use of image origin = PARENT; use default
</pre>
</div>


[Return to list](#homelist)
# <a name="src/ImagePsf.cc"/></a>src/ImagePsf.cc
### Diff:

<pre>
                // -*- LSST-C++ -*-
                /*
                 * LSST Data Management System
                 * Copyright 2008-2013 LSST Corporation.
                 *
                 * This product includes software developed by the
                 * LSST Project (http://www.lsst.org/).
                 *
                 * This program is free software: you can redistribute it and/or modify
                 * it under the terms of the GNU General Public License as published by
                 * the Free Software Foundation, either version 3 of the License, or
                 * (at your option) any later version.
                 *
                 * This program is distributed in the hope that it will be useful,
                 * but WITHOUT ANY WARRANTY; without even the implied warranty of
                 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                 * GNU General Public License for more details.
                 *
                 * You should have received a copy of the LSST License Statement and
                 * the GNU General Public License along with this program.  If not,
                 * see <http://www.lsstcorp.org/LegalNotices/>.
                 */
                
                #include "lsst/afw/image/MaskedImage.h"
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
25   <a href="#4ccc250c">4ccc250c</a> - #include "lsst/afw/geom/ellipses.h"</div>
                #include "lsst/meas/algorithms/ImagePsf.h"
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
27   <a href="#e961b43c">e961b43c</a> - #include "lsst/meas/algorithms/Photometry.h"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
28   <a href="#e961b43c">e961b43c</a> - #include "lsst/meas/algorithms/detail/SdssShape.h"</div>
              ?                      -------- -- ----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
26   <a href="#9a5e3ce9">9a5e3ce9</a> + #include "lsst/meas/base/SdssShape.h"</div>
              ?                     +
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
27   <a href="#dc5cc57e">dc5cc57e</a> + #include "lsst/meas/base/ApertureFlux.h"</div>
                
                namespace lsst { namespace meas { namespace algorithms {
                
                double ImagePsf::doComputeApertureFlux(
                    double radius, afw::geom::Point2D const & position, afw::image::Color const & color
                ) const {
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
35   <a href="#e961b43c">e961b43c</a> -     afw::image::MaskedImage<double> mi(computeKernelImage(position, color, INTERNAL));</div>
              ?                 ------               ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
34   <a href="#dc5cc57e">dc5cc57e</a> +     afw::image::Image<double> const & image(*computeKernelImage(position, color, INTERNAL));</div>
              ?                               +++++++++ ^^^ +
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
35   <a href="#8de1e2e9">8de1e2e9</a> + </div>
                    afw::geom::Point2D const center(0.0, 0.0);
                    afw::geom::ellipses::Axes const axes(radius, radius);
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
38   <a href="#8de1e2e9">8de1e2e9</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
39   <a href="#8de1e2e9">8de1e2e9</a> -     std::pair<double,double> result =</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
40   <a href="#8de1e2e9">8de1e2e9</a> -         photometry::calculateSincApertureFlux(mi, afw::geom::ellipses::Ellipse(axes, center));</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
38   <a href="#8cffc17a">8cffc17a</a> +     base::ApertureFluxResult result = base::ApertureFluxAlgorithm::computeSincFlux(</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
39   <a href="#dc5cc57e">dc5cc57e</a> +         image,</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
40   <a href="#dc5cc57e">dc5cc57e</a> +         afw::geom::ellipses::Ellipse(axes, center),</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
41   <a href="#dc5cc57e">dc5cc57e</a> +         base::ApertureFluxControl()</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
41   <a href="#8de1e2e9">8de1e2e9</a> -     </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
42   <a href="#dc5cc57e">dc5cc57e</a> +     );</div>
              ?     ++
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
42   <a href="#e961b43c">e961b43c</a> -     return result.first;</div>
              ?                    ^^^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
43   <a href="#dc5cc57e">dc5cc57e</a> +     return result.flux;</div>
              ?                    ^^^
                }
                
                afw::geom::ellipses::Quadrupole ImagePsf::doComputeShape(
                    afw::geom::Point2D const & position, afw::image::Color const & color
                ) const {
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
48   <a href="#e961b43c">e961b43c</a> -     detail::SdssShapeImpl shape;</div>
                    PTR(Image) image = computeKernelImage(position, color, INTERNAL);
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
50   <a href="#9a5e3ce9">9a5e3ce9</a> +     return meas::base::SdssShapeAlgorithm::computeAdaptiveMoments(</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
50   <a href="#e961b43c">e961b43c</a> -     // n.b. getAdaptiveMoments doesn't account for xy0, so we have to do it manually</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
51   <a href="#e961b43c">e961b43c</a> -     detail::getAdaptiveMoments(</div>
                        *image,
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
52   <a href="#9a5e3ce9">9a5e3ce9</a> +         afw::geom::Point2D(0.0, 0.0)  // image has origin at the center</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
53   <a href="#9a5e3ce9">9a5e3ce9</a> +     ).getShape();</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
53   <a href="#e961b43c">e961b43c</a> -         0.0, -image->getX0(), -image->getY0(), 1.0,   // background, x, y, shiftmax</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
54   <a href="#e961b43c">e961b43c</a> -         &shape</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
55   <a href="#e961b43c">e961b43c</a> -     );</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
56   <a href="#e961b43c">e961b43c</a> -     return afw::geom::ellipses::Quadrupole(shape.getIxx(), shape.getIyy(), shape.getIxy());</div>
                }
                
                }}} // namespace lsst::meas::algorithms
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="8de1e2e9"/></a>8de1e2e9</h3>

<pre>
commit 8de1e2e98ec5417845736aac477ac06d7605818f
Merge: c86591c ebb2dd2
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Thu Apr 11 16:05:37 2013 -0400

    Merge branch 'master' into next
    
    Merge conflicts appeared trivial.
    I also needed to update the calculateSincApertureFlux call in ImagePsf.cc, doComputeApertureFlux
    
    Conflicts:
    	include/lsst/meas/algorithms.h
    	python/lsst/meas/algorithms/algorithmsLib.i
    	python/lsst/meas/algorithms/measurement.py
</pre>
<h3><a name="4ccc250c"/></a>4ccc250c</h3>

<pre>
commit 4ccc250c4a40f1e212495e327b2cb7d3d243cdc0
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Fri Apr 5 13:12:23 2013 -0400

    Need to use new sinc photometry API in ImagePsf.
</pre>
<h3><a name="e961b43c"/></a>e961b43c</h3>

<pre>
commit e961b43c518e366be3fcd13e2b44eb09b9737bb9
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Tue Mar 19 17:49:10 2013 -0400

    Add ImagePsf as intermediate base class for all Psfs.
    
    ImagePsf implements aperture and shape calculation for its derived
    classes, using Sinc photometry and SdssShape.
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="8cffc17a"/></a>8cffc17a</h3>

<pre>
commit 8cffc17a6d7cb20dd0e247c2696750bdc3ccc93c
Author: Perry Gee <pgee@physics.ucdavis.edu>
Date:   Sat Mar 14 21:18:25 2015 -0500

    Changes for review and removal of Version0FlagMapper
    
    Other fixes for review
</pre>
<h3><a name="9a5e3ce9"/></a>9a5e3ce9</h3>

<pre>
commit 9a5e3ce9c6eb02459aa5bdcc533d2101add7dda1
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Tue Mar 17 12:32:22 2015 -0400

    Replace usage of SdssShapeImpl with new method on SdssShapeAlgorithm.
</pre>
<h3><a name="8de1e2e9"/></a>8de1e2e9</h3>

<pre>
commit 8de1e2e98ec5417845736aac477ac06d7605818f
Merge: c86591c ebb2dd2
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Thu Apr 11 16:05:37 2013 -0400

    Merge branch 'master' into next
    
    Merge conflicts appeared trivial.
    I also needed to update the calculateSincApertureFlux call in ImagePsf.cc, doComputeApertureFlux
    
    Conflicts:
    	include/lsst/meas/algorithms.h
    	python/lsst/meas/algorithms/algorithmsLib.i
    	python/lsst/meas/algorithms/measurement.py
</pre>
<h3><a name="dc5cc57e"/></a>dc5cc57e</h3>

<pre>
commit dc5cc57eb9f18e2cfeb20a02a5c0464aa6aa0325
Author: pgee <pgee@pgeepc2.physics.ucdavis.edu>
Date:   Thu Mar 12 14:34:53 2015 -0700

    DM-420 removed the measurement framework and related files from meas_algorithms
    
    Remove examples, most of which were specifically for meas_algorithms measurement.
    growthcurve.py will be moved to meas_base, keep only measAlgTasks.py
    Delete tests which should be in meas_base.
    Fix tests which remained in meas_algorithms so that they would run with meas_base.
</pre>
</div>


[Return to list](#homelist)
# <a name="tests/CoaddPsf.py"/></a>tests/CoaddPsf.py
### Diff:

<pre>
                #!/usr/bin/env python
                # 
                # LSST Data Management System
                # Copyright 2008, 2009, 2010 LSST Corporation.
                # 
                # This product includes software developed by the
                # LSST Project (http://www.lsst.org/).
                #
                # This program is free software: you can redistribute it and/or modify
                # it under the terms of the GNU General Public License as published by
                # the Free Software Foundation, either version 3 of the License, or
                # (at your option) any later version.
                # 
                # This program is distributed in the hope that it will be useful,
                # but WITHOUT ANY WARRANTY; without even the implied warranty of
                # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                # GNU General Public License for more details.
                # 
                # You should have received a copy of the LSST License Statement and 
                # the GNU General Public License along with this program.  If not, 
                # see <http://www.lsstcorp.org/LegalNotices/>.
                #
                
                """
                Tests for CoaddPsf code
                
                Run with:
                   python CoaddPsf.py
                """
                
                import os, sys
                from math import *
                import numpy
                import unittest
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
35   <a href="#7392b21b">7392b21b</a> - import eups</div>
                import lsst.utils.tests as utilsTests
                import lsst.pex.exceptions as pexExceptions
                import lsst.pex.logging as logging
                
                import math
                import pdb
                import numpy
                
                import lsst.pex.config as pexConfig
                import lsst.afw.geom as afwGeom
                import lsst.afw.math as afwMath
                import lsst.afw.detection as afwDetection
                import lsst.afw.table as afwTable
                import lsst.afw.image as afwImage
                import lsst.afw.coord as afwCoord
                import lsst.pipe.base as pipeBase
                import lsst.afw.cameraGeom as cameraGeom
                import lsst.meas.algorithms as measAlg
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
54   <a href="#3507c21a">3507c21a</a> - from lsst.afw.geom.polygon import Polygon</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
55   <a href="#3507c21a">3507c21a</a> - </div>
                
                try:
                    type(verbose)
                except NameError:
                    verbose = 0
                    logging.Trace.setVerbosity("meas.algorithms.Interp", verbose)
                    logging.Trace.setVerbosity("afw.detection.Psf", verbose)
                    display = False
                
                #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                def getPsfMoments(psf, point):
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
64   <a href="#6f4cb65e">6f4cb65e</a> + #    import os, pdb; print "PID =", os.getpid(); pdb.set_trace()</div>
                    image = psf.computeImage(point)
                    array = image.getArray()
                    sumx2 = 0.0
                    sumy2 = 0.0
                    sumy = 0.0
                    sumx = 0.0
                    sum = 0.0
                    for x in range(image.getWidth()):
                        for y in range(image.getHeight()):
                            f = array[y][x]
                            sumx2 += x*x*f
                            sumy2 += y*y*f
                            sumx += x*f
                            sumy += y*f
                            sum += f
                    xbar = sumx/sum
                    ybar = sumy/sum
                    mxx = sumx2 - 2*xbar*sumx + xbar*xbar*sum
                    myy = sumy2 - 2*ybar*sumy + ybar*ybar*sum
                    return sum, xbar, ybar, mxx, myy, image.getX0(), image.getY0()
                
                def getPsfSecondMoments(psf, point):
                    sum,xbar,ybar,mxx,myy,x0,y0 = getPsfMoments(psf, point)
                    return mxx, myy
                
                # Test to be sure that the values A,B are within +- relative diff of each other
                def testRelDiff(A,B,delta):
                    retval = abs((A-B)/(.5*(A+B)))
                    if (retval > delta):
                        print "Error: A: ",A," B:",B
                        return False
                    return True
                
                def makeBiaxialGaussianPsf(sizex, sizey, sigma1, sigma2, theta):
                    kernel = afwMath.AnalyticKernel(sizex, sizey, afwMath.GaussianFunction2D(sigma1, sigma2, theta))
                    return measAlg.KernelPsf(kernel)
                
                # This is a mock method for coadding the moments of the component Psfs at a point
                # Check that the coaddpsf passed in is really using the correct components and weighting them properly
                # The components in this case are all single gaussians, and we will just add the moments
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
105  <a href="#45434db4">45434db4</a> + def getCoaddSecondMoments(coaddpsf, point, extent=afwGeom.Extent2I(0,0)):</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
107  <a href="#3507c21a">3507c21a</a> - # If useValidPolygon = True then the exposures are expected to have validPolygons defined, otherwise</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
108  <a href="#3507c21a">3507c21a</a> - # it will set the whoe region as valid</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
109  <a href="#3507c21a">3507c21a</a> - def getCoaddSecondMoments(coaddpsf, point, useValidPolygon=False):</div>
                    count = coaddpsf.getComponentCount()
                    coaddWcs = coaddpsf.getCoaddWcs()
                    weight_sum = 0.0
                    m1_sum = 0.0
                    m2_sum = 0.0
                    components = []
                    for i in range(count):
                        wcs = coaddpsf.getWcs(i)
                        psf = coaddpsf.getPsf(i)
                        bbox = afwGeom.Box2D(coaddpsf.getBBox(i))
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
120  <a href="#3507c21a">3507c21a</a> -         if useValidPolygon:</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
121  <a href="#3507c21a">3507c21a</a> -             validPolygon = coaddpsf.getValidPolygon(i)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
122  <a href="#3507c21a">3507c21a</a> -         else:</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
123  <a href="#3507c21a">3507c21a</a> -             validPolygon = Polygon(bbox)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
124  <a href="#3507c21a">3507c21a</a> - </div>
                        point_rel = wcs.skyToPixel(coaddWcs.pixelToSky(afwGeom.Point2D(point)))
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
126  <a href="#3507c21a">3507c21a</a> -         if bbox.contains(point_rel) and validPolygon.contains(point_rel):</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
117  <a href="#7392b21b">7392b21b</a> +         if bbox.contains(point_rel):</div>
                            weight = coaddpsf.getWeight(i)
                            m0,xbar,ybar,mxx,myy,x0,y0 = getPsfMoments(psf, point) #, extent)
                            m1_sum += mxx*weight
                            m2_sum += myy*weight
                            weight_sum += weight
                    if weight_sum == 0.0:
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
133  <a href="#3507c21a">3507c21a</a> -         return 0,0</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
124  <a href="#7392b21b">7392b21b</a> +         return 0,0,0</div>
              ?                ++
                    else:
                        return m1_sum/weight_sum, m2_sum/weight_sum
                
                class CoaddPsfTest(unittest.TestCase):
                
                #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                #   This is a test which checks to see that all of the ExposureCatalog rows are correctly
                #   ingested by the CoaddPsf constructor, and that they can be read back in the right order
                #   and with the right values
                #   The weightname mechanism is also tested.  Whatever input column name is used should be
                #   mapped to "weight"
                
                    def testCreate(self):
                
                        """Check that we can create a CoaddPsf with 9 elements"""
                        print "CreatePsfTest"
                        # this is the coadd Wcs we want
                        cd11 = 5.55555555e-05
                        cd12 = 0.0
                        cd21 = 0.0
                        cd22 = 5.55555555e-05
                        crval1 = 0.0
                        crval2 = 0.0
                        crpix = afwGeom.PointD(1000, 1000)
                        crval = afwCoord.Coord(afwGeom.Point2D(crval1, crval2))
                        wcsref = afwImage.makeWcs(crval,crpix,cd11,cd12,cd21,cd22)
                
                        #also test that the weight field name is correctly observed
                        schema = afwTable.ExposureTable.makeMinimalSchema()
                        schema.addField("customweightname", type="D", doc="Coadd weight")
                        mycatalog = afwTable.ExposureCatalog(schema)
                
                        # Each of the 9 has its peculiar Psf, Wcs, weight, and bounding box.
                        for i in range(1,10,1):
                            record = mycatalog.getTable().makeRecord()
                            psf = measAlg.DoubleGaussianPsf(100, 100, i, 1.00, 0.0);
                            record.setPsf(psf)
                            crpix = afwGeom.PointD(i*1000.0, i*1000.0)
                            wcs = afwImage.makeWcs(crval,crpix,cd11,cd12,cd21,cd22)
                
                            record.setWcs(wcs)
                            record['customweightname'] = 1.0 * (i+1)
                            record['id'] = i
                            bbox = afwGeom.Box2I(afwGeom.Point2I(0,0), afwGeom.Extent2I(i*1000, i*1000))
                            record.setBBox(bbox)
                            mycatalog.append(record)
                
                        #create the coaddpsf
                        mypsf = measAlg.CoaddPsf(mycatalog, wcsref, 'customweightname')
                
                        # check to be sure that we got the right number of components, in the right order
                        self.assertTrue(mypsf.getComponentCount() == 9)
                        for i in range(1,10,1):
                            wcs = mypsf.getWcs(i-1)
                            psf = mypsf.getPsf(i-1)
                            bbox = mypsf.getBBox(i-1)
                            weight = mypsf.getWeight(i-1)
                            id = mypsf.getId(i-1)
                            self.assertTrue(i == id)
                            self.assertTrue(weight == 1.0*(i+1))
                            self.assertTrue(bbox.getBeginX() == 0)
                            self.assertTrue(bbox.getBeginY() == 0)
                            self.assertTrue(bbox.getEndX() == 1000* i)
                            self.assertTrue(bbox.getEndY() == 1000* i)
                            self.assertTrue(wcs.getPixelOrigin().getX() == (1000.0 * i))
                            self.assertTrue(wcs.getPixelOrigin().getY() == (1000.0 * i))
                            m0,xbar,ybar,mxx,myy,x0,y0 = getPsfMoments(psf, afwGeom.Point2D(0,0))
                            self.assertTrue(testRelDiff(i*i,mxx,.01))
                            self.assertTrue(testRelDiff(i*i,myy,.01))
                
                    def testFractionalPixel(self):
                        """Check that we can create a CoaddPsf with 10 elements"""
                        print "FractionalPixelTest"
                        # this is the coadd Wcs we want
                        cd11 = 5.55555555e-05
                        cd12 = 0.0
                        cd21 = 0.0
                        cd22 = 5.55555555e-05
                        crval1 = 0.0
                        crval2 = 0.0
                        crpix = afwGeom.PointD(1000, 1000)
                        crval = afwCoord.Coord(afwGeom.Point2D(crval1, crval2))
                        wcsref = afwImage.makeWcs(crval,crpix,cd11,cd12,cd21,cd22)
                
                        cd21 = 5.55555555e-05
                        cd12 = 5.55555555e-05
                        cd11 = 0.0
                        cd22 = 0.0
                
                        wcs = afwImage.makeWcs(crval, crpix, cd11, cd12, cd21,cd22)
                        schema = afwTable.ExposureTable.makeMinimalSchema()
                        schema.addField("weight", type="D", doc="Coadd weight")
                        mycatalog = afwTable.ExposureCatalog(schema)
                        # make a single record with an oblong Psf
                        record = mycatalog.getTable().makeRecord()
                        psf = makeBiaxialGaussianPsf(100,100,6.0,6.0,0.0)
                        record.setPsf(psf)
                        record.setWcs(wcs)
                        record['weight'] = 1.0
                        record['id'] = 1
                        bbox = afwGeom.Box2I(afwGeom.Point2I(0,0), afwGeom.Extent2I(2000, 2000))
                        record.setBBox(bbox)
                        mycatalog.append(record)
                        mypsf = measAlg.CoaddPsf(mycatalog, wcsref)
                        img = psf.computeImage(afwGeom.PointD(0.25,0.75))
                        img = psf.computeImage(afwGeom.PointD(0.25,0.75))
                        img = psf.computeImage(afwGeom.PointD(1000,1000))
                        m0,xbar,ybar,mxx,myy,x0,y0 = getPsfMoments(psf, afwGeom.Point2D(0.25,0.75))
                        cm0,cxbar,cybar,cmxx,cmyy,cx0,cy0 = getPsfMoments(mypsf,afwGeom.Point2D(0.25,0.75))
                        self.assertTrue(testRelDiff(x0+xbar,cx0+cxbar,.01))
                        self.assertTrue(testRelDiff(y0+ybar,cy0+cybar,.01))
                
                #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                
                    def testRotatePsf(self):
                        """Check that we can create a CoaddPsf with 10 elements"""
                        # this is the coadd Wcs we want
                        print "RotatePsfTest"
                        cd11 = 5.55555555e-05
                        cd12 = 0.0
                        cd21 = 0.0
                        cd22 = 5.55555555e-05
                        crval1 = 0.0
                        crval2 = 0.0
                        crpix = afwGeom.PointD(1000, 1000)
                        crval = afwCoord.Coord(afwGeom.Point2D(crval1, crval2))
                        wcsref = afwImage.makeWcs(crval,crpix,cd11,cd12,cd21,cd22)
                
                        cd21 = 5.55555555e-05
                        cd12 = 5.55555555e-05
                        cd11 = 0.0
                        cd22 = 0.0
                        wcs = afwImage.makeWcs(crval, crpix, cd11, cd12, cd21,cd22)
                
                        schema = afwTable.ExposureTable.makeMinimalSchema()
                        schema.addField("weight", type="D", doc="Coadd weight")
                        mycatalog = afwTable.ExposureCatalog(schema)
                        # make a single record with an oblong Psf
                        record = mycatalog.getTable().makeRecord()
                        psf = makeBiaxialGaussianPsf(100,100,1.0,6.0,0.0)
                        record.setPsf(psf)
                        record.setWcs(wcs)
                        record['weight'] = 1.0
                        record['id'] = 1
                        bbox = afwGeom.Box2I(afwGeom.Point2I(0,0), afwGeom.Extent2I(2000, 2000))
                        record.setBBox(bbox)
                        mycatalog.append(record)
                        mypsf = measAlg.CoaddPsf(mycatalog, wcsref)
                        m0,xbar,ybar,mxx,myy,x0,y0 = getPsfMoments(psf,afwGeom.Point2D(0.25,0.75))
                        cm0,cxbar,cybar,cmxx,cmyy,cx0,cy0 = getPsfMoments(mypsf,afwGeom.Point2D(0.25,0.75))
                        self.assertTrue(testRelDiff(mxx, cmyy, .01))
                        self.assertTrue(testRelDiff(myy, cmxx, .01))
                
                    def testDefaultSize(self):
                        """Test of both default size and specified size"""
                        print "DefaultSizeTest"
                        sigma0 = 5;
                        # set the peak of the outer guassian to 0 so this is really a single gaussian.
                
                        psf = measAlg.DoubleGaussianPsf(60, 60, 1.5*sigma0, 1, 0.0)
                
                        if False and display:
                            im = psf.computeImage(afwGeom.PointD(xwid/2, ywid/2))
                            ds9.mtv(im, title="N(%g) psf" % sigma0, frame=0)
                
                        # this is the coadd Wcs we want
                        cd11 = 5.55555555e-05
                        cd12 = 0.0
                        cd21 = 0.0
                        cd22 = 5.55555555e-05
                        crval1 = 0.0
                        crval2 = 0.0
                        crpix = afwGeom.PointD(1000, 1000)
                        crval = afwCoord.Coord(afwGeom.Point2D(crval1, crval2))
                        wcsref = afwImage.makeWcs(crval,crpix,cd11,cd12,cd21,cd22)
                
                        # Now make the catalog
                        schema = afwTable.ExposureTable.makeMinimalSchema()
                        schema.addField("weight", type="D", doc="Coadd weight")
                        mycatalog = afwTable.ExposureCatalog(schema)
                        record = mycatalog.getTable().makeRecord()
                        psf = measAlg.DoubleGaussianPsf(100, 100, 10.0, 1.00, 1.0);
                        record.setPsf(psf)
                        wcs = afwImage.makeWcs(crval,crpix,cd11,cd12,cd21,cd22)
                        record.setWcs(wcs)
                        record['weight'] = 1.0
                        record['id'] = 1
                        bbox = afwGeom.Box2I(afwGeom.Point2I(0,0), afwGeom.Extent2I(2000, 2000))
                        record.setBBox(bbox)
                        mycatalog.append(record)
                
                        mypsf = measAlg.CoaddPsf(mycatalog, wcsref) #, 'weight')
                
                        m1coadd,m2coadd = getCoaddSecondMoments(mypsf, afwGeom.Point2D(0,0))
                        m1,m2 = getPsfSecondMoments(mypsf, afwGeom.Point2D(1000,1000))
                        self.assertTrue(testRelDiff(m1,m1coadd,.01))
                        self.assertTrue(testRelDiff(m2,m2coadd,.01))
                
                    def testSimpleGaussian(self):
                        """Check that we can measure a single Gaussian's attributes"""
                        print "SimpleGaussianTest"
                        sigma0 = 5;
                        # set the peak of the outer guassian to 0 so this is really a single gaussian.
                
                        psf = measAlg.DoubleGaussianPsf(60, 60, 1.5*sigma0, 1, 0.0)
                
                        if False and display:
                            im = psf.computeImage(afwGeom.PointD(xwid/2, ywid/2))
                            ds9.mtv(im, title="N(%g) psf" % sigma0, frame=0)
                
                        # this is the coadd Wcs we want
                        cd11 = 5.55555555e-05
                        cd12 = 0.0
                        cd21 = 0.0
                        cd22 = 5.55555555e-05
                        crval1 = 0.0
                        crval2 = 0.0
                        crpix = afwGeom.PointD(1000, 1000)
                        crval = afwCoord.Coord(afwGeom.Point2D(crval1, crval2))
                        wcsref = afwImage.makeWcs(crval,crpix,cd11,cd12,cd21,cd22)
                
                
                        schema = afwTable.ExposureTable.makeMinimalSchema()
                        schema.addField("weight", type="D", doc="Coadd weight")
                        mycatalog = afwTable.ExposureCatalog(schema)
                
                        sigma = [5,6,7,8]  # 5 pixels is the same as a sigma of 1 arcsec.
                
                        # lay down a simple pattern of four ccds, set in a pattern of 1000 pixels around the center
                        offsets = [(1999,1999), (1999,0), (0, 0), (0,1999)]
                
                #       Imagine a ccd in each of positions +-1000 pixels from the center
                        for i in range(4):
                            record = mycatalog.getTable().makeRecord()
                            psf = measAlg.DoubleGaussianPsf(100, 100, sigma[i], 1.00, 1.0);
                            record.setPsf(psf)
                            crpix = afwGeom.PointD(offsets[i][0], offsets[i][1])
                            wcs = afwImage.makeWcs(crval,crpix,cd11,cd12,cd21,cd22)
                
                            # print out the coorinates of this supposed 2000x2000 ccd in wcsref coordinates
                            beginCoord = wcs.pixelToSky(0,0)
                            endCoord = wcs.pixelToSky(2000, 2000)
                            beginPix = wcsref.skyToPixel(beginCoord)
                            endPix = wcsref.skyToPixel(endCoord)
                            record.setWcs(wcs)
                            record['weight'] = 1.0
                            record['id'] = i
                            bbox = afwGeom.Box2I(afwGeom.Point2I(0,0), afwGeom.Extent2I(2000, 2000))
                            record.setBBox(bbox)
                            mycatalog.append(record)
                            #img = psf.computeImage(afwGeom.Point2D(1000,1000), afwGeom.Extent2I(100,100), False, False)
                            #img.writeFits("img%d.fits"%i)
                
                        mypsf = measAlg.CoaddPsf(mycatalog, wcsref) #, 'weight')
                        m1coadd,m2coadd = getCoaddSecondMoments(mypsf, afwGeom.Point2D(1000,1000))
                
                        m1,m2 = getPsfSecondMoments(mypsf, afwGeom.Point2D(1000,1000))
                        self.assertTrue(testRelDiff(m1,m1coadd,.01))
                
                        m1,m2 = getPsfSecondMoments(mypsf, afwGeom.Point2D(1000,1001))
                        m1coadd,m2coadd = getCoaddSecondMoments(mypsf, afwGeom.Point2D(1000,1001))
                        self.assertTrue(testRelDiff(m1,m1coadd,.01))
                
                
                #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                #   This test checks to be sure that the weights are being applied correctly in doComputeImage
                #   Since the 2nd moments are linear in the function value, we can simply weight the moments
                #   and be sure that the resulting moments are correct
                
                    def testWeight(self):
                        """Check that we can measure a single Gaussian's attributes"""
                        print "WeightTest"
                        sigma0 = 5;
                        # set the peak of the outer guassian to 0 so this is really a single gaussian.
                
                        psf = measAlg.DoubleGaussianPsf(60, 60, 1.5*sigma0, 1, 0.0)
                
                        if False and display:
                            im = psf.computeImage(afwGeom.PointD(xwid/2, ywid/2))
                            ds9.mtv(im, title="N(%g) psf" % sigma0, frame=0)
                
                        # this is the coadd Wcs we want
                        cd11 = 5.55555555e-05
                        cd12 = 0.0
                        cd21 = 0.0
                        cd22 = 5.55555555e-05
                        crval1 = 0.0
                        crval2 = 0.0
                        crpix = afwGeom.PointD(1000, 1000)
                        crval = afwCoord.Coord(afwGeom.Point2D(crval1, crval2))
                        wcsref = afwImage.makeWcs(crval,crpix,cd11,cd12,cd21,cd22)
                
                
                        schema = afwTable.ExposureTable.makeMinimalSchema()
                        schema.addField("weight", type="D", doc="Coadd weight")
                        mycatalog = afwTable.ExposureCatalog(schema)
                
                        sigma = [5,6,7,8]  # 5 pixels is the same as a sigma of 1 arcsec.
                
                        # lay down a simple pattern of four ccds, set in a pattern of 1000 pixels around the center
                        offsets = [(1999,1999), (1999,0), (0, 0), (0,1999)]
                
                #       Imagine a ccd in each of positions +-1000 pixels from the center
                        for i in range(4):
                            record = mycatalog.getTable().makeRecord()
                            psf = measAlg.DoubleGaussianPsf(100, 100, sigma[i], 1.00, 0.0);
                            record.setPsf(psf)
                            crpix = afwGeom.PointD(offsets[i][0], offsets[i][1])
                            wcs = afwImage.makeWcs(crval,crpix,cd11,cd12,cd21,cd22)
                
                            # print out the coorinates of this supposed 2000x2000 ccd in wcsref coordinates
                            record.setWcs(wcs)
                            record['weight'] = 1.0 * (i+1)
                            record['id'] = i
                            bbox = afwGeom.Box2I(afwGeom.Point2I(0,0), afwGeom.Extent2I(2000, 2000))
                            record.setBBox(bbox)
                            mycatalog.append(record)
                
                        mypsf = measAlg.CoaddPsf(mycatalog, wcsref) #, 'weight')
                
                        m1,m2 = getPsfSecondMoments(mypsf, afwGeom.Point2D(1000,1000))
                        m1coadd,m2coadd = getCoaddSecondMoments(mypsf, afwGeom.Point2D(1000,1000))
                        self.assertTrue(testRelDiff(m1,m1coadd,.01))
                
                        m1,m2 = getPsfSecondMoments(mypsf, afwGeom.Point2D(1000,1001))
                        m1coadd,m2coadd = getCoaddSecondMoments(mypsf, afwGeom.Point2D(1000,1001))
                        self.assertTrue(testRelDiff(m1,m1coadd,.01))
                
                        m1,m2 = getCoaddSecondMoments(mypsf, afwGeom.Point2D(1001,1000))
                        m1coadd,m2coadd = getCoaddSecondMoments(mypsf, afwGeom.Point2D(1001,1000))
                        self.assertTrue(testRelDiff(m1,m1coadd,.01))
                
                    def testTicket2872(self):
                        """Test that CoaddPsf.getAveragePosition() is always a position at which
                        we can call computeImage().
                        """
                        schema = afwTable.ExposureTable.makeMinimalSchema()
                        weightKey = schema.addField("weight", type=float, doc="photometric weight")
                        catalog = afwTable.ExposureCatalog(schema)
                        cdelt = (0.2*afwGeom.arcseconds).asDegrees()
                        wcs = afwImage.makeWcs(
                            afwCoord.IcrsCoord(afwGeom.Point2D(45.0, 45.0), afwGeom.degrees),
                            afwGeom.Point2D(50, 50),
                            cdelt, 0.0, 0.0, cdelt
                            )
                        kernel = measAlg.DoubleGaussianPsf(7,7,2.0).getKernel()
                        psf1 = measAlg.KernelPsf(kernel, afwGeom.Point2D(0, 50))
                        psf2 = measAlg.KernelPsf(kernel, afwGeom.Point2D(100, 50))
                        record1 = catalog.addNew()
                        record1.setPsf(psf1)
                        record1.setWcs(wcs)
                        record1.setD(weightKey, 1.0);
                        record1.setBBox(afwGeom.Box2I(afwGeom.Point2I(-40, 0), afwGeom.Point2I(40, 100)))
                        record2 = catalog.addNew()
                        record2.setPsf(psf2)
                        record2.setWcs(wcs)
                        record2.setD(weightKey, 1.0);
                        record2.setBBox(afwGeom.Box2I(afwGeom.Point2I(60, 0), afwGeom.Point2I(140, 100)))
                        coaddPsf = measAlg.CoaddPsf(catalog, wcs)
                        naiveAvgPos = afwGeom.Point2D(50, 50)
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
494  <a href="#7765bdbd">7765bdbd</a> -         utilsTests.assertRaisesLsstCpp(</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
485  <a href="#8857e07a">8857e07a</a> +         self.assertRaises(</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
495  <a href="#7765bdbd">7765bdbd</a> -             self, pexExceptions.InvalidParameterException, coaddPsf.computeKernelImage,</div>
              ?            ------                                ^^^^^^ ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
486  <a href="#8857e07a">8857e07a</a> +             pexExceptions.InvalidParameterError, coaddPsf.computeKernelImage,</div>
              ?                                            ^^ ^
                            naiveAvgPos
                            )
                        # important test is that this doesn't throw:
                        coaddPsf.computeKernelImage()
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
501  <a href="#3507c21a">3507c21a</a> -     def testValidPolygonPsf(self):</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
502  <a href="#3507c21a">3507c21a</a> -         """Test that we can use the validPolygon on exposures in the coadd psf"""</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
503  <a href="#3507c21a">3507c21a</a> -         print "ValidPolygonTest"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
504  <a href="#3507c21a">3507c21a</a> -         # this is the coadd Wcs we want</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
505  <a href="#3507c21a">3507c21a</a> -         cd11 = 5.55555555e-05</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
506  <a href="#3507c21a">3507c21a</a> -         cd12 = 0.0</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
507  <a href="#3507c21a">3507c21a</a> -         cd21 = 0.0</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
508  <a href="#3507c21a">3507c21a</a> -         cd22 = 5.55555555e-05</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
509  <a href="#3507c21a">3507c21a</a> -         crval1 = 0.0</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
510  <a href="#3507c21a">3507c21a</a> -         crval2 = 0.0</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
511  <a href="#3507c21a">3507c21a</a> -         crpix = afwGeom.PointD(1000, 1000)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
512  <a href="#3507c21a">3507c21a</a> -         crval = afwCoord.Coord(afwGeom.Point2D(crval1, crval2))</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
513  <a href="#3507c21a">3507c21a</a> -         wcsref = afwImage.makeWcs(crval,crpix,cd11,cd12,cd21,cd22)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
514  <a href="#3507c21a">3507c21a</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
515  <a href="#3507c21a">3507c21a</a> -         schema = afwTable.ExposureTable.makeMinimalSchema()</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
516  <a href="#3507c21a">3507c21a</a> -         schema.addField("weight", type="D", doc="Coadd weight")</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
517  <a href="#3507c21a">3507c21a</a> -         mycatalog = afwTable.ExposureCatalog(schema)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
518  <a href="#3507c21a">3507c21a</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
519  <a href="#3507c21a">3507c21a</a> -         # Each of the 9 has its peculiar Psf, Wcs, weight, bounding box, and valid region.</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
520  <a href="#3507c21a">3507c21a</a> -         for i in range(1,10,1):</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
521  <a href="#3507c21a">3507c21a</a> -             record = mycatalog.getTable().makeRecord()</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
522  <a href="#3507c21a">3507c21a</a> -             psf = measAlg.DoubleGaussianPsf(100, 100, i, 1.00, 0.0);</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
523  <a href="#3507c21a">3507c21a</a> -             record.setPsf(psf)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
524  <a href="#3507c21a">3507c21a</a> -             crpix = afwGeom.PointD(1000-10.0*i, 1000.0-10.0*i)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
525  <a href="#3507c21a">3507c21a</a> -             wcs = afwImage.makeWcs(crval,crpix,cd11,cd12,cd21,cd22)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
526  <a href="#3507c21a">3507c21a</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
527  <a href="#3507c21a">3507c21a</a> -             record.setWcs(wcs)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
528  <a href="#3507c21a">3507c21a</a> -             record['weight'] = 1.0 * (i+1)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
529  <a href="#3507c21a">3507c21a</a> -             record['id'] = i</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
530  <a href="#3507c21a">3507c21a</a> -             bbox = afwGeom.Box2I(afwGeom.Point2I(0,0), afwGeom.Extent2I(1000, 1000))</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
531  <a href="#3507c21a">3507c21a</a> -             record.setBBox(bbox)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
532  <a href="#3507c21a">3507c21a</a> -             validPolygon_bbox = afwGeom.Box2D(afwGeom.Point2D(0,0), afwGeom.Extent2D(i*100, i*100))</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
533  <a href="#3507c21a">3507c21a</a> -             validPolygon = Polygon(validPolygon_bbox)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
534  <a href="#3507c21a">3507c21a</a> -             record.setValidPolygon(validPolygon)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
535  <a href="#3507c21a">3507c21a</a> -             mycatalog.append(record)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
536  <a href="#3507c21a">3507c21a</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
537  <a href="#3507c21a">3507c21a</a> -         # Create the coaddpsf and check at three different points to ensure that the validPolygon is working</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
538  <a href="#3507c21a">3507c21a</a> -         mypsf = measAlg.CoaddPsf(mycatalog, wcsref, 'weight')</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
539  <a href="#3507c21a">3507c21a</a> -         m1coadd,m2coadd = getCoaddSecondMoments(mypsf, afwGeom.Point2D(50,50),True)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
540  <a href="#3507c21a">3507c21a</a> -         m1,m2 = getPsfSecondMoments(mypsf, afwGeom.Point2D(50,50))</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
541  <a href="#3507c21a">3507c21a</a> -         self.assertTrue(testRelDiff(m1,m1coadd,.01))</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
542  <a href="#3507c21a">3507c21a</a> -         self.assertTrue(testRelDiff(m2,m2coadd,.01))</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
543  <a href="#3507c21a">3507c21a</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
544  <a href="#3507c21a">3507c21a</a> -         m1coadd,m2coadd = getCoaddSecondMoments(mypsf, afwGeom.Point2D(500,500),True)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
545  <a href="#3507c21a">3507c21a</a> -         m1,m2 = getPsfSecondMoments(mypsf, afwGeom.Point2D(500,500))</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
546  <a href="#3507c21a">3507c21a</a> -         self.assertTrue(testRelDiff(m1,m1coadd,.01))</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
547  <a href="#3507c21a">3507c21a</a> -         self.assertTrue(testRelDiff(m2,m2coadd,.01))</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
548  <a href="#3507c21a">3507c21a</a> -         </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
549  <a href="#3507c21a">3507c21a</a> -         m1coadd,m2coadd = getCoaddSecondMoments(mypsf, afwGeom.Point2D(850,850),True)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
550  <a href="#3507c21a">3507c21a</a> -         m1,m2 = getPsfSecondMoments(mypsf, afwGeom.Point2D(850,850))</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
551  <a href="#3507c21a">3507c21a</a> -         self.assertTrue(testRelDiff(m1,m1coadd,.01))</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
552  <a href="#3507c21a">3507c21a</a> -         self.assertTrue(testRelDiff(m2,m2coadd,.01))</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
553  <a href="#3507c21a">3507c21a</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
554  <a href="#3507c21a">3507c21a</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
555  <a href="#3507c21a">3507c21a</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
556  <a href="#3507c21a">3507c21a</a> - </div>
                #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                
                
                def suite():
                    """Returns a suite containing all the test cases in this module."""
                    utilsTests.init()
                
                    suites = []
                    suites += unittest.makeSuite(CoaddPsfTest)
                    return unittest.TestSuite(suites)
                
                def run(exit = False):
                    """Run the utilsTests"""
                    utilsTests.run(suite(), exit)
                
                if __name__ == "__main__":
                    run(True)
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="7392b21b"/></a>7392b21b</h3>

<pre>
commit 7392b21bfd58cdd645121399eefc9fe6a9c4d87d
Author: Perry Gee <pgee@physics.ucdavis.edu>
Date:   Thu Jan 24 22:36:12 2013 -0800

    Added some simple level 0 and 1 tests for CoaddPsf
    Modifications to CoaddPsf class to enable unit tests
</pre>
<h3><a name="7765bdbd"/></a>7765bdbd</h3>

<pre>
commit 7765bdbde2bc226ca4fdfa217bb779fb4048b3f8
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Thu May 16 13:38:32 2013 -0400

    Unit test for #2872: ensure CoaddPsf.getAveragePosition() is always valid
</pre>
<h3><a name="3507c21a"/></a>3507c21a</h3>

<pre>
commit 3507c21affa8bb07194496b5b2e781af60c3e404
Author: Bob Armstrong <rearmstr@gmail.com>
Date:   Mon Sep 15 15:06:22 2014 -0400

    CoaddPsf: Ensure that coaddPsf only includes regions that are valid.
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="7392b21b"/></a>7392b21b</h3>

<pre>
commit 7392b21bfd58cdd645121399eefc9fe6a9c4d87d
Author: Perry Gee <pgee@physics.ucdavis.edu>
Date:   Thu Jan 24 22:36:12 2013 -0800

    Added some simple level 0 and 1 tests for CoaddPsf
    Modifications to CoaddPsf class to enable unit tests
</pre>
<h3><a name="45434db4"/></a>45434db4</h3>

<pre>
commit 45434db4c7c4788339d7444a3e8e8f2e97c3f8cb
Author: Perry Gee <pgee@physics.ucdavis.edu>
Date:   Fri Feb 8 13:52:40 2013 -0800

    Responses to jbosch review comments.
    Did not change the getter style
    Changed the unit test name of getPsfAttributes
    Other changes made as requested in ticket 2316.
</pre>
<h3><a name="6f4cb65e"/></a>6f4cb65e</h3>

<pre>
commit 6f4cb65efac63f0dea888246c91ae601897e800c
Author: Russell Owen <rowen@uw.edu>
Date:   Tue Sep 9 13:28:19 2014 -0700

    Specify image origin in a few cases where it was missing.
</pre>
<h3><a name="8857e07a"/></a>8857e07a</h3>

<pre>
commit 8857e07a6268e5af38162e6186e9338018b07be8
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Thu Jul 17 16:53:01 2014 -0400

    Adapt to changes in exception Python wrappers (DM-827)
</pre>
</div>


[Return to list](#homelist)
# <a name="src/Interp.cc"/></a>src/Interp.cc
### Diff:

<pre>
                // -*- LSST-C++ -*-
                
                /* 
                 * LSST Data Management System
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
5    <a href="#c5720a8e">c5720a8e</a> -  * Copyright 2008, 2009, 2010 LSST Corporation.</div>
              ?                  ^^^^^^^^   ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
5    <a href="#7ad849f2">7ad849f2</a> +  * Copyright 2008-2015 LSST Corporation.</div>
              ?                  ^   ^
                 * 
                 * This product includes software developed by the
                 * LSST Project (http://www.lsst.org/).
                 *
                 * This program is free software: you can redistribute it and/or modify
                 * it under the terms of the GNU General Public License as published by
                 * the Free Software Foundation, either version 3 of the License, or
                 * (at your option) any later version.
                 * 
                 * This program is distributed in the hope that it will be useful,
                 * but WITHOUT ANY WARRANTY; without even the implied warranty of
                 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                 * GNU General Public License for more details.
                 * 
                 * You should have received a copy of the LSST License Statement and 
                 * the GNU General Public License along with this program.  If not, 
                 * see <http://www.lsstcorp.org/LegalNotices/>.
                 */
                 
                /**
                 * @file
                 *
                 * @brief Interpolate over CCD defects
                 *
                 * @ingroup detection
                 */
                #include <stdexcept>
                #include <algorithm>
                #include <cassert>
                #include <string>
                #include <typeinfo>
                #include <limits>
                #include "boost/format.hpp"
                
                #include "lsst/afw/geom.h"
                #include "lsst/pex/logging/Trace.h"
                #include "lsst/pex/exceptions.h"
                #include "lsst/afw/image/MaskedImage.h"
                #include "lsst/meas/algorithms/Interp.h"
                
                namespace lsst {
                namespace meas {
                namespace algorithms {
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
49   <a href="#553f6be7">553f6be7</a> -     </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
49   <a href="#7ad849f2">7ad849f2</a> + </div>
                namespace image = lsst::afw::image;
                namespace geom = lsst::afw::geom;
                
                typedef std::vector<Defect::Ptr>::const_iterator DefectCIter;
                
                /************************************************************************************************************/
                /*
                 * Classify an vector of Defect::Ptr for the given row, returning a vector of 1-D
                 * Defects (i.e. y0 == y1).  In general we can merge in saturated pixels at
                 * this step, although we don't currently do so.
                 *
                 * See comment above do_defects for a description of how to interpret DefectType
                 */
                static std::vector<Defect::Ptr>
                classify_defects(std::vector<Defect::Ptr> const & badList, // list of bad things
                                 int const y,           // the row to process
                                 int const ncol,        // number of columns in image
                                 int = 0                // number of rows in image
                                ) {
                
                    std::vector<Defect::Ptr> badList1D;
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
71   <a href="#4d375e47">4d375e47</a> -     </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
71   <a href="#7ad849f2">7ad849f2</a> + </div>
                    for (DefectCIter begin = badList.begin(), end = badList.end(), bri = begin; bri != end; ++bri) {
                        Defect::Ptr defect = *bri;
                
                        if (y < defect->getY0() || y > defect->getY1() || ncol < defect->getX0()) {
                            continue;
                        }
                
                        int const x0 = defect->getX0();
                        int x1 = defect->getX1();
                        //
                        // Look for other defects that touch this one, and push them onto badList1d
                        //
                        for (++bri; bri != end; ++bri) {
                            defect = *bri;
                
                            if (y < defect->getY0() || y > defect->getY1()) { // this defect doesn't concern this row
                                continue;
                            }
                            if (x1 < defect->getX0() - 1) { // no further defects can touch this one
                                --bri;
                                break;
                            }
                            if (defect->getX1() > x1) {
                                x1 = defect->getX1();
                            }
                        }
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
98   <a href="#4d375e47">4d375e47</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
98   <a href="#7ad849f2">7ad849f2</a> + </div>
                        int const nbad = x1 - x0 + 1;
                        assert(nbad >= 1);
                
                        defect = Defect::Ptr(
                            new Defect(
                                geom::BoxI(
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
105  <a href="#cb64b3f6">cb64b3f6</a> -                     geom::Point2I(x0, y), </div>
              ?                                          -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
105  <a href="#7ad849f2">7ad849f2</a> +                     geom::Point2I(x0, y),</div>
                                    geom::Extent2I(nbad, 1)
                                )
                            )
                        );
                        badList1D.push_back(defect);
                
                        if (bri == end) {
                            break;
                        }
                    }
                    //
                    // Now process our new list
                    //
                    for (DefectCIter begin = badList1D.begin(), end = badList1D.end(), bri = begin; bri != end; ++bri) {
                        Defect::Ptr defect = *bri;
                
                        int const nbad = defect->getX1() - defect->getX0() + 1;
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
123  <a href="#4d375e47">4d375e47</a> -         assert(nbad >= 1);        </div>
              ?                           --------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
123  <a href="#7ad849f2">7ad849f2</a> +         assert(nbad >= 1);</div>
                
                        if (defect->getX0() == 0) {
                            if (nbad >= Defect::WIDE_DEFECT) {
                                defect->classify(Defect::WIDE_LEFT, 03);
                            } else {
                                defect->classify(Defect::LEFT, 03 << nbad);
                            }
                        } else if (defect->getX0() == 1) {       /* only second column is usable */
                            if (nbad >= Defect::WIDE_DEFECT) {
                                defect->classify(Defect::WIDE_NEAR_LEFT, (01 << 2) | 03);
                            } else {
                                defect->classify(Defect::NEAR_LEFT, (01 << (nbad + 2)) | 03);
                            }
                        } else if (defect->getX1() == ncol - 2) { /* use only penultimate column */
                            if (nbad >= Defect::WIDE_DEFECT) {
                                defect->classify(Defect::WIDE_NEAR_RIGHT, (03 << 2) | 02);
                            } else {
                                defect->classify(Defect::NEAR_RIGHT, (03 << (nbad + 2)) | 02);
                            }
                        } else if (defect->getX1() == ncol - 1) {
                            if (nbad >= Defect::WIDE_DEFECT) {
                                defect->classify(Defect::WIDE_RIGHT, 03);
                            } else {
                                defect->classify(Defect::RIGHT, 03 << nbad);
                            }
                        } else if (nbad >= Defect::WIDE_DEFECT) {
                            defect->classify(Defect::WIDE, (03 << 2) | 03);
                        } else {
                            defect->classify(Defect::MIDDLE, (03 << (nbad + 2)) | 03);
                        }
                /*
                 * look for bad columns in regions that we'll get `good' values from.
                 *
                 * We know that no two Defects are adjacent.
                 */
                        int nshift = 0;             // number of bits to shift to get to left edge of defect pattern
                        switch (defect->getPos()) {
                          case Defect::WIDE:                // no bits
                          case Defect::WIDE_NEAR_LEFT:      //       are used to encode
                          case Defect::WIDE_NEAR_RIGHT:     //            the bad section of data
                            nshift = 0;
                            break;
                          default:
                            nshift = nbad;
                            break;
                        }
                
                        if (bri != begin) {
                            Defect::Ptr const defect_m = *(bri - 1);
                            assert(defect_m->getX1() < defect->getX0());
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
174  <a href="#ccbcb0c9">ccbcb0c9</a> -             </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
174  <a href="#7ad849f2">7ad849f2</a> + </div>
                            if (defect_m->getX1() == defect->getX0() - 2) {
                                defect->classify(defect->getPos(), (defect->getType() & ~(02 << (nshift + 2))));
                            }
                        }
                
                        if (bri + 1 != end) {
                            Defect::Ptr const defect_p = *(bri + 1);
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
182  <a href="#ccbcb0c9">ccbcb0c9</a> -             </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
182  <a href="#7ad849f2">7ad849f2</a> + </div>
                            if (defect->getX1() == defect_p->getX0() - 2) {
                                Defect::DefectPosition defectPos = defect->getPos();
                                if (defectPos == Defect::LEFT || defectPos == Defect::NEAR_LEFT) {
                                    defect->classify(defect->getPos(), (defect->getType() & ~(02 << nshift)));
                                } else {
                                    defect->classify(defectPos, (defect->getType() & ~01));
                                }
                            }
                        }
                    }
                
                    return badList1D;
                }
                
                /*****************************************************************************/
                /*
                 * Interpolate over the defects in a given line of data. In the comments,
                 * a bad pixel is written as ., a good one as #, and unknown but non-interpolated pixels as ?.
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
201  <a href="#2b4f0943">2b4f0943</a> -  * </div>
              ?   -
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
201  <a href="#7ad849f2">7ad849f2</a> +  *</div>
                 * This may be mapped to an int by replacing # with 1 and . or ? with 0.  So "##..##" would mean, "I have two
                 * adjacent bad pixels with 2 good neighbours to both the left and right", and have a defectType of 110011 or
                 * 063.  This defect is in the middle of the chip, so has DefectPosition MIDDLE.
                 *
                 * The other options are LEFT, NEAR_LEFT, WIDE_NEAR_LEFT, and the corresponding RIGHT positions, and WIDE.
                 * LEFT are defects that touch the left side, and NEAR_LEFT ones that come within a pixel.  WIDE are encoded
                 * omitting the .. so "##..................##" would be 1111 == 017 and WIDE.
                
                 * The LEFT ones are actually a bit tricky as they'd have leading 0s, so they are inverted ("....##" is
                 * written as 110000 not 000011).
                 */
                template<typename ImageT>
                static void do_defects(std::vector<Defect::Ptr> const & badList, // list of bad things
                                       int const y,                              // Row that we should fix
                                       ImageT& data,                             // data to fix
                                       typename ImageT::Pixel min,               // minimum acceptable value
                                       double fallbackValue,                     // Value to fallback to if all else fails
                                       bool useFallbackValueAtEdge,              // use fallbackValue at edge of chip?
                                       int nUseInterp                            // no. of pixels to interpolate towards edge
                                      )
                {
                    typedef typename ImageT::Pixel ImagePixel;
                    ImagePixel out1_2, out1_1, out2_1, out2_2; // == out[badX1-2], ..., out[bad_x2+2]
                    ImagePixel val;                         // unpack a pixel value
                    //
                    // Get pointer to this row of data
                    //
                    int const ncol = data.getWidth();
                    typename ImageT::x_iterator out = data.row_begin(y);
                
                    for (DefectCIter ptr = badList.begin(), end = badList.end(); ptr != end; ++ptr) {
                        Defect::Ptr const defect = *ptr;
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
234  <a href="#4d375e47">4d375e47</a> -        </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
234  <a href="#7ad849f2">7ad849f2</a> + </div>
                        if (y < defect->getY0() || y > defect->getY1()) {
                            continue;
                        }
                
                        int badX0 = defect->getX0();
                        int badX1 = defect->getX1();
                
                        Defect::DefectPosition defectPos = defect->getPos();
                        unsigned int defectType = defect->getType();
                
                        int nbad = badX1 - badX0 + 1;
                
                        if (nbad > nUseInterp && useFallbackValueAtEdge) {
                            switch (defectPos) {
                              case Defect::LEFT:
                              case Defect::WIDE_LEFT:
                                assert(badX0 == 0);
                
                                if (badX1 == ncol - 1) { // also RIGHT --- spans the entire image
                                    for (int i = 0; i != ncol; ++i) {
                                        out[i] = fallbackValue;
                                    }
                                    continue;
                                }
                
                                for (; badX0 <= badX1 - nUseInterp; ++badX0) {
                                    out[badX0] = fallbackValue;
                                }
                
                                if (defectPos == Defect::LEFT) {
                                    defectType >>= nbad;    // we just want the last 2 bits
                                    switch (defectType) {
                                      case 01: defectType = 02; break;
                                      case 03: defectType = 03; break;
                                      default:
                                        throw std::runtime_error(str(boost::format("Impossible value of defectType: 0%o") %
                                                                     defectType));
                                    }
                                }
                                nbad = badX1 - badX0 + 1;
                                defectType = (03 << (nbad + 2)) | defectType;
                                defectPos = (badX0 > 1) ? ((badX1 < ncol - 2) ? Defect::MIDDLE : Defect::NEAR_RIGHT) :
                                    Defect::NEAR_LEFT;
                                break;
                              case Defect::RIGHT:
                              case Defect::WIDE_RIGHT:
                                assert(badX1 == ncol - 1);
                                for (; badX1 >= badX0 + nUseInterp; --badX1) {
                                    out[badX1] = fallbackValue;
                                }
                                nbad = badX1 - badX0 + 1;
                                defectType = (03 << (nbad + 2)) | 03;
                                defectPos = (badX1 < ncol - 2) ? Defect::MIDDLE : Defect::NEAR_RIGHT;
                                break;
                              default:
                                break;
                            }
                        }
                
                        switch (defectPos) {
                          case Defect::LEFT:
                            assert(badX0 >= 0 && badX1 + 2 < ncol);
                
                            out2_1 = out[badX1 + 1];
                            out2_2 = out[badX1 + 2];
                
                            switch (defectType) {
                              case 02:              /* .#?, <noise^2> = 0 */
                                val = 1.0000*out2_1;
                                out[badX1] = (val < min) ? out2_1 : val;
                
                                break;
                              case 06:              /* .##, <noise^2> = 0 */
                                val = 1.4288*out2_1 - 0.4288*out2_2;
                                out[badX1] = (val < min) ? out2_1 : val;
                
                                break;
                              case 014:             /* ..##, <noise^2> = 0 */
                                val = 1.0933*out2_1 - 0.0933*out2_2;
                                out[badX0] = (val < min) ? out2_1 : val;
                
                                val = 1.4288*out2_1 - 0.4288*out2_2;
                                out[badX1] = (val < min) ? out2_1 : val;
                
                                break;
                              case 04:             /* ..#?, <noise^2> = 0 */
                                val = 1.000*out2_1;
                                out[badX0] = (val < min) ? out2_1 : val;
                                out[badX1] = (val < min) ? out2_1 : val;
                
                                break;
                              case 030:             /* ...##, <noise^2> = 0 */
                                val = 0.6968*out2_1 + 0.3032*out2_2;
                                out[badX0] = (val < min) ? out2_1 : val;
                
                                val = 1.0933*out2_1 - 0.0933*out2_2;
                                out[badX1 - 1] = (val < min) ? out2_1 : val;
                
                                val = 1.4288*out2_1 - 0.4288*out2_2;
                                out[badX1] = (val < min) ? out2_1 : val;
                
                                break;
                              case 010:             /* ...#?, <noise^2> = 0 */
                                val = 1.000*out2_1;
                
                                out[badX0] = (val < min) ? out2_1 : val;
                                out[badX1 - 1] = (val < min) ? out2_1 : val;
                                out[badX1] = (val < min) ? out2_1 : val;
                
                                break;
                              case 060:             /* ....##, <noise^2> = 0 */
                                val = 0.5370*out2_1 + 0.4630*out2_2;
                                out[badX0] = (val < min) ? out2_1 : val;
                
                                val = 0.6968*out2_1 + 0.3032*out2_2;
                                out[badX0 + 1] = (val < min) ? out2_1 : val;
                
                                val = 1.0933*out2_1 - 0.0933*out2_2;
                                out[badX1 - 1] = (val < min) ? out2_1 : val;
                
                                val = 1.4288*out2_1 - 0.4288*out2_2;
                                out[badX1] = (val < min) ? out2_1 : val;
                
                                break;
                              case 020:             /* ....#?, <noise^2> = 0 */
                                val = 1.0000*out2_1;
                
                                out[badX0] = (val < min) ? out2_1 : val;
                                out[badX0 + 1] = (val < min) ? out2_1 : val;
                                out[badX1 - 1] = (val < min) ? out2_1 : val;
                                out[badX1] = (val < min) ? out2_1 : val;
                
                                break;
                              case 0140:            /* .....##, <noise^2> = 0 */
                                val = 0.5041*out2_1 + 0.4959*out2_2;
                                out[badX0] = (val < min) ? out2_1 : val;
                
                                val = 0.5370*out2_1 + 0.4630*out2_2;
                                out[badX0 + 1] = (val < min) ? out2_1 : val;
                
                                val = 0.6968*out2_1 + 0.3032*out2_2;
                                out[badX1 - 2] = (val < min) ? out2_1 : val;
                
                                val = 1.0933*out2_1 - 0.0933*out2_2;
                                out[badX1 - 1] = (val < min) ? out2_1 : val;
                
                                val = 1.4288*out2_1 - 0.4288*out2_2;
                                out[badX1] = (val < min) ? out2_1 : val;
                
                                break;
                              case 040:            /* .....#?, <noise^2> = 0 */
                                val = 1.0000*out2_1;
                                out[badX0] = (val < min) ? out2_1 : val;
                                out[badX0 + 1] = (val < min) ? out2_1 : val;
                                out[badX1 - 2] = (val < min) ? out2_1 : val;
                                out[badX1 - 1] = (val < min) ? out2_1 : val;
                                out[badX1] = (val < min) ? out2_1 : val;
                
                                break;
                              case 0300:            /* ......##, <noise^2> = 0 */
                                val = 0.5003*out2_1 + 0.4997*out2_2;
                                out[badX0] = (val < min) ? out2_1 : val;
                
                                val = 0.5041*out2_1 + 0.4959*out2_2;
                                out[badX0 + 1] = (val < min) ? out2_1 : val;
                
                                val = 0.5370*out2_1 + 0.4630*out2_2;
                                out[badX0 + 2] = (val < min) ? out2_1 : val;
                
                                val = 0.6968*out2_1 + 0.3032*out2_2;
                                out[badX1 - 2] = (val < min) ? out2_1 : val;
                
                                val = 1.0933*out2_1 - 0.0933*out2_2;
                                out[badX1 - 1] = (val < min) ? out2_1 : val;
                
                                val = 1.4288*out2_1 - 0.4288*out2_2;
                                out[badX1] = (val < min) ? out2_1 : val;
                
                                break;
                              case 0100:            /* ......#?, <noise^2> = 0 */
                                val = 1.0000*out2_1;
                
                                out[badX0] = (val < min) ? out2_1 : val;
                                out[badX0 + 1] = (val < min) ? out2_1 : val;
                                out[badX0 + 2] = (val < min) ? out2_1 : val;
                                out[badX1 - 2] = (val < min) ? out2_1 : val;
                                out[badX1 - 1] = (val < min) ? out2_1 : val;
                                out[badX1] = (val < min) ? out2_1 : val;
                
                                break;
                              case 0600:            /* .......##, <noise^2> = 0 */
                                val = 0.5000*out2_1 + 0.5000*out2_2;
                                out[badX0] = (val < min) ? out2_1 : val;
                
                                val = 0.5003*out2_1 + 0.4997*out2_2;
                                out[badX0 + 1] = (val < min) ? out2_1 : val;
                
                                val = 0.5041*out2_1 + 0.4959*out2_2;
                                out[badX0 + 2] = (val < min) ? out2_1 : val;
                
                                val = 0.5370*out2_1 + 0.4630*out2_2;
                                out[badX1 - 3] = (val < min) ? out2_1 : val;
                
                                val = 0.6968*out2_1 + 0.3032*out2_2;
                                out[badX1 - 2] = (val < min) ? out2_1 : val;
                
                                val = 1.0933*out2_1 - 0.0933*out2_2;
                                out[badX1 - 1] = (val < min) ? out2_1 : val;
                
                                val = 1.4288*out2_1 - 0.4288*out2_2;
                                out[badX1] = (val < min) ? out2_1 : val;
                
                                break;
                              case 0200:            /* .......#?, <noise^2> = 0 */
                                val = 1.0000*out2_1;
                                out[badX0] = (val < min) ? out2_1 : val;
                                out[badX0 + 1] = (val < min) ? out2_1 : val;
                                out[badX0 + 2] = (val < min) ? out2_1 : val;
                                out[badX1 - 3] = (val < min) ? out2_1 : val;
                                out[badX1 - 2] = (val < min) ? out2_1 : val;
                                out[badX1 - 1] = (val < min) ? out2_1 : val;
                                out[badX1] = (val < min) ? out2_1 : val;
                
                                break;
                              case 01400:           /* ........##, <noise^2> = 0 */
                                val = 0.5000*out2_1 + 0.5000*out2_2;
                                out[badX0] = (val < min) ? out2_1 : val;
                
                                val = 0.5000*out2_1 + 0.5000*out2_2;
                                out[badX0 + 1] = (val < min) ? out2_1 : val;
                
                                val = 0.5003*out2_1 + 0.4997*out2_2;
                                out[badX0 + 2] = (val < min) ? out2_1 : val;
                
                                val = 0.5041*out2_1 + 0.4959*out2_2;
                                out[badX0 + 3] = (val < min) ? out2_1 : val;
                
                                val = 0.5370*out2_1 + 0.4630*out2_2;
                                out[badX1 - 3] = (val < min) ? out2_1 : val;
                
                                val = 0.6968*out2_1 + 0.3032*out2_2;
                                out[badX1 - 2] = (val < min) ? out2_1 : val;
                
                                val = 1.0933*out2_1 - 0.0933*out2_2;
                                out[badX1 - 1] = (val < min) ? out2_1 : val;
                
                                val = 1.4288*out2_1 - 0.4288*out2_2;
                                out[badX1] = (val < min) ? out2_1 : val;
                
                                break;
                              case 0400:           /* ........#?, <noise^2> = 0 */
                                val = 1.0000*out2_1;
                                out[badX0] = (val < min) ? out2_1 : val;
                                out[badX0 + 1] = (val < min) ? out2_1 : val;
                                out[badX0 + 2] = (val < min) ? out2_1 : val;
                                out[badX0 + 3] = (val < min) ? out2_1 : val;
                                out[badX1 - 3] = (val < min) ? out2_1 : val;
                                out[badX1 - 2] = (val < min) ? out2_1 : val;
                                out[badX1 - 1] = (val < min) ? out2_1 : val;
                                out[badX1] = (val < min) ? out2_1 : val;
                
                                break;
                              case 03000:           /* .........##, <noise^2> = 0 */
                                val = 0.5000*out2_1 + 0.5000*out2_2;
                                out[badX0] = (val < min) ? out2_1 : val;
                
                                val = 0.5000*out2_1 + 0.5000*out2_2;
                                out[badX0 + 1] = (val < min) ? out2_1 : val;
                
                                val = 0.5000*out2_1 + 0.5000*out2_2;
                                out[badX0 + 2] = (val < min) ? out2_1 : val;
                
                                val = 0.5003*out2_1 + 0.4997*out2_2;
                                out[badX0 + 3] = (val < min) ? out2_1 : val;
                
                                val = 0.5041*out2_1 + 0.4959*out2_2;
                                out[badX1 - 4] = (val < min) ? out2_1 : val;
                
                                val = 0.5370*out2_1 + 0.4630*out2_2;
                                out[badX1 - 3] = (val < min) ? out2_1 : val;
                
                                val = 0.6968*out2_1 + 0.3032*out2_2;
                                out[badX1 - 2] = (val < min) ? out2_1 : val;
                
                                val = 1.0933*out2_1 - 0.0933*out2_2;
                                out[badX1 - 1] = (val < min) ? out2_1 : val;
                
                                val = 1.4288*out2_1 - 0.4288*out2_2;
                                out[badX1] = (val < min) ? out2_1 : val;
                
                                break;
                              case 01000:           /* .........#?, <noise^2> = 0 */
                                val = 1.0000*out2_1;
                                out[badX0] = (val < min) ? out2_1 : val;
                                out[badX0 + 1] = (val < min) ? out2_1 : val;
                                out[badX0 + 2] = (val < min) ? out2_1 : val;
                                out[badX0 + 3] = (val < min) ? out2_1 : val;
                                out[badX1 - 4] = (val < min) ? out2_1 : val;
                                out[badX1 - 3] = (val < min) ? out2_1 : val;
                                out[badX1 - 2] = (val < min) ? out2_1 : val;
                                out[badX1 - 1] = (val < min) ? out2_1 : val;
                                out[badX1] = (val < min) ? out2_1 : val;
                
                                break;
                              case 06000:           /* ..........##, <noise^2> = 0 */
                                val = 0.5000*out2_1 + 0.5000*out2_2;
                                out[badX0] = (val < min) ? out2_1 : val;
                
                                val = 0.5000*out2_1 + 0.5000*out2_2;
                                out[badX0 + 1] = (val < min) ? out2_1 : val;
                
                                val = 0.5000*out2_1 + 0.5000*out2_2;
                                out[badX0 + 2] = (val < min) ? out2_1 : val;
                
                                val = 0.5000*out2_1 + 0.5000*out2_2;
                                out[badX0 + 3] = (val < min) ? out2_1 : val;
                
                                val = 0.5003*out2_1 + 0.4997*out2_2;
                                out[badX0 + 4] = (val < min) ? out2_1 : val;
                
                                val = 0.5041*out2_1 + 0.4959*out2_2;
                                out[badX1 - 4] = (val < min) ? out2_1 : val;
                
                                val = 0.5370*out2_1 + 0.4630*out2_2;
                                out[badX1 - 3] = (val < min) ? out2_1 : val;
                
                                val = 0.6968*out2_1 + 0.3032*out2_2;
                                out[badX1 - 2] = (val < min) ? out2_1 : val;
                
                                val = 1.0933*out2_1 - 0.0933*out2_2;
                                out[badX1 - 1] = (val < min) ? out2_1 : val;
                
                                val = 1.4288*out2_1 - 0.4288*out2_2;
                                out[badX1] = (val < min) ? out2_1 : val;
                
                                break;
                              case 02000:           /* ..........#?, <noise^2> = 0 */
                                val = 1.0000*out2_1;
                
                                out[badX0] = (val < min) ? out2_1 : val;
                                out[badX0 + 1] = (val < min) ? out2_1 : val;
                                out[badX0 + 2] = (val < min) ? out2_1 : val;
                                out[badX0 + 3] = (val < min) ? out2_1 : val;
                                out[badX0 + 4] = (val < min) ? out2_1 : val;
                                out[badX1 - 4] = (val < min) ? out2_1 : val;
                                out[badX1 - 3] = (val < min) ? out2_1 : val;
                                out[badX1 - 2] = (val < min) ? out2_1 : val;
                                out[badX1 - 1] = (val < min) ? out2_1 : val;
                                out[badX1] = (val < min) ? out2_1 : val;
                
                                break;
                              default:
                                //shFatal("Unsupported defect type: LEFT 0%o", defectType);
                                break;                  /* NOTREACHED */
                            }
                            break;
                          case Defect::WIDE_LEFT:
                            assert(badX0 >= 0);
                            if (badX1 + 2 >= ncol) {    /* left defect extends near
                                                           right edge of data! */
                                if (badX1 == ncol - 2) {        /* one column remains */
                                    val = out[ncol - 1];
                                } else {
                                    val = fallbackValue; /* there is no information */
                                }
                                for (int j = badX0; j <= badX1; j++) {
                                    out[j] = val;
                                }
                                break;
                            }
                            out2_1 = out[badX1 + 1];
                            out2_2 = out[badX1 + 2];
                
                            switch (defectType) {
                              case 02:            /* ?#., <noise^2> = 0 */
                                val = 1.0000*out2_1;
                                val = (val < min) ? out2_1 : val;
                
                                for (int j = badX0; j <= badX1; j++) {
                                    out[j] = val;
                                }
                                break;
                              case 03:            /* ?##, <noise^2> = 0 */
                                val = 0.5000*out2_1 + 0.5000*out2_2;
                                if (val < min) {
                                    val = out2_1;
                                }
                
                                for (int j = badX0; j < badX1 - 5; j++) {
                                    out[j] = val;
                                }
                
                                val = 0.5003*out2_1 + 0.4997*out2_2;
                                out[badX1 - 5] = (val < min) ? out2_1 : val;
                
                                val = 0.5041*out2_1 + 0.4959*out2_2;
                                out[badX1 - 4] = (val < min) ? out2_1 : val;
                
                                val = 0.5370*out2_1 + 0.4630*out2_2;
                                out[badX1 - 3] = (val < min) ? out2_1 : val;
                
                                val = 0.6968*out2_1 + 0.3032*out2_2;
                                out[badX1 - 2] = (val < min) ? out2_1 : val;
                
                                val = 1.0933*out2_1 - 0.0933*out2_2;
                                out[badX1 - 1] = (val < min) ? out2_1 : val;
                
                                val = 1.4288*out2_1 - 0.4288*out2_2;
                                out[badX1] = (val < min) ? out2_1 : val;
                
                                break;
                              default:
                                //shFatal("Unsupported defect type: WIDE_LEFT 0%o",defect[i].type);
                                break;                  /* NOTREACHED */
                            }
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
650  <a href="#efbf89a2">efbf89a2</a> -          </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
650  <a href="#7ad849f2">7ad849f2</a> + </div>
                            break;
                          case Defect::RIGHT:
                            assert(badX0 >= 2 && badX1 < ncol);
                
                            out1_2 = out[badX0 - 2];
                            out1_1 = out[badX0 - 1];
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
657  <a href="#efbf89a2">efbf89a2</a> -          </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
657  <a href="#7ad849f2">7ad849f2</a> + </div>
                            switch (defectType) {
                              case 06:              /* ##., <noise^2> = 0 */
                                val = -0.4288*out1_2 + 1.4288*out1_1;
                                out[badX1] = (val < min) ? out1_1 : val;
                
                                break;
                              case 014:             /* ##.., <noise^2> = 0 */
                                val = -0.4288*out1_2 + 1.4288*out1_1;
                                out[badX0] = (val < min) ? out1_1 : val;
                
                                val = -0.0933*out1_2 + 1.0933*out1_1;
                                out[badX1] = (val < min) ? out1_1 : val;
                
                                break;
                              case 030:             /* ##..., <noise^2> = 0 */
                                val = -0.4288*out1_2 + 1.4288*out1_1;
                                out[badX0] = (val < min) ? out1_1 : val;
                
                                val = -0.0933*out1_2 + 1.0933*out1_1;
                                out[badX1 - 1] = (val < min) ? out1_1 : val;
                
                                val = 0.3032*out1_2 + 0.6968*out1_1;
                                out[badX1] = (val < min) ? out1_1 : val;
                
                                break;
                              case 060:             /* ##...., <noise^2> = 0 */
                                val = -0.4288*out1_2 + 1.4288*out1_1;
                                out[badX0] = (val < min) ? out1_1 : val;
                
                                val = -0.0933*out1_2 + 1.0933*out1_1;
                                out[badX0 + 1] = (val < min) ? out1_1 : val;
                
                                val = 0.3032*out1_2 + 0.6968*out1_1;
                                out[badX1 - 1] = (val < min) ? out1_1 : val;
                
                                val = 0.4630*out1_2 + 0.5370*out1_1;
                                out[badX1] = (val < min) ? out1_1 : val;
                
                                break;
                              case 0140:            /* ##....., <noise^2> = 0 */
                                val = -0.4288*out1_2 + 1.4288*out1_1;
                                out[badX0] = (val < min) ? out1_1 : val;
                
                                val = -0.0933*out1_2 + 1.0933*out1_1;
                                out[badX0 + 1] = (val < min) ? out1_1 : val;
                
                                val = 0.3032*out1_2 + 0.6968*out1_1;
                                out[badX1 - 2] = (val < min) ? out1_1 : val;
                
                                val = 0.4630*out1_2 + 0.5370*out1_1;
                                out[badX1 - 1] = (val < min) ? out1_1 : val;
                
                                val = 0.4959*out1_2 + 0.5041*out1_1;
                                out[badX1] = (val < min) ? out1_1 : val;
                
                                break;
                              case 0300:            /* ##......, <noise^2> = 0 */
                                val = -0.4288*out1_2 + 1.4288*out1_1;
                                out[badX0] = (val < min) ? out1_1 : val;
                
                                val = -0.0933*out1_2 + 1.0933*out1_1;
                                out[badX0 + 1] = (val < min) ? out1_1 : val;
                
                                val = 0.3032*out1_2 + 0.6968*out1_1;
                                out[badX0 + 2] = (val < min) ? out1_1 : val;
                
                                val = 0.4630*out1_2 + 0.5370*out1_1;
                                out[badX1 - 2] = (val < min) ? out1_1 : val;
                
                                val = 0.4959*out1_2 + 0.5041*out1_1;
                                out[badX1 - 1] = (val < min) ? out1_1 : val;
                
                                val = 0.4997*out1_2 + 0.5003*out1_1;
                                out[badX1] = (val < min) ? out1_1 : val;
                
                                break;
                              case 0600:            /* ##......., <noise^2> = 0 */
                                val = -0.4288*out1_2 + 1.4288*out1_1;
                                out[badX0] = (val < min) ? out1_1 : val;
                
                                val = -0.0933*out1_2 + 1.0933*out1_1;
                                out[badX0 + 1] = (val < min) ? out1_1 : val;
                
                                val = 0.3032*out1_2 + 0.6968*out1_1;
                                out[badX0 + 2] = (val < min) ? out1_1 : val;
                
                                val = 0.4630*out1_2 + 0.5370*out1_1;
                                out[badX1 - 3] = (val < min) ? out1_1 : val;
                
                                val = 0.4959*out1_2 + 0.5041*out1_1;
                                out[badX1 - 2] = (val < min) ? out1_1 : val;
                
                                val = 0.4997*out1_2 + 0.5003*out1_1;
                                out[badX1 - 1] = (val < min) ? out1_1 : val;
                
                                val = 0.5000*out1_2 + 0.5000*out1_1;
                                out[badX1] = (val < min) ? out1_1 : val;
                
                                break;
                              case 01400:           /* ##........, <noise^2> = 0 */
                                val = -0.4288*out1_2 + 1.4288*out1_1;
                                out[badX0] = (val < min) ? out1_1 : val;
                
                                val = -0.0933*out1_2 + 1.0933*out1_1;
                                out[badX0 + 1] = (val < min) ? out1_1 : val;
                
                                val = 0.3032*out1_2 + 0.6968*out1_1;
                                out[badX0 + 2] = (val < min) ? out1_1 : val;
                
                                val = 0.4630*out1_2 + 0.5370*out1_1;
                                out[badX0 + 3] = (val < min) ? out1_1 : val;
                
                                val = 0.4959*out1_2 + 0.5041*out1_1;
                                out[badX1 - 3] = (val < min) ? out1_1 : val;
                
                                val = 0.4997*out1_2 + 0.5003*out1_1;
                                out[badX1 - 2] = (val < min) ? out1_1 : val;
                
                                val = 0.5000*out1_2 + 0.5000*out1_1;
                                out[badX1 - 1] = (val < min) ? out1_1 : val;
                
                                val = 0.5000*out1_2 + 0.5000*out1_1;
                                out[badX1] = (val < min) ? out1_1 : val;
                
                                break;
                              case 03000:           /* ##........., <noise^2> = 0 */
                                val = -0.4288*out1_2 + 1.4288*out1_1;
                                out[badX0] = (val < min) ? out1_1 : val;
                
                                val = -0.0933*out1_2 + 1.0933*out1_1;
                                out[badX0 + 1] = (val < min) ? out1_1 : val;
                
                                val = 0.3032*out1_2 + 0.6968*out1_1;
                                out[badX0 + 2] = (val < min) ? out1_1 : val;
                
                                val = 0.4630*out1_2 + 0.5370*out1_1;
                                out[badX0 + 3] = (val < min) ? out1_1 : val;
                
                                val = 0.4959*out1_2 + 0.5041*out1_1;
                                out[badX1 - 4] = (val < min) ? out1_1 : val;
                
                                val = 0.4997*out1_2 + 0.5003*out1_1;
                                out[badX1 - 3] = (val < min) ? out1_1 : val;
                
                                val = 0.5000*out1_2 + 0.5000*out1_1;
                                out[badX1 - 2] = (val < min) ? out1_1 : val;
                
                                val = 0.5000*out1_2 + 0.5000*out1_1;
                                out[badX1 - 1] = (val < min) ? out1_1 : val;
                
                                val = 0.5000*out1_2 + 0.5000*out1_1;
                                out[badX1] = (val < min) ? out1_1 : val;
                
                                break;
                              case 06000:           /* ##.........., <noise^2> = 0 */
                                val = -0.4288*out1_2 + 1.4288*out1_1;
                                out[badX0] = (val < min) ? out1_1 : val;
                
                                val = -0.0933*out1_2 + 1.0933*out1_1;
                                out[badX0 + 1] = (val < min) ? out1_1 : val;
                
                                val = 0.3032*out1_2 + 0.6968*out1_1;
                                out[badX0 + 2] = (val < min) ? out1_1 : val;
                
                                val = 0.4630*out1_2 + 0.5370*out1_1;
                                out[badX0 + 3] = (val < min) ? out1_1 : val;
                
                                val = 0.4959*out1_2 + 0.5041*out1_1;
                                out[badX0 + 4] = (val < min) ? out1_1 : val;
                
                                val = 0.4997*out1_2 + 0.5003*out1_1;
                                out[badX1 - 4] = (val < min) ? out1_1 : val;
                
                                val = 0.5000*out1_2 + 0.5000*out1_1;
                                out[badX1 - 3] = (val < min) ? out1_1 : val;
                
                                val = 0.5000*out1_2 + 0.5000*out1_1;
                                out[badX1 - 2] = (val < min) ? out1_1 : val;
                
                                val = 0.5000*out1_2 + 0.5000*out1_1;
                                out[badX1 - 1] = (val < min) ? out1_1 : val;
                
                                val = 0.5000*out1_2 + 0.5000*out1_1;
                                out[badX1] = (val < min) ? out1_1 : val;
                
                                break;
                              default:
                                //shFatal("Unsupported defect type: RIGHT 0%o",defect[i].type);
                                break;                  /* NOTREACHED */
                            }
                            break;
                          case Defect::WIDE_RIGHT:
                            assert(badX1 < ncol);
                
                            if (badX0 < 2) {            /* right defect extends near
                                                           left edge of data! */
                                if (badX0 == 1) {               /* one column remains */
                                    val = out[0];
                                } else {
                                    val = fallbackValue; /* there is no information */
                                }
                                for (int j = badX0; j <= badX1; j++) {
                                    out[j] = val;
                                }
                                break;
                            }
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
864  <a href="#efbf89a2">efbf89a2</a> -          </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
864  <a href="#7ad849f2">7ad849f2</a> + </div>
                            out1_2 = out[badX0 - 2];
                            out1_1 = out[badX0 - 1];
                
                            switch (defectType) {
                              case 03:                  /* ##?, S/N = infty */
                                val = -0.4288*out1_2 + 1.4288*out1_1;
                                out[badX0] = (val < min) ? out1_1 : val;
                
                                val = -0.0933*out1_2 + 1.0933*out1_1;
                                out[badX0 + 1] = (val < min) ? out1_1 : val;
                
                                val = 0.3032*out1_2 + 0.6968*out1_1;
                                out[badX0 + 2] = (val < min) ? out1_1 : val;
                
                                val = 0.4630*out1_2 + 0.5370*out1_1;
                                out[badX0 + 3] = (val < min) ? out1_1 : val;
                
                                val = 0.4959*out1_2 + 0.5041*out1_1;
                                out[badX0 + 4] = (val < min) ? out1_1 : val;
                
                                val = 0.4997*out1_2 + 0.5003*out1_1;
                                out[badX0 + 5] = (val < min) ? out1_1 : val;
                
                                val = 0.5000*out1_2 + 0.5000*out1_1;
                                val = (val < min) ? out1_1 : val;
                
                                for (int j = badX0 + 6; j <= badX1; j++) {
                                    out[j] = val;
                                }
                                break;
                              default:
                                //shFatal("Unsupported defect type: WIDE_RIGHT 0%o",defect[i].type);
                                break;                  /* NOTREACHED */
                            }
                            break;
                          case Defect::MIDDLE:
                          case Defect::NEAR_LEFT:
                          case Defect::NEAR_RIGHT:
                            if (defectPos == Defect::MIDDLE) {
                                assert(badX0 >= 2 && badX1 + 2 < ncol);
                                out1_2 = out[badX0 - 2];
                                out2_2 = out[badX1 + 2];
                            } else if (defectPos == Defect::NEAR_LEFT) {
                                assert(badX0 >= 1 && badX1 + 2 < ncol);
                                out1_2 = -1;            /* NOTUSED */
                                out2_2 = out[badX1 + 2];
                            } else if (defectPos == Defect::NEAR_RIGHT) {
                                assert(badX0 >= 2 && badX1 + 1 < ncol);
                                out1_2 = out[badX0 - 2];
                                out2_2 = -1;            /* NOTUSED */
                            } else {
                                //shFatal("Unknown defect classification %d (%s:%d)",defectPos, __FILE__,__LINE__);
                                out1_2 = out2_2 = -1;   /* NOTUSED */
                            }
                            out1_1 = out[badX0 - 1];
                            out2_1 = out[badX1 + 1];
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
921  <a href="#efbf89a2">efbf89a2</a> -          </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
921  <a href="#7ad849f2">7ad849f2</a> + </div>
                            switch (defectType) {
                              case 012:             /* #.#., <noise^2> = 0, sigma = 1 */
                                val = 0.5000*out1_1 + 0.5000*out2_1;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1): val;
                
                                break;
                              case 013:         /* #.##, <noise^2> = 0 */
                                val = 0.4875*out1_1 + 0.8959*out2_1 - 0.3834*out2_2;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              case 022:             /* #..#., <noise^2> = 0, sigma = 1 */
                                val = 0.7297*out1_1 + 0.2703*out2_1;
                                out[badX0] = (val < 0) ? 0 : val;
                
                                val = 0.2703*out1_1 + 0.7297*out2_1;
                                out[badX1] = (val < 0) ? 0 : val;
                
                                break;
                              case 023:         /* #..##, <noise^2> = 0 */
                                val = 0.7538*out1_1 + 0.5680*out2_1 - 0.3218*out2_2;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.3095*out1_1 + 1.2132*out2_1 - 0.5227*out2_2;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              case 032:         /* ##.#., <noise^2> = 0 */
                                val = -0.3834*out1_2 + 0.8959*out1_1 + 0.4875*out2_1;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              case 033:         /* ##.##, <noise^2> = 0 */
                                /* These coefficients are also available as
                                   interp::interp_1_c1 and interp::interp_1_c2 */
                                val = -0.2737*out1_2 + 0.7737*out1_1 + 0.7737*out2_1 - 0.2737*out2_2;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
959  <a href="#4d375e47">4d375e47</a> -                 </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
959  <a href="#7ad849f2">7ad849f2</a> + </div>
                                break;
                              case 042:                 /* #...#., <noise^2> = 0, sigma = 1 */
                                val = 0.8430*out1_1 + 0.1570*out2_1;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
964  <a href="#efbf89a2">efbf89a2</a> -             </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
964  <a href="#7ad849f2">7ad849f2</a> + </div>
                                val = 0.5000*out1_1 + 0.5000*out2_1;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
967  <a href="#efbf89a2">efbf89a2</a> -             </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
967  <a href="#7ad849f2">7ad849f2</a> + </div>
                                val = 0.1570*out1_1 + 0.8430*out2_1;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
970  <a href="#efbf89a2">efbf89a2</a> -             </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
970  <a href="#7ad849f2">7ad849f2</a> + </div>
                                break;
                              case 043:             /* #...##, <noise^2> = 0 */
                                val = 0.8525*out1_1 + 0.2390*out2_1 - 0.0915*out2_2;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.5356*out1_1 + 0.8057*out2_1 - 0.3413*out2_2;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2120*out1_1 + 1.3150*out2_1 - 0.5270*out2_2;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
982  <a href="#efbf89a2">efbf89a2</a> -                 break;      </div>
              ?                       ------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
982  <a href="#7ad849f2">7ad849f2</a> +                 break;</div>
                              case 062:         /* ##..#., <noise^2> = 0 */
                                val = -0.5227*out1_2 + 1.2132*out1_1 + 0.3095*out2_1;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = -0.3218*out1_2 + 0.5680*out1_1 + 0.7538*out2_1;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              case 063:         /* ##..##, <noise^2> = 0 */
                                val = -0.4793*out1_2 + 1.1904*out1_1 + 0.5212*out2_1 - 0.2323*out2_2;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = -0.2323*out1_2 + 0.5212*out1_1 + 1.1904*out2_1 - 0.4793*out2_2;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              case 0102:            /* #....#., <noise^2> = 0, sigma = 1 */
                                val = 0.8810*out1_1 + 0.1190*out2_1;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                val = 0.6315*out1_1 + 0.3685*out2_1;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                val = 0.3685*out1_1 + 0.6315*out2_1;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                val = 0.1190*out1_1 + 0.8810*out2_1;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                break;
                              case 0103:            /* #....##, <noise^2> = 0 */
                                val = 0.8779*out1_1 + 0.0945*out2_1 + 0.0276*out2_2;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.6327*out1_1 + 0.3779*out2_1 - 0.0106*out2_2;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4006*out1_1 + 0.8914*out2_1 - 0.2920*out2_2;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.1757*out1_1 + 1.3403*out2_1 - 0.5160*out2_2;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              case 0142:                /* ##...#., <noise^2> = 0 */
                                val = -0.5270*out1_2 + 1.3150*out1_1 + 0.2120*out2_1;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = -0.3413*out1_2 + 0.8057*out1_1 + 0.5356*out2_1;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = -0.0915*out1_2 + 0.2390*out1_1 + 0.8525*out2_1;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              case 0143:                /* ##...##, <noise^2> = 0 */
                                val = -0.5230*out1_2 + 1.3163*out1_1 + 0.2536*out2_1 - 0.0469*out2_2;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = -0.3144*out1_2 + 0.8144*out1_1 + 0.8144*out2_1 - 0.3144*out2_2;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = -0.0469*out1_2 + 0.2536*out1_1 + 1.3163*out2_1 - 0.5230*out2_2;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              case 0202:            /* #.....#., <noise^2> = 0, sigma = 1 */
                                val = 0.8885*out1_1 + 0.1115*out2_1;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
1052 <a href="#efbf89a2">efbf89a2</a> -             </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
1052 <a href="#7ad849f2">7ad849f2</a> + </div>
                                val = 0.6748*out1_1 + 0.3252*out2_1;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
1055 <a href="#efbf89a2">efbf89a2</a> -             </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
1055 <a href="#7ad849f2">7ad849f2</a> + </div>
                                val = 0.5000*out1_1 + 0.5000*out2_1;
                                out[badX1 - 2] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
1058 <a href="#efbf89a2">efbf89a2</a> -             </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
1058 <a href="#7ad849f2">7ad849f2</a> + </div>
                                val = 0.3252*out1_1 + 0.6748*out2_1;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
1061 <a href="#efbf89a2">efbf89a2</a> -             </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
1061 <a href="#7ad849f2">7ad849f2</a> + </div>
                                val = 0.1115*out1_1 + 0.8885*out2_1;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
1064 <a href="#efbf89a2">efbf89a2</a> -             </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
1064 <a href="#7ad849f2">7ad849f2</a> + </div>
                                break;
                              case 0203:            /* #.....##, <noise^2> = 0 */
                                val = 0.8824*out1_1 + 0.0626*out2_1 + 0.0549*out2_2;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.6601*out1_1 + 0.2068*out2_1 + 0.1331*out2_2;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4938*out1_1 + 0.4498*out2_1 + 0.0564*out2_2;
                                out[badX1 - 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.3551*out1_1 + 0.9157*out2_1 - 0.2708*out2_2;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.1682*out1_1 + 1.3447*out2_1 - 0.5129*out2_2;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              case 0302:                /* ##....#., <noise^2> = 0 */
                                val = -0.5160*out1_2 + 1.3403*out1_1 + 0.1757*out2_1;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = -0.2920*out1_2 + 0.8914*out1_1 + 0.4006*out2_1;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = -0.0106*out1_2 + 0.3779*out1_1 + 0.6327*out2_1;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.0276*out1_2 + 0.0945*out1_1 + 0.8779*out2_1;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              case 0303:                /* ##....##, <noise^2> = 0 */
                                val = -0.5197*out1_2 + 1.3370*out1_1 + 0.1231*out2_1 + 0.0596*out2_2;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = -0.2924*out1_2 + 0.8910*out1_1 + 0.3940*out2_1 + 0.0074*out2_2;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.0074*out1_2 + 0.3940*out1_1 + 0.8910*out2_1 - 0.2924*out2_2;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.0596*out1_2 + 0.1231*out1_1 + 1.3370*out2_1 - 0.5197*out2_2;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              case 0402:            /* #......#., <noise^2> = 0, sigma = 1 */
                                val = 0.8893*out1_1 + 0.1107*out2_1;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                val = 0.6830*out1_1 + 0.3170*out2_1;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                val = 0.5435*out1_1 + 0.4565*out2_1;
                                out[badX0 + 2] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                val = 0.4565*out1_1 + 0.5435*out2_1;
                                out[badX1 - 2] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                val = 0.3170*out1_1 + 0.6830*out2_1;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                val = 0.1107*out1_1 + 0.8893*out2_1;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                break;
                              case 0403:            /* #......##, <noise^2> = 0 */
                                val = 0.8829*out1_1 + 0.0588*out2_1 + 0.0583*out2_2;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.6649*out1_1 + 0.1716*out2_1 + 0.1635*out2_2;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.5212*out1_1 + 0.2765*out2_1 + 0.2024*out2_2;
                                out[badX0 + 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4477*out1_1 + 0.4730*out2_1 + 0.0793*out2_2;
                                out[badX1 - 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.3465*out1_1 + 0.9201*out2_1 - 0.2666*out2_2;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.1673*out1_1 + 1.3452*out2_1 - 0.5125*out2_2;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              case 0602:                /* ##.....#., <noise^2> = 0 */
                                val = -0.5129*out1_2 + 1.3447*out1_1 + 0.1682*out2_1;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = -0.2708*out1_2 + 0.9157*out1_1 + 0.3551*out2_1;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.0564*out1_2 + 0.4498*out1_1 + 0.4938*out2_1;
                                out[badX1 - 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.1331*out1_2 + 0.2068*out1_1 + 0.6601*out2_1;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.0549*out1_2 + 0.0626*out1_1 + 0.8824*out2_1;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              case 0603:                /* ##.....##, <noise^2> = 0 */
                                val = -0.5179*out1_2 + 1.3397*out1_1 + 0.0928*out2_1 + 0.0854*out2_2;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = -0.2796*out1_2 + 0.9069*out1_1 + 0.2231*out2_1 + 0.1495*out2_2;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.0533*out1_2 + 0.4467*out1_1 + 0.4467*out2_1 + 0.0533*out2_2;
                                out[badX1 - 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.1495*out1_2 + 0.2231*out1_1 + 0.9069*out2_1 - 0.2796*out2_2;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.0854*out1_2 + 0.0928*out1_1 + 1.3397*out2_1 - 0.5179*out2_2;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              case 01002:               /* #.......#., <noise^2> = 0, sigma = 1 */
                                val = 0.8894*out1_1 + 0.1106*out2_1;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                val = 0.6839*out1_1 + 0.3161*out2_1;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                val = 0.5517*out1_1 + 0.4483*out2_1;
                                out[badX0 + 2] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                val = 0.5000*out1_1 + 0.5000*out2_1;
                                out[badX1 - 3] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                val = 0.4483*out1_1 + 0.5517*out2_1;
                                out[badX1 - 2] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                val = 0.3161*out1_1 + 0.6839*out2_1;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                val = 0.1106*out1_1 + 0.8894*out2_1;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                break;
                              case 01003:           /* #.......##, <noise^2> = 0 */
                                val = 0.8829*out1_1 + 0.0585*out2_1 + 0.0585*out2_2;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.6654*out1_1 + 0.1676*out2_1 + 0.1670*out2_2;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.5260*out1_1 + 0.2411*out2_1 + 0.2329*out2_2;
                                out[badX0 + 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4751*out1_1 + 0.2995*out2_1 + 0.2254*out2_2;
                                out[badX1 - 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4390*out1_1 + 0.4773*out2_1 + 0.0836*out2_2;
                                out[badX1 - 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.3456*out1_1 + 0.9205*out2_1 - 0.2661*out2_2;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.1673*out1_1 + 1.3452*out2_1 - 0.5125*out2_2;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              case 01402:           /* ##......#., <noise^2> = 0 */
                                val = -0.5125*out1_2 + 1.3452*out1_1 + 0.1673*out2_1;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = -0.2666*out1_2 + 0.9201*out1_1 + 0.3465*out2_1;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.0793*out1_2 + 0.4730*out1_1 + 0.4477*out2_1;
                                out[badX0 + 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2024*out1_2 + 0.2765*out1_1 + 0.5212*out2_1;
                                out[badX1 - 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.1635*out1_2 + 0.1716*out1_1 + 0.6649*out2_1;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.0583*out1_2 + 0.0588*out1_1 + 0.8829*out2_1;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              case 01403:               /* ##......##, <noise^2> = 0 */
                                val = -0.5177*out1_2 + 1.3400*out1_1 + 0.0891*out2_1 + 0.0886*out2_2;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = -0.2771*out1_2 + 0.9095*out1_1 + 0.1878*out2_1 + 0.1797*out2_2;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.0677*out1_2 + 0.4614*out1_1 + 0.2725*out2_1 + 0.1984*out2_2;
                                out[badX0 + 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.1984*out1_2 + 0.2725*out1_1 + 0.4614*out2_1 + 0.0677*out2_2;
                                out[badX1 - 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.1797*out1_2 + 0.1878*out1_1 + 0.9095*out2_1 - 0.2771*out2_2;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.0886*out1_2 + 0.0891*out1_1 + 1.3400*out2_1 - 0.5177*out2_2;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              case 02002:           /* #........#., <noise^2> = 0, sigma = 1 */
                                val = 0.8894*out1_1 + 0.1106*out2_1;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                val = 0.6839*out1_1 + 0.3161*out2_1;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                val = 0.5526*out1_1 + 0.4474*out2_1;
                                out[badX0 + 2] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                val = 0.5082*out1_1 + 0.4918*out2_1;
                                out[badX0 + 3] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                val = 0.4918*out1_1 + 0.5082*out2_1;
                                out[badX1 - 3] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                val = 0.4474*out1_1 + 0.5526*out2_1;
                                out[badX1 - 2] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                val = 0.3161*out1_1 + 0.6839*out2_1;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                val = 0.1106*out1_1 + 0.8894*out2_1;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                break;
                              case 02003:           /* #........##, <noise^2> = 0 */
                                val = 0.8829*out1_1 + 0.0585*out2_1 + 0.0585*out2_2;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.6654*out1_1 + 0.1673*out2_1 + 0.1673*out2_2;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.5265*out1_1 + 0.2370*out2_1 + 0.2365*out2_2;
                                out[badX0 + 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4799*out1_1 + 0.2641*out2_1 + 0.2560*out2_2;
                                out[badX0 + 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4664*out1_1 + 0.3038*out2_1 + 0.2298*out2_2;
                                out[badX1 - 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4381*out1_1 + 0.4778*out2_1 + 0.0841*out2_2;
                                out[badX1 - 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.3455*out1_1 + 0.9206*out2_1 - 0.2661*out2_2;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.1673*out1_1 + 1.3452*out2_1 - 0.5125*out2_2;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              case 03002:           /* ##.......#., <noise^2> = 0 */
                                val = -0.5125*out1_2 + 1.3452*out1_1 + 0.1673*out2_1;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = -0.2661*out1_2 + 0.9205*out1_1 + 0.3456*out2_1;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.0836*out1_2 + 0.4773*out1_1 + 0.4390*out2_1;
                                out[badX0 + 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2254*out1_2 + 0.2995*out1_1 + 0.4751*out2_1;
                                out[badX1 - 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2329*out1_2 + 0.2411*out1_1 + 0.5260*out2_1;
                                out[badX1 - 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.1670*out1_2 + 0.1676*out1_1 + 0.6654*out2_1;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.0585*out1_2 + 0.0585*out1_1 + 0.8829*out2_1;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              case 03003:               /* ##.......##, <noise^2> = 0 */
                                val = -0.5177*out1_2 + 1.3400*out1_1 + 0.0889*out2_1 + 0.0888*out2_2;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = -0.2768*out1_2 + 0.9098*out1_1 + 0.1838*out2_1 + 0.1832*out2_2;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.0703*out1_2 + 0.4639*out1_1 + 0.2370*out2_1 + 0.2288*out2_2;
                                out[badX0 + 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2130*out1_2 + 0.2870*out1_1 + 0.2870*out2_1 + 0.2130*out2_2;
                                out[badX1 - 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2288*out1_2 + 0.2370*out1_1 + 0.4639*out2_1 + 0.0703*out2_2;
                                out[badX1 - 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.1832*out1_2 + 0.1838*out1_1 + 0.9098*out2_1 - 0.2768*out2_2;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.0888*out1_2 + 0.0889*out1_1 + 1.3400*out2_1 - 0.5177*out2_2;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              case 04002:           /* #.........#., <noise^2> = 0 */
                                val = 0.8894*out1_1 + 0.1106*out2_1;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.6839*out1_1 + 0.3161*out2_1;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.5527*out1_1 + 0.4473*out2_1;
                                out[badX0 + 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.5091*out1_1 + 0.4909*out2_1;
                                out[badX0 + 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.5000*out1_1 + 0.5000*out2_1;
                                out[badX1 - 4] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4909*out1_1 + 0.5091*out2_1;
                                out[badX1 - 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4473*out1_1 + 0.5527*out2_1;
                                out[badX1 - 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.3161*out1_1 + 0.6839*out2_1;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.1106*out1_1 + 0.8894*out2_1;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              case 04003:           /* #.........##, <noise^2> = 0 */
                                val = 0.8829*out1_1 + 0.0585*out2_1 + 0.0585*out2_2;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.6654*out1_1 + 0.1673*out2_1 + 0.1673*out2_2;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.5265*out1_1 + 0.2368*out2_1 + 0.2367*out2_2;
                                out[badX0 + 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4804*out1_1 + 0.2601*out2_1 + 0.2595*out2_2;
                                out[badX0 + 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4712*out1_1 + 0.2685*out2_1 + 0.2603*out2_2;
                                out[badX1 - 4] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4654*out1_1 + 0.3043*out2_1 + 0.2302*out2_2;
                                out[badX1 - 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4380*out1_1 + 0.4778*out2_1 + 0.0842*out2_2;
                                out[badX1 - 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.3455*out1_1 + 0.9206*out2_1 - 0.2661*out2_2;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.1673*out1_1 + 1.3452*out2_1 - 0.5125*out2_2;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              case 06002:           /* ##........#., <noise^2> = 0 */
                                val = -0.5125*out1_2 + 1.3452*out1_1 + 0.1673*out2_1;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = -0.2661*out1_2 + 0.9206*out1_1 + 0.3455*out2_1;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.0841*out1_2 + 0.4778*out1_1 + 0.4381*out2_1;
                                out[badX0 + 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2298*out1_2 + 0.3038*out1_1 + 0.4664*out2_1;
                                out[badX0 + 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2560*out1_2 + 0.2641*out1_1 + 0.4799*out2_1;
                                out[badX1 - 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2365*out1_2 + 0.2370*out1_1 + 0.5265*out2_1;
                                out[badX1 - 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.1673*out1_2 + 0.1673*out1_1 + 0.6654*out2_1;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.0585*out1_2 + 0.0585*out1_1 + 0.8829*out2_1;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              case 06003:               /* ##........##, <noise^2> = 0 */
                                val = -0.5177*out1_2 + 1.3400*out1_1 + 0.0888*out2_1 + 0.0888*out2_2;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = -0.2768*out1_2 + 0.9098*out1_1 + 0.1835*out2_1 + 0.1835*out2_2;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.0705*out1_2 + 0.4642*out1_1 + 0.2329*out2_1 + 0.2324*out2_2;
                                out[badX0 + 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2155*out1_2 + 0.2896*out1_1 + 0.2515*out2_1 + 0.2434*out2_2;
                                out[badX0 + 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2434*out1_2 + 0.2515*out1_1 + 0.2896*out2_1 + 0.2155*out2_2;
                                out[badX1 - 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2324*out1_2 + 0.2329*out1_1 + 0.4642*out2_1 + 0.0705*out2_2;
                                out[badX1 - 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.1835*out1_2 + 0.1835*out1_1 + 0.9098*out2_1 - 0.2768*out2_2;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.0888*out1_2 + 0.0888*out1_1 + 1.3400*out2_1 - 0.5177*out2_2;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              case 010002:          /* #..........#., <noise^2> = 0, sigma = 1 */
                                val = 0.8894*out1_1 + 0.1106*out2_1;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                val = 0.6839*out1_1 + 0.3161*out2_1;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                val = 0.5527*out1_1 + 0.4473*out2_1;
                                out[badX0 + 2] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                val = 0.5092*out1_1 + 0.4908*out2_1;
                                out[badX0 + 3] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                val = 0.5009*out1_1 + 0.4991*out2_1;
                                out[badX0 + 4] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                val = 0.4991*out1_1 + 0.5009*out2_1;
                                out[badX1 - 4] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                val = 0.4908*out1_1 + 0.5092*out2_1;
                                out[badX1 - 3] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                val = 0.4473*out1_1 + 0.5527*out2_1;
                                out[badX1 - 2] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                val = 0.3161*out1_1 + 0.6839*out2_1;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                val = 0.1106*out1_1 + 0.8894*out2_1;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1):  val;
                
                                break;
                              case 010003:          /* #..........##, <noise^2> = 0 */
                                val = 0.8829*out1_1 + 0.0585*out2_1 + 0.0585*out2_2;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.6654*out1_1 + 0.1673*out2_1 + 0.1673*out2_2;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.5265*out1_1 + 0.2367*out2_1 + 0.2367*out2_2;
                                out[badX0 + 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4804*out1_1 + 0.2598*out2_1 + 0.2598*out2_2;
                                out[badX0 + 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4717*out1_1 + 0.2644*out2_1 + 0.2639*out2_2;
                                out[badX0 + 4] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4703*out1_1 + 0.2690*out2_1 + 0.2608*out2_2;
                                out[badX1 - 4] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4654*out1_1 + 0.3043*out2_1 + 0.2303*out2_2;
                                out[badX1 - 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4380*out1_1 + 0.4778*out2_1 + 0.0842*out2_2;
                                out[badX1 - 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.3455*out1_1 + 0.9206*out2_1 - 0.2661*out2_2;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.1673*out1_1 + 1.3452*out2_1 - 0.5125*out2_2;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              case 014002:          /* ##.........#., <noise^2> = 0 */
                                val = -0.5125*out1_2 + 1.3452*out1_1 + 0.1673*out2_1;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = -0.2661*out1_2 + 0.9206*out1_1 + 0.3455*out2_1;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.0842*out1_2 + 0.4778*out1_1 + 0.4380*out2_1;
                                out[badX0 + 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2302*out1_2 + 0.3043*out1_1 + 0.4654*out2_1;
                                out[badX0 + 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2603*out1_2 + 0.2685*out1_1 + 0.4712*out2_1;
                                out[badX1 - 4] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2595*out1_2 + 0.2601*out1_1 + 0.4804*out2_1;
                                out[badX1 - 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2367*out1_2 + 0.2368*out1_1 + 0.5265*out2_1;
                                out[badX1 - 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.1673*out1_2 + 0.1673*out1_1 + 0.6654*out2_1;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.0585*out1_2 + 0.0585*out1_1 + 0.8829*out2_1;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              case 014003:          /* ##.........##, <noise^2> = 0 */
                                val = -0.5177*out1_2 + 1.3400*out1_1 + 0.0888*out2_1 + 0.0888*out2_2;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = -0.2768*out1_2 + 0.9098*out1_1 + 0.1835*out2_1 + 0.1835*out2_2;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.0705*out1_2 + 0.4642*out1_1 + 0.2326*out2_1 + 0.2326*out2_2;
                                out[badX0 + 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2158*out1_2 + 0.2899*out1_1 + 0.2474*out2_1 + 0.2469*out2_2;
                                out[badX0 + 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2459*out1_2 + 0.2541*out1_1 + 0.2541*out2_1 + 0.2459*out2_2;
                                out[badX1 - 4] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2469*out1_2 + 0.2474*out1_1 + 0.2899*out2_1 + 0.2158*out2_2;
                                out[badX1 - 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2326*out1_2 + 0.2326*out1_1 + 0.4642*out2_1 + 0.0705*out2_2;
                                out[badX1 - 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.1835*out1_2 + 0.1835*out1_1 + 0.9098*out2_1 - 0.2768*out2_2;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.0888*out1_2 + 0.0888*out1_1 + 1.3400*out2_1 - 0.5177*out2_2;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              case 020003:          /* #...........##, <noise^2> = 0 */
                                val = 0.8829*out1_1 + 0.0585*out2_1 + 0.0585*out2_2;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.6654*out1_1 + 0.1673*out2_1 + 0.1673*out2_2;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.5265*out1_1 + 0.2367*out2_1 + 0.2367*out2_2;
                                out[badX0 + 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4804*out1_1 + 0.2598*out2_1 + 0.2598*out2_2;
                                out[badX0 + 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4718*out1_1 + 0.2641*out2_1 + 0.2641*out2_2;
                                out[badX0 + 4] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4708*out1_1 + 0.2649*out2_1 + 0.2644*out2_2;
                                out[badX1 - 5] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4702*out1_1 + 0.2690*out2_1 + 0.2608*out2_2;
                                out[badX1 - 4] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4654*out1_1 + 0.3044*out2_1 + 0.2303*out2_2;
                                out[badX1 - 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4380*out1_1 + 0.4778*out2_1 + 0.0842*out2_2;
                                out[badX1 - 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.3455*out1_1 + 0.9206*out2_1 - 0.2661*out2_2;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.1673*out1_1 + 1.3452*out2_1 - 0.5125*out2_2;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              case 030002:          /* ##..........#., <noise^2> = 0 */
                                val = -0.5125*out1_2 + 1.3452*out1_1 + 0.1673*out2_1;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = -0.2661*out1_2 + 0.9206*out1_1 + 0.3455*out2_1;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.0842*out1_2 + 0.4778*out1_1 + 0.4380*out2_1;
                                out[badX0 + 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2303*out1_2 + 0.3043*out1_1 + 0.4654*out2_1;
                                out[badX0 + 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2608*out1_2 + 0.2690*out1_1 + 0.4703*out2_1;
                                out[badX0 + 4] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2639*out1_2 + 0.2644*out1_1 + 0.4717*out2_1;
                                out[badX1 - 4] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2598*out1_2 + 0.2598*out1_1 + 0.4804*out2_1;
                                out[badX1 - 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2367*out1_2 + 0.2367*out1_1 + 0.5265*out2_1;
                                out[badX1 - 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.1673*out1_2 + 0.1673*out1_1 + 0.6654*out2_1;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.0585*out1_2 + 0.0585*out1_1 + 0.8829*out2_1;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              case 030003:          /* ##..........##, <noise^2> = 0 */
                                val = -0.5177*out1_2 + 1.3400*out1_1 + 0.0888*out2_1 + 0.0888*out2_2;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = -0.2768*out1_2 + 0.9098*out1_1 + 0.1835*out2_1 + 0.1835*out2_2;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.0705*out1_2 + 0.4642*out1_1 + 0.2326*out2_1 + 0.2326*out2_2;
                                out[badX0 + 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2158*out1_2 + 0.2899*out1_1 + 0.2472*out2_1 + 0.2471*out2_2;
                                out[badX0 + 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2462*out1_2 + 0.2544*out1_1 + 0.2500*out2_1 + 0.2495*out2_2;
                                out[badX0 + 4] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2495*out1_2 + 0.2500*out1_1 + 0.2544*out2_1 + 0.2462*out2_2;
                                out[badX1 - 4] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2471*out1_2 + 0.2472*out1_1 + 0.2899*out2_1 + 0.2158*out2_2;
                                out[badX1 - 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2326*out1_2 + 0.2326*out1_1 + 0.4642*out2_1 + 0.0705*out2_2;
                                out[badX1 - 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.1835*out1_2 + 0.1835*out1_1 + 0.9098*out2_1 - 0.2768*out2_2;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.0888*out1_2 + 0.0888*out1_1 + 1.3400*out2_1 - 0.5177*out2_2;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              case 040003:          /* #............##, <noise^2> = 0 */
                                val = 0.8829*out1_1 + 0.0585*out2_1 + 0.0585*out2_2;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.6654*out1_1 + 0.1673*out2_1 + 0.1673*out2_2;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.5265*out1_1 + 0.2367*out2_1 + 0.2367*out2_2;
                                out[badX0 + 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4804*out1_1 + 0.2598*out2_1 + 0.2598*out2_2;
                                out[badX0 + 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4718*out1_1 + 0.2641*out2_1 + 0.2641*out2_2;
                                out[badX0 + 4] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4708*out1_1 + 0.2646*out2_1 + 0.2646*out2_2;
                                out[badX0 + 5] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4707*out1_1 + 0.2649*out2_1 + 0.2644*out2_2;
                                out[badX1 - 5] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4702*out1_1 + 0.2690*out2_1 + 0.2608*out2_2;
                                out[badX1 - 4] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4654*out1_1 + 0.3044*out2_1 + 0.2303*out2_2;
                                out[badX1 - 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4380*out1_1 + 0.4778*out2_1 + 0.0842*out2_2;
                                out[badX1 - 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.3455*out1_1 + 0.9206*out2_1 - 0.2661*out2_2;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.1673*out1_1 + 1.3452*out2_1 - 0.5125*out2_2;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              case 060002:          /* ##...........#., <noise^2> = 0 */
                                val = -0.5125*out1_2 + 1.3452*out1_1 + 0.1673*out2_1;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = -0.2661*out1_2 + 0.9206*out1_1 + 0.3455*out2_1;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.0842*out1_2 + 0.4778*out1_1 + 0.4380*out2_1;
                                out[badX0 + 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2303*out1_2 + 0.3044*out1_1 + 0.4654*out2_1;
                                out[badX0 + 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2608*out1_2 + 0.2690*out1_1 + 0.4702*out2_1;
                                out[badX0 + 4] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2644*out1_2 + 0.2649*out1_1 + 0.4708*out2_1;
                                out[badX1 - 5] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2641*out1_2 + 0.2641*out1_1 + 0.4718*out2_1;
                                out[badX1 - 4] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2598*out1_2 + 0.2598*out1_1 + 0.4804*out2_1;
                                out[badX1 - 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2367*out1_2 + 0.2367*out1_1 + 0.5265*out2_1;
                                out[badX1 - 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.1673*out1_2 + 0.1673*out1_1 + 0.6654*out2_1;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.0585*out1_2 + 0.0585*out1_1 + 0.8829*out2_1;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              default:
                                //shFatal("Unsupported defect type: MIDDLE 0%o",defect[i].type);
                                break;                  /* NOTREACHED */
                            }
                            break;
                          case Defect::WIDE:
                          case Defect::WIDE_NEAR_LEFT:
                          case Defect::WIDE_NEAR_RIGHT:
                            if (defectPos == Defect::WIDE_NEAR_LEFT) {
                                assert(badX0 >= 1);
                
                                if (badX1 + 2 >= ncol) {        /* left defect extends near
                                                                   right edge of data! */
                                    if (badX1 == ncol - 2) {    /* one column remains */
                                        val = out[ncol - 1];
                                    } else {
                                        val = fallbackValue;            /* there is no information */
                                    }
                                    for (int j = badX0; j <= badX1; j++) {
                                        out[j] = val;
                                    }
                                    break;
                                }
                                out1_2 = -1;            /* NOTUSED */
                                out2_2 = out[badX1 + 2];
                            } else if (defectPos == Defect::WIDE) {
                                assert(badX0 >= 2 && badX1 + 2 < ncol);
                                out1_2 = out[badX0 - 2];
                                out2_2 = out[badX1 + 2];
                            } else if (defectPos == Defect::WIDE_NEAR_RIGHT) {
                                assert(badX1 + 1 < ncol);
                
                                if (badX0 < 2) {                /* right defect extends near
                                                                   left edge of data! */
                                    if (badX0 == 1) {   /* one column remains */
                                        val = out[0];
                                    } else {
                                        val = fallbackValue;    /* there is no information */
                                    }
                                    for (int j = badX0; j <= badX1; j++) {
                                        out[j] = val;
                                    }
                                    break;
                                }
                                out1_2 = out[badX0 - 2];
                                out2_2 = -1;            /* NOTUSED */
                            } else {
                                //shFatal("Unknown defect classification %d (%s:%d)",defectPos, __FILE__,__LINE__);
                                out1_2 = out2_2 = -1;   /* NOTUSED */
                            }
                
                            out1_1 = out[badX0 - 1];
                            out2_1 = out[badX1 + 1];
                
                            switch (defectType) {
                
                              case 06:                  /* #?#., <noise^2> = 0 */
                                val = 0.8894*out1_1 + 0.1106*out2_1;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.6839*out1_1 + 0.3161*out2_1;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.5527*out1_1 + 0.4473*out2_1;
                                out[badX0 + 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.5092*out1_1 + 0.4908*out2_1;
                                out[badX0 + 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.5010*out1_1 + 0.4990*out2_1;
                                out[badX0 + 4] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.5001*out1_1 + 0.4999*out2_1;
                                out[badX0 + 5] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
1848 <a href="#4d375e47">4d375e47</a> - </div>
                                val = 0.5000*out1_1 + 0.5000*out2_1;
                
                                for (int j = badX0 + 6; j < badX1 - 5; j++) {
                                    out[j] = val;
                                }
                
                                val = 0.4999*out1_1 + 0.5001*out2_1;
                                out[badX1 - 5] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4990*out1_1 + 0.5010*out2_1;
                                out[badX1 - 4] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4908*out1_1 + 0.5092*out2_1;
                                out[badX1 - 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4473*out1_1 + 0.5527*out2_1;
                                out[badX1 - 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.3161*out1_1 + 0.6839*out2_1;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.1106*out1_1 + 0.8894*out2_1;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              case 07:           /* #?##, <noise^2> = 0 */
                                val = 0.8829*out1_1 + 0.0585*out2_1 + 0.0585*out2_2;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.6654*out1_1 + 0.1673*out2_1 + 0.1673*out2_2;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.5265*out1_1 + 0.2367*out2_1 + 0.2367*out2_2;
                                out[badX0 + 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4804*out1_1 + 0.2598*out2_1 + 0.2598*out2_2;
                                out[badX0 + 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4718*out1_1 + 0.2641*out2_1 + 0.2641*out2_2;
                                out[badX0 + 4] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4708*out1_1 + 0.2646*out2_1 + 0.2646*out2_2;
                                out[badX0 + 5] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4707*out[badX0 - 1] + 0.2646*out[badX1 + 1] + 0.2646*out[badX1 + 2];
                
                                for (int j = badX0 + 6; j < badX1 - 5; j++) {
                                    out[j] = val;
                                }
                
                                val = 0.4707*out1_1 + 0.2649*out2_1 + 0.2644*out2_2;
                                out[badX1 - 5] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4702*out1_1 + 0.2690*out2_1 + 0.2608*out2_2;
                                out[badX1 - 4] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4654*out1_1 + 0.3044*out2_1 + 0.2303*out2_2;
                                out[badX1 - 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.4380*out1_1 + 0.4778*out2_1 + 0.0842*out2_2;
                                out[badX1 - 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.3455*out1_1 + 0.9206*out2_1 - 0.2661*out2_2;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.1673*out1_1 + 1.3452*out2_1 - 0.5125*out2_2;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
1916 <a href="#efbf89a2">efbf89a2</a> -             </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
1915 <a href="#7ad849f2">7ad849f2</a> + </div>
                                break;
                              case 016:         /* ##?#., <noise^2> = 0 */
                                val = -0.5125*out1_2 + 1.3452*out1_1 + 0.1673*out2_1;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = -0.2661*out1_2 + 0.9206*out1_1 + 0.3455*out2_1;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.0842*out1_2 + 0.4778*out1_1 + 0.4380*out2_1;
                                out[badX0 + 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2303*out1_2 + 0.3044*out1_1 + 0.4654*out2_1;
                                out[badX0 + 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2608*out1_2 + 0.2690*out1_1 + 0.4702*out2_1;
                                out[badX0 + 4] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2644*out1_2 + 0.2649*out1_1 + 0.4707*out2_1;
                                out[badX0 + 5] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2646*out1_2 + 0.2646*out1_1 + 0.4707*out2_1;
                                val = (val < min) ? 0.5*(out1_1 + out2_1) : val;
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
1939 <a href="#efbf89a2">efbf89a2</a> -             </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
1938 <a href="#7ad849f2">7ad849f2</a> + </div>
                                for (int j = badX0 + 6; j < badX1 - 5; j++) {
                                    out[j] = val;
                                }
                
                                val = 0.2646*out1_2 + 0.2646*out1_1 + 0.4708*out2_1;
                                out[badX1 - 5] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2641*out1_2 + 0.2641*out1_1 + 0.4718*out2_1;
                                out[badX1 - 4] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2598*out1_2 + 0.2598*out1_1 + 0.4804*out2_1;
                                out[badX1 - 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2367*out1_2 + 0.2367*out1_1 + 0.5265*out2_1;
                                out[badX1 - 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.1673*out1_2 + 0.1673*out1_1 + 0.6654*out2_1;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.0585*out1_2 + 0.0585*out1_1 + 0.8829*out2_1;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              case 017:                 /* ##?##, S/N = infty */
                                val = -0.5177*out1_2 + 1.3400*out1_1 + 0.0888*out2_1 + 0.0888*out2_2;
                                out[badX0] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = -0.2768*out1_2 + 0.9098*out1_1 + 0.1835*out2_1 + 0.1835*out2_2;
                                out[badX0 + 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.0705*out1_2 + 0.4642*out1_1 + 0.2326*out2_1 + 0.2326*out2_2;
                                out[badX0 + 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2158*out1_2 + 0.2899*out1_1 + 0.2472*out2_1 + 0.2472*out2_2;
                                out[badX0 + 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2462*out1_2 + 0.2544*out1_1 + 0.2497*out2_1 + 0.2497*out2_2;
                                out[badX0 + 4] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2497*out1_2 + 0.2503*out1_1 + 0.2500*out2_1 + 0.2500*out2_2;
                                out[badX0 + 5] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2500*out1_2 + 0.2500*out1_1 + 0.2500*out2_1 + 0.2500*out2_2;
                                val = (val < min) ? 0.5*(out1_1 + out2_1) : val;
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
1984 <a href="#efbf89a2">efbf89a2</a> -             </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
1983 <a href="#7ad849f2">7ad849f2</a> + </div>
                                for (int j = badX0 + 6; j < badX1 - 5; j++) {
                                    out[j] = val;
                                }
                
                                val = 0.2500*out1_2 + 0.2500*out1_1 + 0.2503*out2_1 + 0.2497*out2_2;
                                out[badX1 - 5] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2497*out1_2 + 0.2497*out1_1 + 0.2544*out2_1 + 0.2462*out2_2;
                                out[badX1 - 4] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2472*out1_2 + 0.2472*out1_1 + 0.2899*out2_1 + 0.2158*out2_2;
                                out[badX1 - 3] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.2326*out1_2 + 0.2326*out1_1 + 0.4642*out2_1 + 0.0705*out2_2;
                                out[badX1 - 2] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.1835*out1_2 + 0.1835*out1_1 + 0.9098*out2_1 - 0.2768*out2_2;
                                out[badX1 - 1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                val = 0.0888*out1_2 + 0.0888*out1_1 + 1.3400*out2_1 - 0.5177*out2_2;
                                out[badX1] = (val < min) ? 0.5*(out1_1 + out2_1) : val;
                
                                break;
                              default:
                                //shFatal("Unsupported defect type: WIDE 0%o",defect[i].type);
                                break;                  /* NOTREACHED */
                            }
                            break;
                        }
                    }
                }
                
                template<typename MaskT>
                static void do_defects(std::vector<Defect::Ptr> const & badList, // list of bad things
                                       int const y,                              // Row that we should fix
                                       MaskT& mask,                              // mask to set
                                       typename MaskT::Pixel const interpBit,    // bit to set for bad pixels
                                       bool useFallbackValueAtEdge,              // use fallbackValue at edge of chip?
                                       int nUseInterp                            // no. of pixels to interpolate towards edge
                                      )
                {
                    typename MaskT::x_iterator mask_row = mask.row_begin(y); // pointer to this row of mask
                
                    for (DefectCIter ptr = badList.begin(), end = badList.end(); ptr != end; ++ptr) {
                        Defect::Ptr const defect = *ptr;
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2030 <a href="#9c77de98">9c77de98</a> -        </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2029 <a href="#7ad849f2">7ad849f2</a> + </div>
                        if (y < defect->getY0() || y > defect->getY1()) {
                            continue;
                        }
                
                        int const badX0 = defect->getX0();
                        int const badX1 = defect->getX1();
                
                        for (int c = badX0; c <= badX1; ++c) {
                            mask_row[c] |= interpBit;
                        }
                    }
                }
                
                /************************************************************************************************************/
                
                namespace {
                    template<typename T>
                    struct Sort_ByX0 : public std::binary_function<typename T::Ptr const, typename T::Ptr const, bool> {
                        bool operator() (typename T::Ptr const a, typename T::Ptr const b) const {
                            return a->getX0() < b->getX0();
                        }
                    };
                }
                
                /*!
                 * @brief Process a set of known bad pixels in an image
                 */
                template<typename MaskedImageT>
                void interpolateOverDefects(MaskedImageT& mimage, ///< Image to patch
                                            lsst::afw::detection::Psf const &, ///< the Image's PSF
                                            std::vector<Defect::Ptr> &_badList, ///< List of Defects to patch
                                            double fallbackValue,                ///< Value to fallback to if all else fails
                                            bool useFallbackValueAtEdge ///< Use the fallback value at the image's edge?
                                           ) {
                /*
                 * Allow for image's origin
                 */
                    int const width = mimage.getWidth();
                    int const height = mimage.getHeight();
                
                    std::vector<Defect::Ptr> badList;
                    badList.reserve(_badList.size());
                    for (std::vector<Defect::Ptr>::iterator ptr = _badList.begin(), end = _badList.end(); ptr != end; ++ptr) {
                        geom::BoxI bbox = (*ptr)->getBBox();
                        bbox.shift(geom::ExtentI(-mimage.getX0(), -mimage.getY0())); //allow for image's origin
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2076 <a href="#1e155218">1e155218</a> -         geom::PointI min = bbox.getMin(), max = bbox.getMax();</div>
              ? ^^^^^^^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2075 <a href="#cb64b3f6">cb64b3f6</a> + 		geom::PointI min = bbox.getMin(), max = bbox.getMax();</div>
              ? ^^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2077 <a href="#1e155218">1e155218</a> -         if(min.getX() >= width){</div>
              ? ^^^^^^^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2076 <a href="#cb64b3f6">cb64b3f6</a> + 		if(min.getX() >= width){</div>
              ? ^^
                            continue;
                        } else if (min.getX() < 0) {
                            if (max.getX() < 0) {
                                continue;
                            } else {
                                min.setX(0);
                            }
                        }
                
                        if (max.getX() < 0) {
                            continue;
                        } else if (max.getX() >= width) {
                            max.setX(width - 1);
                        }
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2093 <a href="#cb64b3f6">cb64b3f6</a> -         bbox = geom::BoxI(min, max);       </div>
              ?                                     -------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2092 <a href="#7ad849f2">7ad849f2</a> +         bbox = geom::BoxI(min, max);</div>
                        Defect::Ptr ndefect(new Defect(bbox));
                        ndefect->classify((*ptr)->getPos(), (*ptr)->getType());
                        badList.push_back(ndefect);
                    }
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2098 <a href="#4d375e47">4d375e47</a> -     </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2097 <a href="#7ad849f2">7ad849f2</a> + </div>
                    sort(badList.begin(), badList.end(), Sort_ByX0<Defect>());
                /*
                 * Go through the frame looking at each pixel (except the edge ones which we ignore)
                 */
                    typename MaskedImageT::Mask::Pixel const interpBit =
                        mimage.getMask()->getPlaneBitMask("INTRP"); // interp'd pixels
                
                    int nUseInterp = 6;                       // no. of pixels to interpolate towards edge
                    assert(nUseInterp < Defect::WIDE_DEFECT); // we'd use C++11's static_assert if available
                
                    for (int y = 0; y != height; y++) {
                        std::vector<Defect::Ptr> badList1D = classify_defects(badList, y, width);
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2111 <a href="#9c77de98">9c77de98</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2110 <a href="#7ad849f2">7ad849f2</a> + </div>
                        do_defects(badList1D, y, *mimage.getImage(),
                                   -std::numeric_limits<typename MaskedImageT::Image::Pixel>::max(),
                                   fallbackValue, useFallbackValueAtEdge, nUseInterp);
                
                        do_defects(badList1D, y, *mimage.getMask(), interpBit, useFallbackValueAtEdge, nUseInterp);
                
                        do_defects(badList1D, y, *mimage.getVariance(),
                                   -std::numeric_limits<typename MaskedImageT::Image::Pixel>::max(),
                                   fallbackValue, useFallbackValueAtEdge, nUseInterp);
                    }
                }
                
                /*****************************************************************************/
                /**
                 *
                 * Return a boolean status (true: interpolation is OK) and the interpolated value for a pixel,
                 * ignoring pixels given by badmask
                 *
                 * Interpolation can either be vertical or horizontal
                 *
                 * @note: This is a pretty expensive routine, so use only after suitable thought.
                 */
                template <typename MaskedImageT>
                std::pair<bool, typename MaskedImageT::Image::Pixel> interp::singlePixel(
                        int,                            ///< x: column coordinate of the pixel in question
                        int,                            ///< y: row coordinate of the pixel in question
                        MaskedImageT const&,            ///< image: in this image
                        bool,                           ///< horizontal: interpolate horizontally?
                        double                          ///< minval: minimum acceptable value
                                                                                  )
                {
                #if defined(SDSS)
                    BADCOLUMN defect;                    /* describe a bad column */
                    PIX *data;                           /* temp array to interpolate in */
                    int i;
                    int i0, i1;                          /* data corresponds to range of
                                                           {row,col} == [i0,i1] */
                    int ndata;                           /* dimension of data */
                    static int ndatamax = 40;            /* largest allowable defect. XXX */
                    int nrow, ncol;                      /* == reg->n{row,col} */
                    PIX *val;                            /* pointer to pixel (rowc, colc) */
                    int z1, z2;                          /* range of bad {row,columns} */
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2154 <a href="#553f6be7">553f6be7</a> -     </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2153 <a href="#7ad849f2">7ad849f2</a> + </div>
                    shAssert(badmask != NULL && badmask->type == shTypeGetFromName("OBJMASK"));
                    shAssert(reg != NULL && reg->type == TYPE_PIX);
                    nrow = reg->nrow;
                    ncol = reg->ncol;
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2159 <a href="#553f6be7">553f6be7</a> -     </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2158 <a href="#7ad849f2">7ad849f2</a> + </div>
                    if (horizontal) {
                        for (z1 = colc - 1; z1 >= 0; z1--) {
                            if (!phPixIntersectMask(badmask, z1, rowc)) {
                                break;
                            }
                        }
                        z1++;
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2167 <a href="#553f6be7">553f6be7</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2166 <a href="#7ad849f2">7ad849f2</a> + </div>
                        for (z2 = colc + 1; z2 < ncol; z2++) {
                            if (!phPixIntersectMask(badmask, z2, rowc)) {
                                break;
                            }
                        }
                        z2--;
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2174 <a href="#553f6be7">553f6be7</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2173 <a href="#7ad849f2">7ad849f2</a> + </div>
                        i0 = (z1 > 2) ? z1 - 2 : 0;       /* origin of available required data */
                        i1 = (z2 < ncol - 2) ? z2 + 2 : ncol - 1; /* end of "      "   "    "  */
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2177 <a href="#553f6be7">553f6be7</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2176 <a href="#7ad849f2">7ad849f2</a> + </div>
                        if (i0 < 2 || i1 >= ncol - 2) {    /* interpolation will fail */
                            return(-1);                    /* failure */
                        }
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2181 <a href="#553f6be7">553f6be7</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2180 <a href="#7ad849f2">7ad849f2</a> + </div>
                        ndata = (i1 - i0 + 1);
                        if (ndata > ndatamax) {
                            return(-1);                    /* failure */
                        }
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2186 <a href="#553f6be7">553f6be7</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2185 <a href="#7ad849f2">7ad849f2</a> + </div>
                        data = alloca(ndata*sizeof(PIX));
                        for (i = i0; i <= i1; i++) {
                            data[i - i0] = reg->ROWS[rowc][i];
                        }
                        val = &data[colc - i0];
                    } else {
                        for (z1 = rowc - 1; z1 >= 0; z1--) {
                            if (!phPixIntersectMask(badmask, colc, z1)) {
                                break;
                            }
                        }
                        z1++;
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2199 <a href="#553f6be7">553f6be7</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2198 <a href="#7ad849f2">7ad849f2</a> + </div>
                        for (z2 = rowc + 1; z2 < nrow; z2++) {
                            if (!phPixIntersectMask(badmask, colc, z2)) {
                                break;
                            }
                        }
                        z2--;
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2206 <a href="#553f6be7">553f6be7</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2205 <a href="#7ad849f2">7ad849f2</a> + </div>
                        i0 = (z1 > 2) ? z1 - 2 : 0;       /* origin of available required data */
                        i1 = (z2 < nrow - 2) ? z2 + 2 : nrow - 1; /* end of "      "   "    "  */
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2209 <a href="#553f6be7">553f6be7</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2208 <a href="#7ad849f2">7ad849f2</a> + </div>
                        if (i0 < 2 || i1 >= ncol - 2) {    /* interpolation will fail */
                            return(-1);                    /* failure */
                        }
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2213 <a href="#553f6be7">553f6be7</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2212 <a href="#7ad849f2">7ad849f2</a> + </div>
                        ndata = (i1 - i0 + 1);
                        if (ndata > ndatamax) {
                            return(-1);                    /* failure */
                        }
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2218 <a href="#553f6be7">553f6be7</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2217 <a href="#7ad849f2">7ad849f2</a> + </div>
                        data = alloca(ndata*sizeof(PIX));
                        for (i = i0; i <= i1; i++) {
                            data[i - i0] = reg->ROWS[i][colc];
                        }
                        val = &data[rowc - i0];
                    }
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2225 <a href="#553f6be7">553f6be7</a> -     </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2224 <a href="#7ad849f2">7ad849f2</a> + </div>
                    defect.x1 = z1 - i0;
                    defect.x2 = z2 - i0;
                    classify_defects(&defect, 1, ndata);
                    do_defect(&defect, 1, data, ndata, minval);
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2230 <a href="#553f6be7">553f6be7</a> -     </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2229 <a href="#7ad849f2">7ad849f2</a> + </div>
                    return(*val);
                #endif
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2233 <a href="#553f6be7">553f6be7</a> -     </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2232 <a href="#7ad849f2">7ad849f2</a> + </div>
                    return std::make_pair(false, std::numeric_limits<typename MaskedImageT::Image::Pixel>::min());
                }
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2236 <a href="#553f6be7">553f6be7</a> -     </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2235 <a href="#7ad849f2">7ad849f2</a> + </div>
                /************************************************************************************************************/
                //
                // Explicit instantiations
                //
                // \cond
                
                typedef float ImagePixel;
                
                template
                void interpolateOverDefects(image::MaskedImage<ImagePixel, image::MaskPixel> &image,
                                            lsst::afw::detection::Psf const &, std::vector<Defect::Ptr> &badList, double, bool
                                           );
                template
                std::pair<bool, ImagePixel> interp::singlePixel(int x, int y,
                                                                image::MaskedImage<ImagePixel, image::MaskPixel> const& image,
                                                                bool horizontal, double minval);
                //
                // Why do we need double images?
                //
                #if 1
                template
                void interpolateOverDefects(image::MaskedImage<double, image::MaskPixel> &image,
                                            lsst::afw::detection::Psf const &, std::vector<Defect::Ptr> &badList, double, bool
                                           );
                
                template
                std::pair<bool, double> interp::singlePixel(int x, int y,
                                                            image::MaskedImage<double, image::MaskPixel> const& image,
                                                            bool horizontal, double minval);
                
                #endif
                // \endcond
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2270 <a href="#dbbf5966">dbbf5966</a> - }}}</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
2269 <a href="#7ad849f2">7ad849f2</a> + }}} // lsst::meas::algorithms</div>
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="dbbf5966"/></a>dbbf5966</h3>

<pre>
commit dbbf59667511f3f3a5ba30bc7cb987c6fe3b6486
Author: rhl <rhl@git.lsstcorp.org>
Date:   Mon Feb 2 19:15:42 2009 +0000

    Work on CR code and doxygen fixes; #0
</pre>
<h3><a name="1e155218"/></a>1e155218</h3>

<pre>
commit 1e155218c49dd990bf0ad4ce08f9cc82c8f03672
Author: Steven Bickerton <steven.bickerton@gmail.com>
Date:   Tue Sep 9 14:46:10 2014 +0900

    untabify
</pre>
<h3><a name="9c77de98"/></a>9c77de98</h3>

<pre>
commit 9c77de985f7a709ce041915ec57a76210af6a47a
Author: rhl <rhl@git.lsstcorp.org>
Date:   Thu May 13 22:19:26 2010 +0000

    Interpolate over defects in the variance plane
</pre>
<h3><a name="553f6be7"/></a>553f6be7</h3>

<pre>
commit 553f6be71a44ec13d29ac40b4c41603254f77ba5
Author: bick <bick@git.lsstcorp.org>
Date:   Fri Oct 23 19:23:31 2009 +0000

    #819 clean-up.
</pre>
<h3><a name="cb64b3f6"/></a>cb64b3f6</h3>

<pre>
commit cb64b3f6cdba20367d333ba95852b15521150611
Author: dubcovsky <dubcovsky@git.lsstcorp.org>
Date:   Tue Apr 12 00:17:02 2011 +0000

    #1556 updates to meas_algorithms to match changes in afw. This revision fails tests
</pre>
<h3><a name="4d375e47"/></a>4d375e47</h3>

<pre>
commit 4d375e471cf0578e6d47b8c4f86d99ad126700df
Author: rhl <rhl@git.lsstcorp.org>
Date:   Fri Nov 28 21:01:14 2008 +0000

    Merged revisions 6510,6514-6532,6551,6554,6573-6574,6578-6579 via svnmerge (#490) from
    svn+ssh://svn.lsstcorp.org/DMS/meas/algorithms/tickets/490
    
    ........
      r6510 | rhl | 2008-11-25 13:50:24 -0500 (Tue, 25 Nov 2008) | 2 lines
    
      Work on ticket #490
    ........
      r6514 | rhl | 2008-11-25 13:56:39 -0500 (Tue, 25 Nov 2008) | 2 lines
    
      #490
    ........
      r6515 | rhl | 2008-11-25 13:56:48 -0500 (Tue, 25 Nov 2008) | 2 lines
    
      #490
    ........
      r6516 | rhl | 2008-11-25 13:56:55 -0500 (Tue, 25 Nov 2008) | 2 lines
    
      #490
    ........
      r6517 | rhl | 2008-11-25 13:57:04 -0500 (Tue, 25 Nov 2008) | 2 lines
    
      #490
    ........
      r6518 | rhl | 2008-11-25 13:58:55 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6519 | rhl | 2008-11-25 13:58:58 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6520 | rhl | 2008-11-25 13:59:02 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6521 | rhl | 2008-11-25 13:59:05 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6522 | rhl | 2008-11-25 14:04:54 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6523 | rhl | 2008-11-25 14:05:08 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6524 | rhl | 2008-11-25 14:05:11 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6525 | rhl | 2008-11-25 14:05:15 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6526 | rhl | 2008-11-25 14:15:43 -0500 (Tue, 25 Nov 2008) | 1 line
    
      Need to be able to import lsst.meas.algorithms
    ........
      r6527 | rhl | 2008-11-25 14:16:21 -0500 (Tue, 25 Nov 2008) | 1 line
    
      Need to be able to import lsst.meas.algorithms
    ........
      r6528 | rhl | 2008-11-25 14:16:28 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6529 | rhl | 2008-11-25 14:22:35 -0500 (Tue, 25 Nov 2008) | 1 line
    
      We didn't really want lsst.detection (but that was where it was in DMS/detection)
    ........
      r6530 | rhl | 2008-11-25 14:30:30 -0500 (Tue, 25 Nov 2008) | 1 line
    
      Needed for .paf files
    ........
      r6531 | rhl | 2008-11-25 14:31:14 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6532 | rhl | 2008-11-25 14:31:17 -0500 (Tue, 25 Nov 2008) | 1 line
    
      #490
    ........
      r6551 | rhl | 2008-11-25 20:01:04 -0500 (Tue, 25 Nov 2008) | 1 line
    
      Got code back to the shape it was in while at detection/trunk
    ........
      r6554 | rhl | 2008-11-25 21:16:17 -0500 (Tue, 25 Nov 2008) | 1 line
    
      Initial version of FootprintFunctor that passes tests (base class needs to move to afw)
    ........
      r6573 | rhl | 2008-11-26 08:19:17 -0500 (Wed, 26 Nov 2008) | 1 line
    
      Improve FootprintFunctor.apply() to be a little more efficient
    ........
      r6574 | rhl | 2008-11-26 09:45:45 -0500 (Wed, 26 Nov 2008) | 1 line
    
      Abolish the Measure object; it didn't make sense as a unit of packaging
    ........
      r6578 | rhl | 2008-11-26 09:58:15 -0500 (Wed, 26 Nov 2008) | 1 line
    
      Moved FootprintFunctor to afw
    ........
      r6579 | rhl | 2008-11-26 11:14:04 -0500 (Wed, 26 Nov 2008) | 1 line
    
      Use FootprintFunctor to remove CRs
    ........
</pre>
<h3><a name="ccbcb0c9"/></a>ccbcb0c9</h3>

<pre>
commit ccbcb0c979c79c109d74fd04a7ed86624b6e739a
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Thu May 22 13:38:55 2014 -0400

    Add option to use the fallback value at the edge of the image
    
    Also unpack variables to allow us to implement this (but don't do so yet)
</pre>
<h3><a name="c5720a8e"/></a>c5720a8e</h3>

<pre>
commit c5720a8ef2c923bc66513bbc602641f7387024d2
Author: dgehrig <dgehrig@git.lsstcorp.org>
Date:   Sun Jul 11 23:51:33 2010 +0000

    adding copyright notices
</pre>
<h3><a name="2b4f0943"/></a>2b4f0943</h3>

<pre>
commit 2b4f09435037b00be884500bb6fe1745e2ba2968
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Wed May 28 00:16:10 2014 +0200

    Improved comment on defectType
</pre>
<h3><a name="efbf89a2"/></a>efbf89a2</h3>

<pre>
commit efbf89a221074e8028195cefc54bb15b94e9d395
Author: rhl <rhl@git.lsstcorp.org>
Date:   Wed Oct 21 20:28:26 2009 +0000

    Fixed many -- but not all -- parasoft complaints
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="7ad849f2"/></a>7ad849f2</h3>

<pre>
commit 7ad849f28f2906db1696453f8830750b600b325e
Author: Lauren MacArthur <lauren@astro.princeton.edu>
Date:   Tue Feb 17 18:42:36 2015 -0500

    Remove white space, fix copyright year, and minor formatting
</pre>
<h3><a name="cb64b3f6"/></a>cb64b3f6</h3>

<pre>
commit cb64b3f6cdba20367d333ba95852b15521150611
Author: dubcovsky <dubcovsky@git.lsstcorp.org>
Date:   Tue Apr 12 00:17:02 2011 +0000

    #1556 updates to meas_algorithms to match changes in afw. This revision fails tests
</pre>
</div>


[Return to list](#homelist)
# <a name="include/lsst/meas/algorithms/shapelet/Form.h"/></a>include/lsst/meas/algorithms/shapelet/Form.h
### Diff:

<pre>
                #ifndef MeasAlgoShapeletForm_H
                #define MeasAlgoShapeletForm_H
                
                // Formatting for simplified stream output
                // see Stroustrup(2000), p. 635
                
                #include <complex>
                #include <sstream>
                #include <iostream>
                #include <string>
                
                namespace lsst {
                namespace meas {
                namespace algorithms {
                namespace shapelet {
                
                    template <typename T> class BoundForm;
                
                    class Form 
                    {
                    public:
                        Form() : 
                            _prc(6), _wdt(0), _fmt(), _base(std::ios_base::dec),
                            _just(std::ios_base::left), _newFillCh(0),
                            _doUpper(0), _doPlus(0), _doTrail(0), _doBoolAlpha(0),
                            _nTrail(1), _trailCh(' ')  
                        {}
                
                        template <typename T> BoundForm<T> operator()(T val) const;
                
                        Form& prec(int p) { _prc = p; return *this; }
                
                        Form& sci() { _fmt = std::ios_base::scientific; return *this; }
                        Form& fix() { _fmt = std::ios_base::fixed; return *this; }
                        Form& gen() { _fmt = ~std::ios_base::floatfield; return *this; }
                
                        Form& width(int w) { _wdt = w; return *this; }
                        Form& fill(char c) { _newFillCh = c; return *this; }
                
                        Form& dec() { _base = std::ios_base::dec; return *this; }
                        Form& oct() { _base = std::ios_base::oct; return *this; }
                        Form& hex() { _base = std::ios_base::hex; return *this; }
                
                        Form& left() { _just = std::ios_base::left; return *this; }
                        Form& right() { _just = std::ios_base::right; return *this; }
                        Form& internal() { _just = std::ios_base::internal; return *this; }
                
                        Form& uppercase(bool b=true) { _doUpper = b?1:-1; return *this; }
                        Form& showpos(bool b=true) { _doPlus = b?1:-1; return *this; }
                        Form& showpoint(bool b=true) { _doTrail = b?1:-1; return *this; }
                        Form& boolalpha(bool b=true) { _doBoolAlpha = b?1:-1; return *this; }
                
                        Form& trail(int n, char ch=' ') 
                        { _nTrail = n; _trailCh = ch; return *this; }
                
                    private:
                        template <typename T> 
                        friend std::ostream& operator<<(std::ostream&, const BoundForm<T>&);
                
                        friend void setupFloat(std::ostream&, const Form&);
                        friend void setupInt(std::ostream&, const Form&);
                
                        int _prc; // precision
                        int _wdt; // width, 0 means as wide as necessary
                        std::ios_base::fmtflags _fmt; // general sci, or fixed
                        std::ios_base::fmtflags _base; // dec, hex, oct
                        std::ios_base::fmtflags _just; // left, right, internal fill
                        char _newFillCh; // fill character
                        int _doUpper; // +1 to have uppercase E,X, -1 turn off, (0 leave as is)
                        int _doPlus; // +1 to have explicit plus for positive values, -1 off, 0 same
                        int _doTrail; // +1 to write trailing zeros, -1 off, 0 same
                        int _doBoolAlpha; // +1 to write "true","false", -1 off, 0 same
                        int _nTrail; // number of spaces after output
                        char _trailCh; // character of trailing "spaces"
                
                    };
                
                    template <typename T>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
79   <a href="#9fde0d01">9fde0d01</a> -     struct BoundForm </div>
              ?      ^^^^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
79   <a href="#527cb11e">527cb11e</a> +     class BoundForm </div>
              ?     +++ ^
                    {
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
81   <a href="#527cb11e">527cb11e</a> +     public:</div>
                        const Form& f;
                        T val;
                        BoundForm(const Form& f_, T val_) : f(f_), val(val_) {}
                    };
                
                    template <typename T>
                    inline BoundForm<T> Form::operator()(T val) const 
                    { return BoundForm<T>(*this,val); }
                
                    inline void setupFloat(std::ostream& s, const Form& f)
                    {
                        s.precision(f._prc);
                        s.setf(f._fmt,std::ios_base::floatfield);
                        s.setf(f._just,std::ios_base::adjustfield);
                        if (f._wdt) s.width(f._wdt);
                        if (f._newFillCh) s.fill(f._newFillCh);
                        if (f._doUpper && f._fmt == std::ios_base::scientific) {
                            if (f._doUpper>0) s.setf(std::ios_base::uppercase);
                            else s.unsetf(std::ios_base::uppercase); 
                        }
                        if (f._doPlus) {
                            if (f._doPlus>0) s.setf(std::ios_base::showpos); 
                            else s.unsetf(std::ios_base::showpos); 
                        }
                        if (f._doTrail) {
                            if (f._doTrail>0) s.setf(std::ios_base::showpoint); 
                            else s.unsetf(std::ios_base::showpoint); 
                        }
                    }
                
                    inline void setupInt(std::ostream& s, const Form& f)
                    {
                        s.setf(f._just,std::ios_base::adjustfield);
                        s.setf(f._base,std::ios_base::basefield);
                        if (f._wdt) s.width(f._wdt);
                        if (f._newFillCh) s.fill(f._newFillCh);
                        if (f._doUpper && f._base == std::ios_base::hex) {
                            if (f._doUpper>0) s.setf(std::ios_base::uppercase); 
                            else s.unsetf(std::ios_base::uppercase); 
                        }
                        if (f._doPlus) {
                            if (f._doPlus>0) s.setf(std::ios_base::showpos); 
                            else s.unsetf(std::ios_base::showpos); 
                        }
                        if (f._base != std::ios_base::dec) s.setf(std::ios_base::showbase);
                    }
                
                    inline void setup(std::ostream& os, const BoundForm<double>& bf)
                    { setupFloat(os,bf.f); }
                
                    inline void setup(std::ostream& os, const BoundForm<long double>& bf)
                    { setupFloat(os,bf.f); }
                
                    inline void setup(std::ostream& os, const BoundForm<float>& bf)
                    { setupFloat(os,bf.f); }
                
                    inline void setup(std::ostream& os, const BoundForm<std::complex<double> >& bf)
                    { setupFloat(os,bf.f); }
                
                    inline void setup(
                        std::ostream& os, const BoundForm<std::complex<long double> >& bf)
                    { setupFloat(os,bf.f); }
                
                    inline void setup(std::ostream& os, const BoundForm<std::complex<float> >& bf)
                    { setupFloat(os,bf.f); }
                
                    inline void setup(std::ostream& os, const BoundForm<int>& bf)
                    { setupInt(os,bf.f); }
                
                    inline void setup(std::ostream& os, const BoundForm<short>& bf)
                    { setupInt(os,bf.f); }
                
                    inline void setup(std::ostream& os, const BoundForm<long>& bf)
                    { setupInt(os,bf.f); }
                
                    inline void setup(std::ostream& os, const BoundForm<unsigned int>& bf)
                    { setupInt(os,bf.f); }
                
                    inline void setup(std::ostream& os, const BoundForm<unsigned short>& bf)
                    { setupInt(os,bf.f); }
                
                    inline void setup(std::ostream& os, const BoundForm<unsigned long>& bf)
                    { setupInt(os,bf.f); }
                
                    template <typename T>
                    inline void setup(std::ostream& os, const BoundForm<T>& bf)
                    { setupFloat(os,bf.f); }
                
                    template <typename T>
                    inline std::ostream& operator<<(std::ostream& os, const BoundForm<T>& bf)
                    {
                        std::ostringstream s;
                        setup(s,bf);
                        s << bf.val;
                        if (bf.f._nTrail>0) s << std::string(bf.f._nTrail,bf.f._trailCh);
                        os << s.str();
                        return os;
                    }
                
                }}}}
                
                #endif
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="9fde0d01"/></a>9fde0d01</h3>

<pre>
commit 9fde0d01a91f9461eb12e264b157ee2088f5eb88
Author: jarvis <jarvis@git.lsstcorp.org>
Date:   Wed Apr 28 00:12:42 2010 +0000

    Forgot to svn add the .h files, so adding them now.  Also, made some changes related to changes in afw API (like use geom::PointD, etc.).
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="527cb11e"/></a>527cb11e</h3>

<pre>
commit 527cb11e46e2113750cd6199b96c65af6fcbfc1c
Author: Russell Owen <rowen@uw.edu>
Date:   Tue Oct 7 08:58:41 2014 -0700

    Minor change struct->class to eliminate compiler warning
</pre>
</div>


[Return to list](#homelist)
# <a name="src/shapelet/ConfigFile.cc"/></a>src/shapelet/ConfigFile.cc
### Diff:

<pre>
                
                #include "lsst/meas/algorithms/shapelet/ConfigFile.h"
                
                namespace lsst {
                namespace meas {
                namespace algorithms {
                namespace shapelet {
                
                ConfigFile::ConfigFile() :
                    _delimiter("="), _comment("#"), _include("+"), _sentry("EndConfigFile")
                {
                    // Construct an empty ConfigFile
                }
                
                ConfigFile::ConfigFile( 
                    const std::string fileName, const std::string delimiter,
                    const std::string comment, const std::string inc, const std::string sentry ) : 
                    _delimiter(delimiter), _comment(comment), _include(inc), _sentry(sentry)
                {
                    // Construct a ConfigFile, getting keys and values from given file
                
                    std::ifstream in( fileName.c_str() );
                
                    if( !in ) {
                #ifdef NOTHROW
                        std::cerr<<"File not found: "<<fileName<<std::endl; 
                        exit(1); 
                #else
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
29   <a href="#7134f640">7134f640</a> -         throw FileNotFoundException(fileName);</div>
              ?                            ^^^^^^ ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
29   <a href="#ed246562">ed246562</a> +         throw FileNotFoundError(fileName);</div>
              ?                            ^^ ^
                #endif
                    }
                
                    in >> (*this);
                }
                
                void ConfigFile::load( 
                    const std::string fileName, const std::string delimiter,
                    const std::string comment, const std::string inc, const std::string sentry )
                {
                    // Construct a ConfigFile, getting keys and values from given file
                
                    // the old values
                    std::string delimiter1 = _delimiter;
                    std::string comment1 = _comment;
                    std::string inc1 = _include;
                    std::string sentry1 = _sentry;
                
                    if (delimiter != "") _delimiter = delimiter;
                    if (comment != "") _comment = comment;
                    if (inc != "") _include = inc;
                    if (sentry != "") _sentry = sentry;
                
                    std::ifstream in( fileName.c_str() );
                
                    if( !in ) {
                #ifdef NOTHROW
                        std::cerr<<"File not found: "<<fileName<<std::endl; 
                        exit(1); 
                #else
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
60   <a href="#7134f640">7134f640</a> -         throw FileNotFoundException(fileName);</div>
              ?                            ^^^^^^ ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
60   <a href="#ed246562">ed246562</a> +         throw FileNotFoundError(fileName);</div>
              ?                            ^^ ^
                #endif
                    }
                
                    in >> (*this);
                
                    _delimiter = delimiter1;
                    _comment = comment1;
                    _include = inc1;
                    _sentry = sentry1;
                }
                
                ConvertibleString& ConfigFile::getNoCheck( const std::string& key )
                {
                    std::string key2 = key;
                    trim(key2);
                    return _contents[key2]; 
                }
                
                ConvertibleString ConfigFile::get( const std::string& key ) const
                {
                    std::string key2 = key;
                    trim(key2);
                    MapCIt p = _contents.find(key2);
                    if (p == _contents.end()) {
                #ifdef NOTHROW
                        std::cerr<<"Key not found: "<<key2<<std::endl; 
                        exit(1); return key; 
                #else
                        throw ParameterException(
                            "ConfigFile error: key "+key2+" not found");
                #endif
                    } else {
                        return p->second;
                    }
                }
                
                // special string getter.  This is really for the python
                // bindings for just viewing quickly the contents.  Hence
                // also throwing const char* for now, which swig can easily
                // deal with
                std::string ConfigFile::getstr(const std::string key) const throw (const char*) {
                  MapCIt p = _contents.find(key);
                
                  if (p == _contents.end()) {
                    std::stringstream err;
                    err<<"ConfigFile error: key '"<<key<<"' not found";
                    throw err.str().c_str();
                  }
                
                  std::string val = get(key);
                  return val;
                }
                // with default value
                std::string ConfigFile::getstr(
                    const std::string key, 
                    const std::string defval) {
                  MapCIt p = _contents.find(key);
                
                  std::string val;
                  if (p == _contents.end()) {
                    val = defval;
                  } else {
                    val = get(key);
                  }
                  return val;
                }
                
                
                
                
                void ConfigFile::remove( const std::string& key )
                {
                    // Remove key and its value
                    _contents.erase( _contents.find( key ) );
                    return;
                }
                
                
                bool ConfigFile::keyExists( const std::string& key ) const
                {
                    // Indicate whether key is found
                    MapCIt p = _contents.find( key );
                    return ( p != _contents.end() );
                }
                
                
                void ConfigFile::trim( std::string& s )
                {
                    // Remove leading and trailing whitespace
                    std::string whiteSpace = " \n\t\v\r\f";
                    s.erase( 0, s.find_first_not_of(whiteSpace) );
                    s.erase( s.find_last_not_of(whiteSpace) + 1);
                }
                
                
                void ConfigFile::write(std::ostream& os) const
                {
                    // Save a ConfigFile to os
                    for(MapCIt p = _contents.begin(); p != _contents.end(); ++p ) {
                        os << p->first << " " << _delimiter << " ";
                        os << p->second << std::endl;
                    }
                }
                
                void ConfigFile::writeAsComment(std::ostream& os) const
                {
                    // Save a ConfigFile to os
                    for(MapCIt p = _contents.begin(); p != _contents.end(); ++p ) {
                        std::string f = p->first;
                        std::string s = p->second;
                        std::replace(f.begin(),f.end(),'\n',' ');
                        std::replace(s.begin(),s.end(),'\n',' ');
                        os << _comment << " " << f << " " << _delimiter << " ";
                        os << s << std::endl;
                    }
                }
                
                void ConfigFile::read(std::istream& is)
                {
                    // Load a ConfigFile from is
                    // Read in keys and values, keeping internal whitespace
                    const std::string& delim = _delimiter;  // separator
                    const std::string& comm = _comment;    // comment
                    const std::string& inc = _include;      // include directive
                    const std::string& sentry = _sentry;     // end of file sentry
                    const std::string::size_type skip = delim.size(); // length of separator
                
                    std::string nextLine = "";  
                    // might need to read ahead to see where value ends
                
                    while( is || nextLine.size() > 0 ) {
                        // Read an entire line at a time
                        std::string line;
                        if( nextLine.size() > 0 ) {
                            line = nextLine;  // we read ahead; use it now
                            nextLine = "";
                        } else {
                            std::getline( is, line );
                        }
                
                        // Ignore comments
                        line = line.substr( 0, line.find(comm) );
                
                        // Remove leading and trailing whitespace
                        trim(line);
                
                        // If line is blank, go on to next line.
                        if (line.size() == 0) continue;
                
                        // Check for include directive (only at start of line)
                        if (line.find(inc) == 0) { 
                            line.erase(0,inc.size());
                            std::stringstream ss(line);
                            std::string fileName;
                            ss >> fileName;
                            load(fileName);
                            // implcitly skip the rest of the line.
                            continue;
                        }
                
                        // Check for end of file sentry
                        if( sentry != "" && line.find(sentry) != std::string::npos ) return;
                
                        // Parse the line if it contains a delimiter
                        std::string::size_type delimPos = line.find( delim );
                        if( delimPos < std::string::npos ) {
                            // Extract the key
                            std::string key = line.substr( 0, delimPos );
                            line.replace( 0, delimPos+skip, "" );
                
                            // See if value continues on the next line
                            // Stop at blank line, next line with a key, end of stream,
                            // or end of file sentry
                            bool terminate = false;
                            while( !terminate && is ) {
                                std::getline( is, nextLine );
                                terminate = true;
                
                                std::string nextLineCopy = nextLine;
                                ConfigFile::trim(nextLineCopy);
                                if( nextLineCopy == "" ) continue;
                
                                nextLine = nextLine.substr( 0, nextLine.find(comm) );
                                if( nextLine.find(delim) != std::string::npos )
                                    continue;
                                if( sentry != "" && nextLine.find(sentry) != std::string::npos )
                                    continue;
                
                                nextLineCopy = nextLine;
                                ConfigFile::trim(nextLineCopy);
                                if( nextLineCopy != "" ) line += "\n";
                                line += nextLine;
                                terminate = false;
                            }
                
                            // Store key and value
                            ConfigFile::trim(key);
                            ConfigFile::trim(line);
                            _contents[key] = line;  // overwrites if key is repeated
                        }
                    }
                }
                
                }}}}
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="7134f640"/></a>7134f640</h3>

<pre>
commit 7134f6402621b16360a1d04a296ff19cc9613f41
Author: jarvis <jarvis@git.lsstcorp.org>
Date:   Thu Feb 17 05:04:29 2011 +0000

    Merged in latest version of the files in the shapelet subdirectories.
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="ed246562"/></a>ed246562</h3>

<pre>
commit ed2465629cb2a0b4fe5aedeb9f447da02cf38736
Author: Russell Owen <rowen@uw.edu>
Date:   Tue Jun 17 16:16:40 2014 -0700

    Renamed exceptions
</pre>
</div>


[Return to list](#homelist)
# <a name="python/lsst/meas/algorithms/secondMomentStarSelector.py"/></a>python/lsst/meas/algorithms/secondMomentStarSelector.py
### Diff:

<pre>
                # 
                # LSST Data Management System
                # Copyright 2008, 2009, 2010 LSST Corporation.
                # 
                # This product includes software developed by the
                # LSST Project (http://www.lsst.org/).
                #
                # This program is free software: you can redistribute it and/or modify
                # it under the terms of the GNU General Public License as published by
                # the Free Software Foundation, either version 3 of the License, or
                # (at your option) any later version.
                # 
                # This program is distributed in the hope that it will be useful,
                # but WITHOUT ANY WARRANTY; without even the implied warranty of
                # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                # GNU General Public License for more details.
                # 
                # You should have received a copy of the LSST License Statement and 
                # the GNU General Public License along with this program.  If not, 
                # see <http://www.lsstcorp.org/LegalNotices/>.
                #
                import collections
                import math
                
                import numpy
                
                import lsst.pex.config as pexConfig
                import lsst.afw.detection as afwDetection
                import lsst.afw.display.ds9 as ds9
                import lsst.afw.image as afwImage
                import lsst.afw.math as afwMath
                import lsst.afw.table as afwTable
                import lsst.afw.geom as afwGeom
                import lsst.afw.geom.ellipses as geomEllip
                import lsst.afw.cameraGeom as cameraGeom
                from . import algorithmsLib
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
37   <a href="#3c88733d">3c88733d</a> - from . import measurement</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
37   <a href="#877b9389">877b9389</a> + from lsst.meas.base.sfm import SingleFrameMeasurementTask, SingleFrameMeasurementConfig</div>
                
                class SecondMomentStarSelectorConfig(pexConfig.Config):
                    fluxLim = pexConfig.Field(
                        doc = "specify the minimum psfFlux for good Psf Candidates",
                        dtype = float,
                        default = 12500.0,
                        check = lambda x: x >= 0.0,
                    )
                    fluxMax = pexConfig.Field(
                        doc = "specify the maximum psfFlux for good Psf Candidates (ignored if == 0)",
                        dtype = float,
                        default = 0.0,
                        check = lambda x: x >= 0.0,
                    )
                    clumpNSigma = pexConfig.Field(
                        doc = "candidate PSF's shapes must lie within this many sigma of the average shape",
                        dtype = float,
                        default = 2.0,
                        check = lambda x: x >= 0.0,
                    )
                    kernelSize = pexConfig.Field(
                        doc = "size of the kernel to create",
                        dtype = int,
                        default = 21,
                    )
                    borderWidth = pexConfig.Field(
                        doc = "number of pixels to ignore around the edge of PSF candidate postage stamps",
                        dtype = int,
                        default = 0,
                    )
                    badFlags = pexConfig.ListField(
                        doc = "List of flags which cause a source to be rejected as bad",
                        dtype = str,
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
71   <a href="#6b2aed4c">6b2aed4c</a> -         default = ["initial.flags.pixel.edge",</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
72   <a href="#6b2aed4c">6b2aed4c</a> -                    "initial.flags.pixel.interpolated.center",</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
73   <a href="#6b2aed4c">6b2aed4c</a> -                    "initial.flags.pixel.saturated.center",</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
74   <a href="#6b2aed4c">6b2aed4c</a> -                    "initial.flags.pixel.cr.center",</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
71   <a href="#877b9389">877b9389</a> +         default = ["base_PixelFlags_flag_edge",</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
72   <a href="#877b9389">877b9389</a> +                    "base_PixelFlags_flag_interpolatedCenter",</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
73   <a href="#877b9389">877b9389</a> +                    "base_PixelFlags_flag_saturatedCenter",</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
74   <a href="#877b9389">877b9389</a> +                    "base_PixelFlags_flag_crCenter",</div>
                                   ]
                        )
                    histSize = pexConfig.Field(
                        doc = "Number of bins in moment histogram",
                        dtype = int,
                        default = 64,
                        check = lambda x: x > 0,
                        )
                    histMomentMax = pexConfig.Field(
                        doc = "Maximum moment to consider",
                        dtype = float,
                        default = 100.0,
                        check = lambda x: x > 0,
                        )
                    histMomentMaxMultiplier = pexConfig.Field(
                        doc = "Multiplier of mean for maximum moments histogram range",
                        dtype = float,
                        default = 5.0,
                        check = lambda x: x > 0,
                        )
                    histMomentClip = pexConfig.Field(
                        doc = "Clipping threshold for moments histogram range",
                        dtype = float,
                        default = 5.0,
                        check = lambda x: x > 0,
                        )
                    histMomentMinMultiplier = pexConfig.Field(
                        doc = "Multiplier of mean for minimum moments histogram range",
                        dtype = float,
                        default = 2.0,
                        check = lambda x: x > 0,
                        )
                
                Clump = collections.namedtuple('Clump', ['peak', 'x', 'y', 'ixx', 'ixy', 'iyy', 'a', 'b', 'c'])
                
                class CheckSource(object):
                    """A functor to check whether a source has any flags set that should cause it to be labeled bad."""
                
                    def __init__(self, table, badFlags, fluxLim, fluxMax):
                        self.keys = [table.getSchema().find(name).key for name in badFlags]
                        self.keys.append(table.getCentroidFlagKey())
                        self.fluxLim = fluxLim
                        self.fluxMax = fluxMax
                
                    def __call__(self, source):
                        for k in self.keys:
                            if source.get(k):
                                return False
                        if self.fluxLim != None and source.getPsfFlux() < self.fluxLim: # ignore faint objects
                            return False
                        if self.fluxMax != 0.0 and source.getPsfFlux() > self.fluxMax: # ignore bright objects
                            return False
                        return True
                
                class SecondMomentStarSelector(object):
                    ConfigClass = SecondMomentStarSelectorConfig
                
                    def __init__(self, config):
                        """Construct a star selector that uses second moments
                        
                        This is a naive algorithm and should be used with caution.
                        
                        @param[in] config: An instance of SecondMomentStarSelectorConfig
                        """
                        self.config = config
                
                    def selectStars(self, exposure, catalog, matches=None):
                        """Return a list of PSF candidates that represent likely stars
                        
                        A list of PSF candidates may be used by a PSF fitter to construct a PSF.
                        
                        @param[in] exposure: the exposure containing the sources
                        @param[in] catalog: a SourceCatalog containing sources that may be stars
                        @param[in] matches: astrometric matches; ignored by this star selector
                        
                        @return psfCandidateList: a list of PSF candidates.
                        """
                        import lsstDebug
                        display = lsstDebug.Info(__name__).display
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
154  <a href="#db780c9d">db780c9d</a> + </div>
                        displayExposure = lsstDebug.Info(__name__).displayExposure     # display the Exposure + spatialCells
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
155  <a href="#db780c9d">db780c9d</a> - </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
156  <a href="#877b9389">877b9389</a> +         </div>
                        isGoodSource = CheckSource(catalog.getTable(), self.config.badFlags, self.config.fluxLim,
                                                   self.config.fluxMax)
                
                        detector = exposure.getDetector()
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
160  <a href="#1e155218">1e155218</a> -         distorter = None</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
161  <a href="#1e155218">1e155218</a> -         xy0 = afwGeom.Point2D(0,0)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
162  <a href="#1e155218">1e155218</a> -         if not detector is None:</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
163  <a href="#3335fa28">3335fa28</a> -             # Note: we use getCenter() instead of getCenterPixel() because getCenterPixel() assumes</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
164  <a href="#3335fa28">3335fa28</a> -             # that CCDs are laid out in a regular grid, which may not be true (e.g., HSC).</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
165  <a href="#3335fa28">3335fa28</a> -             pixSize = detector.getPixelSize()</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
166  <a href="#3335fa28">3335fa28</a> -             cPix = detector.getCenter().getPixels(pixSize)            </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
167  <a href="#3335fa28">3335fa28</a> -             detSize = detector.getSize().getPixels(pixSize)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
168  <a href="#c69f4b13">c69f4b13</a> -             if numpy.isfinite(detSize[0]*detSize[1]):</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
169  <a href="#c69f4b13">c69f4b13</a> -                 xy0.setX(cPix[0] - int(0.5*detSize[0]))</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
170  <a href="#c69f4b13">c69f4b13</a> -                 xy0.setY(cPix[1] - int(0.5*detSize[1]))</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
171  <a href="#1e155218">1e155218</a> -             distorter = detector.getDistortion()</div>
                
                        mi = exposure.getMaskedImage()
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
174  <a href="#1e155218">1e155218</a> -         </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
175  <a href="#45966371">45966371</a> -         if display and displayExposure:</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
176  <a href="#45966371">45966371</a> -             frame = 0</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
177  <a href="#45966371">45966371</a> -             ds9.mtv(mi, frame=frame, title="PSF candidates")</div>
                        #
                        # Create an Image of Ixx v. Iyy, i.e. a 2-D histogram
                        #
                
                        # Use stats on our Ixx/yy values to determine the xMax/yMax range for clump image
                        iqqList = []
                        for s in catalog:
                            ixx, iyy = s.getIxx(), s.getIyy()
                            # ignore NaN and unrealistically large values
                            if (ixx == ixx and ixx < self.config.histMomentMax and
                                iyy == iyy and iyy < self.config.histMomentMax and
                                isGoodSource(s)):
                                iqqList.append(s.getIxx())
                                iqqList.append(s.getIyy())
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
192  <a href="#45966371">45966371</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
193  <a href="#45966371">45966371</a> -         try:</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
194  <a href="#45966371">45966371</a> -             stat = afwMath.makeStatistics(iqqList, afwMath.MEANCLIP | afwMath.STDEVCLIP | afwMath.MAX)</div>
              ? ----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
177  <a href="#23486076">23486076</a> +         stat = afwMath.makeStatistics(iqqList, afwMath.MEANCLIP | afwMath.STDEVCLIP | afwMath.MAX)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
195  <a href="#45966371">45966371</a> -         except Exception, e:</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
196  <a href="#45966371">45966371</a> -             raise RuntimeError("Unable to measure image statistics in secondMomentStarSelector:\t %s" % e)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
197  <a href="#45966371">45966371</a> - </div>
                        iqqMean = stat.getValue(afwMath.MEANCLIP)
                        iqqStd = stat.getValue(afwMath.STDEVCLIP)
                        iqqMax = stat.getValue(afwMath.MAX)
                
                        iqqLimit = max(iqqMean + self.config.histMomentClip*iqqStd,
                                       self.config.histMomentMaxMultiplier*iqqMean)
                        # if the max value is smaller than our range, use max as the limit, but don't go below N*mean
                        if iqqLimit > iqqMax:
                            iqqLimit = max(self.config.histMomentMinMultiplier*iqqMean, iqqMax)
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
207  <a href="#23486076">23486076</a> -             </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
187  <a href="#e9484f7d">e9484f7d</a> + </div>
                        psfHist = _PsfShapeHistogram(detector=detector, xSize=self.config.histSize, ySize=self.config.histSize,
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
209  <a href="#32fb7e74">32fb7e74</a> -                                      ixxMax=iqqLimit, iyyMax=iqqLimit, xy0=xy0)</div>
              ?                                                                      ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
189  <a href="#0332997a">0332997a</a> +                                      ixxMax=iqqLimit, iyyMax=iqqLimit)</div>
                
                        if display and displayExposure:
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
212  <a href="#45966371">45966371</a> -             if False:                   # displayed above</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
192  <a href="#845de94d">845de94d</a> +             frame = 0</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
213  <a href="#45966371">45966371</a> -                 ds9.mtv(mi, frame=frame, title="PSF candidates")</div>
              ? ----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
193  <a href="#845de94d">845de94d</a> +             ds9.mtv(mi, frame=frame, title="PSF candidates")</div>
                    
                        with ds9.Buffering():
                            for source in catalog:
                                if isGoodSource(source):
                                    if psfHist.insert(source): # n.b. this call has the side effect of inserting
                                         ctype = ds9.GREEN # good
                                    else:
                                         ctype = ds9.MAGENTA # rejected
                                else:
                                    ctype = ds9.RED         # bad
                
                                if display and displayExposure:
                                    ds9.dot("o", source.getX() - mi.getX0(),
                                            source.getY() - mi.getY0(), frame=frame, ctype=ctype)
                
                        clumps = psfHist.getClumps(display=display)
                
                        #
                        # Go through and find all the PSF-like objects
                        #
                        # We'll split the image into a number of cells, each of which contributes only
                        # one PSF candidate star
                        #
                        psfCandidateList = []
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
218  <a href="#0332997a">0332997a</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
219  <a href="#0332997a">0332997a</a> +         pixToTanXYTransform = None</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
220  <a href="#0332997a">0332997a</a> +         if detector is not None:</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
221  <a href="#0332997a">0332997a</a> +             tanSys = detector.makeCameraSys(cameraGeom.TAN_PIXELS)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
222  <a href="#bebc9415">bebc9415</a> +             pixToTanXYTransform = detector.getTransformMap().get(tanSys)</div>
                    
                        # psf candidate shapes must lie within this many RMS of the average shape
                        # N.b. if Ixx == Iyy, Ixy = 0 the criterion is
                        # dx^2 + dy^2 < self.config.clumpNSigma*(Ixx + Iyy) == 2*self.config.clumpNSigma*Ixx
                        for source in catalog:
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
228  <a href="#e9484f7d">e9484f7d</a> +             if not isGoodSource(source): continue</div>
                            Ixx, Ixy, Iyy = source.getIxx(), source.getIxy(), source.getIyy()
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
244  <a href="#1e155218">1e155218</a> -             if distorter:</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
245  <a href="#1e155218">1e155218</a> -                 xpix, ypix = source.getX() + xy0.getX(), source.getY() + xy0.getY()</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
246  <a href="#1e155218">1e155218</a> -                 p = afwGeom.Point2D(xpix, ypix)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
230  <a href="#0332997a">0332997a</a> +             if pixToTanXYTransform:</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
231  <a href="#0332997a">0332997a</a> +                 p = afwGeom.Point2D(source.getX(), source.getY())</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
232  <a href="#0332997a">0332997a</a> +                 linTransform = pixToTanXYTransform.linearizeForwardTransform(p).getLinear()</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
247  <a href="#1e155218">1e155218</a> -                 m = distorter.undistort(p, geomEllip.Quadrupole(Ixx, Iyy, Ixy), detector)</div>
              ?                    -----------------------                                    -----------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
233  <a href="#0332997a">0332997a</a> +                 m = geomEllip.Quadrupole(Ixx, Iyy, Ixy)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
234  <a href="#0332997a">0332997a</a> +                 m.transform(linTransform)</div>
                                Ixx, Iyy, Ixy = m.getIxx(), m.getIyy(), m.getIxy()
                            
                            x, y = psfHist.momentsToPixel(Ixx, Iyy)
                            for clump in clumps:
                                dx, dy = (x - clump.x), (y - clump.y)
                
                                if math.sqrt(clump.a*dx*dx + 2*clump.b*dx*dy + clump.c*dy*dy) < 2*self.config.clumpNSigma:
                                    # A test for > would be confused by NaN
                                    if not isGoodSource(source):
                                        continue
                                    try:
                                        psfCandidate = algorithmsLib.makePsfCandidate(source, exposure)
                                        
                                        # The setXXX methods are class static, but it's convenient to call them on
                                        # an instance as we don't know Exposure's pixel type
                                        # (and hence psfCandidate's exact type)
                                        if psfCandidate.getWidth() == 0:
                                            psfCandidate.setBorderWidth(self.config.borderWidth)
                                            psfCandidate.setWidth(self.config.kernelSize + 2*self.config.borderWidth)
                                            psfCandidate.setHeight(self.config.kernelSize + 2*self.config.borderWidth)
                
                                        im = psfCandidate.getMaskedImage().getImage()
                                        if not numpy.isfinite(afwMath.makeStatistics(im, afwMath.MAX).getValue()):
                                            continue
                                        psfCandidateList.append(psfCandidate)
                
                                        if display and displayExposure:
                                            ds9.dot("o", source.getX() - mi.getX0(), source.getY() - mi.getY0(),
                                                    size=4, frame=frame, ctype=ds9.CYAN)
                                    except Exception as err:
                                        pass # FIXME: should log this!
                                    break
                
                        return psfCandidateList
                
                class _PsfShapeHistogram(object):
                    """A class to represent a histogram of (Ixx, Iyy)
                    """
                    def __init__(self, xSize=32, ySize=32, ixxMax=30, iyyMax=30, detector=None, xy0=afwGeom.Point2D(0,0)):
                        """Construct a _PsfShapeHistogram
                
                        The maximum seeing FWHM that can be tolerated is [xy]Max/2.35 pixels.
                        The 'resolution' of stars vs galaxies/CRs is provided by [xy]Size/[xy]Max.
                        A larger (better) resolution may thresh the peaks, but a smaller (worse)
                        resolution will allow stars and galaxies/CRs to mix.  The disadvantages of
                        a larger (better) resolution can be compensated (some) by using multiple
                        histogram peaks.
                        
                        @input[in] [xy]Size: the size of the psfImage (in pixels)
                        @input[in] ixxMax, iyyMax: the maximum values for I[xy][xy]
                        """
                        self._xSize, self._ySize = xSize, ySize 
                        self._xMax, self._yMax = ixxMax, iyyMax
                        self._psfImage = afwImage.ImageF(afwGeom.ExtentI(xSize, ySize), 0)
                        self._num = 0
                        self.detector = detector
                        self.xy0 = xy0
                
                    def getImage(self):
                        return self._psfImage
                
                    def insert(self, source):
                        """Insert source into the histogram."""
                        
                        ixx, iyy, ixy = source.getIxx(), source.getIyy(), source.getIxy()
                        if self.detector:
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
314  <a href="#23486076">23486076</a> -             distorter = self.detector.getDistortion()</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
315  <a href="#23486076">23486076</a> -             if distorter:</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
301  <a href="#0332997a">0332997a</a> +             tanSys = self.detector.makeCameraSys(cameraGeom.TAN_PIXELS)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
302  <a href="#0332997a">0332997a</a> +             if tanSys in self.detector.getTransformMap():</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
303  <a href="#0332997a">0332997a</a> +                 pixToTanXYTransform = self.detector.getTransformMap()[tanSys]</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
316  <a href="#b0d8591f">b0d8591f</a> -                 p = afwGeom.Point2D(source.getX()+self.xy0.getX(),</div>
              ?                                                  ^  ------    ^  ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
304  <a href="#0332997a">0332997a</a> +                 p = afwGeom.Point2D(source.getX(), source.getY())</div>
              ?                                                  ^^ ++++     ^  ^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
317  <a href="#b0d8591f">b0d8591f</a> -                                     source.getY() + self.xy0.getY())</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
318  <a href="#23486076">23486076</a> -                 m = distorter.undistort(p, geomEllip.Quadrupole(ixx, iyy, ixy), self.detector)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
305  <a href="#0332997a">0332997a</a> +                 linTransform = pixToTanXYTransform.linearizeForwardTransform(p).getLinear()</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
306  <a href="#0332997a">0332997a</a> +                 m = geomEllip.Quadrupole(ixx, iyy, ixy)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
307  <a href="#0332997a">0332997a</a> +                 m.transform(linTransform)</div>
                                ixx, iyy, ixy = m.getIxx(), m.getIyy(), m.getIxy()
                            
                        try:
                            pixel = self.momentsToPixel(ixx, iyy)
                            i = int(pixel[0])
                            j = int(pixel[1])
                        except:
                            return 0
                
                        if i in range(0, self._xSize) and j in range(0, self._ySize):
                            if i != 0 or j != 0:
                                self._psfImage.set(i, j, self._psfImage.get(i, j) + 1)
                                self._num += 1
                                return 1                # success
                
                        return 0                        # failure
                
                    def momentsToPixel(self, ixx, iyy):
                        #x = math.sqrt(ixx) * self._xSize / self._xMax
                        #y = math.sqrt(iyy) * self._ySize / self._yMax
                        x = ixx * self._xSize / self._xMax
                        y = iyy * self._ySize / self._yMax
                        return x, y
                
                    def pixelToMoments(self, x, y):
                        """Given a peak position in self._psfImage, return the corresponding (Ixx, Iyy)"""
                
                        #ixx = (x*self._xMax/self._xSize)**2
                        #iyy = (y*self._yMax/self._ySize)**2
                        ixx = x*self._xMax/self._xSize
                        iyy = y*self._yMax/self._ySize
                        return ixx, iyy
                
                    def getClumps(self, sigma=1.0, display=False):
                        if self._num <= 0:
                            raise RuntimeError("No candidate PSF sources")
                
                        psfImage = self.getImage()
                        #
                        # Embed psfImage into a larger image so we can smooth when measuring it
                        #
                        width, height = psfImage.getWidth(), psfImage.getHeight()
                        largeImg = psfImage.Factory(afwGeom.ExtentI(2*width, 2*height))
                        largeImg.set(0)
                
                        bbox = afwGeom.BoxI(afwGeom.PointI(width, height), afwGeom.ExtentI(width, height))
                        subLargeImg = psfImage.Factory(largeImg, bbox, afwImage.LOCAL)
                        subLargeImg <<= psfImage
                        del subLargeImg
                        #
                        # Now measure that image, looking for the highest peak.  Start by building an Exposure
                        #
                        msk = afwImage.MaskU(largeImg.getDimensions())
                        msk.set(0)
                        var = afwImage.ImageF(largeImg.getDimensions())
                        var.set(1)
                        mpsfImage = afwImage.MaskedImageF(largeImg, msk, var)
                        mpsfImage.setXY0(afwGeom.PointI(-width, -height))
                        del msk
                        del var
                        exposure = afwImage.makeExposure(mpsfImage)
                        
                        #
                        # Next run an object detector
                        #
                        maxVal = afwMath.makeStatistics(psfImage, afwMath.MAX).getValue()
                        threshold = maxVal - sigma*math.sqrt(maxVal)
                        if threshold <= 0.0:
                            threshold = maxVal
                
                        threshold = afwDetection.Threshold(threshold)
                            
                        ds = afwDetection.FootprintSet(mpsfImage, threshold, "DETECTED")
                        #
                        # And measure it.  This policy isn't the one we use to measure
                        # Sources, it's only used to characterize this PSF histogram
                        #
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
385  <a href="#b0d8591f">b0d8591f</a> +         schema = afwTable.SourceTable.makeMinimalSchema()</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
396  <a href="#b0d8591f">b0d8591f</a> -         psfImageConfig = measurement.SourceMeasurementConfig()</div>
              ?                           ----------------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
386  <a href="#02463a4c">02463a4c</a> +         psfImageConfig = SingleFrameMeasurementConfig()</div>
              ?                          +++++++++
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
397  <a href="#b0d8591f">b0d8591f</a> -         psfImageConfig.slots.centroid = "centroid.sdss"</div>
              ?                                          ^       -----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
387  <a href="#02463a4c">02463a4c</a> +         psfImageConfig.slots.centroid = "base_SdssCentroid"</div>
              ?                                          ^^^^^^^^^^
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
398  <a href="#b0d8591f">b0d8591f</a> -         psfImageConfig.slots.psfFlux = "flux.psf"</div>
              ?                                             ----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
388  <a href="#02463a4c">02463a4c</a> +         psfImageConfig.slots.psfFlux = None #"base_PsfFlux"</div>
              ?                                        ++++++ +++++++ +
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
399  <a href="#b0d8591f">b0d8591f</a> -         psfImageConfig.slots.apFlux = "flux.naive"</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
389  <a href="#e9706731">e9706731</a> +         psfImageConfig.slots.apFlux = "base_CircularApertureFlux_0"</div>
                        psfImageConfig.slots.modelFlux = None
                        psfImageConfig.slots.instFlux = None
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
402  <a href="#f5b81018">f5b81018</a> -         psfImageConfig.slots.calibFlux = None</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
403  <a href="#b0d8591f">b0d8591f</a> -         psfImageConfig.slots.shape = "shape.sdss"</div>
              ?                                            -----
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
392  <a href="#02463a4c">02463a4c</a> +         psfImageConfig.slots.shape = "base_SdssShape"</div>
              ?                                       ++ +++++++
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
404  <a href="#b0d8591f">b0d8591f</a> -         psfImageConfig.algorithms.names = ["flags.pixel", "shape.sdss",</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
405  <a href="#b0d8591f">b0d8591f</a> -                                                        "flux.psf", "flux.naive"]</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
406  <a href="#b0d8591f">b0d8591f</a> -         psfImageConfig.centroider.name = "centroid.sdss"</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
393  <a href="#02463a4c">02463a4c</a> +         #   Formerly, this code had centroid.sdss, flux.psf, flux.naive,</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
394  <a href="#02463a4c">02463a4c</a> +         #   flags.pixel, and shape.sdss</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
395  <a href="#e9706731">e9706731</a> +         psfImageConfig.algorithms.names = ["base_SdssCentroid", "base_CircularApertureFlux", "base_SdssShape"]</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
407  <a href="#b0d8591f">b0d8591f</a> -         psfImageConfig.algorithms["flux.naive"].radius = 3.0</div>
              ?                                    ^   ------       ^^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
396  <a href="#e9706731">e9706731</a> +         psfImageConfig.algorithms["base_CircularApertureFlux"].radii = [3.0]</div>
              ?                                    ^^^^^^^^^^^^^^^^^^^^^^          ^   +   +
                        psfImageConfig.validate()
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
409  <a href="#ee2a2dd1">ee2a2dd1</a> -         </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
398  <a href="#02463a4c">02463a4c</a> +         task = SingleFrameMeasurementTask(schema, config=psfImageConfig)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
399  <a href="#877b9389">877b9389</a> + </div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
400  <a href="#0fa9ad60">0fa9ad60</a> +         catalog = afwTable.SourceCatalog(schema)</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
401  <a href="#877b9389">877b9389</a> + </div>
                        gaussianWidth = 1.5                       # Gaussian sigma for detection convolution
                        exposure.setPsf(algorithmsLib.DoubleGaussianPsf(11, 11, gaussianWidth))
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
404  <a href="#877b9389">877b9389</a> + </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
412  <a href="#b0d8591f">b0d8591f</a> -         schema = afwTable.SourceTable.makeMinimalSchema()</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
413  <a href="#b0d8591f">b0d8591f</a> -         measureSources = psfImageConfig.makeMeasureSources(schema)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
414  <a href="#0fa9ad60">0fa9ad60</a> -         catalog = afwTable.SourceCatalog(schema)</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
415  <a href="#0fa9ad60">0fa9ad60</a> -         psfImageConfig.slots.setupTable(catalog.table)</div>
                        ds.makeSources(catalog)
                        #
                        # Show us the Histogram
                        #
                        if display:
                            frame = 1
                            dispImage = mpsfImage.Factory(mpsfImage, afwGeom.BoxI(afwGeom.PointI(width, height),
                                                                                  afwGeom.ExtentI(width, height)),
                                                                                  afwImage.LOCAL)
                            ds9.mtv(dispImage,title="PSF Selection Image", frame=frame)
                
                
                        clumps = list()                 # List of clumps, to return
                        e = None                        # thrown exception
                        IzzMin = 1.0                    # Minimum value for second moments
                        IzzMax = (self._xSize/8.0)**2   # Max value ... clump r < clumpImgSize/8
                                                        # diameter should be < 1/4 clumpImgSize
                        apFluxes = []
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
423  <a href="#877b9389">877b9389</a> +         task.run(exposure, catalog)   # notes that this is backwards for the new framework</div>
                        for i, source in enumerate(catalog):
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
435  <a href="#85ab1211">85ab1211</a> -             measureSources.applyWithPeak(source, exposure)</div>
                            if source.getCentroidFlag():
                                continue
                            x, y = source.getX(), source.getY()
                
                            apFluxes.append(source.getApFlux())
                            
                            val = mpsfImage.getImage().get(int(x) + width, int(y) + height)
                
                            psfClumpIxx = source.getIxx()
                            psfClumpIxy = source.getIxy()
                            psfClumpIyy = source.getIyy()
                
                            if display:
                                if i == 0:
                                    ds9.pan(x, y, frame=frame)
                
                                ds9.dot("+", x, y, ctype=ds9.YELLOW, frame=frame)
                                ds9.dot("@:%g,%g,%g" % (psfClumpIxx, psfClumpIxy, psfClumpIyy), x, y,
                                        ctype=ds9.YELLOW, frame=frame)
                
                            if psfClumpIxx < IzzMin or psfClumpIyy < IzzMin:
                                psfClumpIxx = max(psfClumpIxx, IzzMin)
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
458  <a href="#1e155218">1e155218</a> -                 #psfClumpIxy = 0.0</div>
                                psfClumpIyy = max(psfClumpIyy, IzzMin)
                                if display:
                                    ds9.dot("@:%g,%g,%g" % (psfClumpIxx, psfClumpIxy, psfClumpIyy), x, y,
                                            ctype=ds9.RED, frame=frame)
                
                            det = psfClumpIxx*psfClumpIyy - psfClumpIxy*psfClumpIxy
                            try:
                                a, b, c = psfClumpIyy/det, -psfClumpIxy/det, psfClumpIxx/det
                            except ZeroDivisionError:
                                a, b, c = 1e4, 0, 1e4
                
                            clumps.append(Clump(peak=val, x=x, y=y, a=a, b=b, c=c,
                                                ixx=psfClumpIxx, ixy=psfClumpIxy, iyy=psfClumpIyy))
                
                        if len(clumps) == 0:
                            msg = "Failed to determine center of PSF clump"
                            if e:
                                msg += ": %s" % e
                            raise RuntimeError(msg)
                
                        # if it's all we got return it
                        if len(clumps) == 1:
                            return clumps
                        
                        # which clump is the best?
                        # if we've undistorted the moments, stars should only have 1 clump
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
485  <a href="#23486076">23486076</a> -         # use the apFlux from the clump measureSources, and take the highest</div>
              ?                                                ^^^^^ ^
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
473  <a href="#877b9389">877b9389</a> +         # use the apFlux from the clump measurement, and take the highest</div>
              ?                                                ^ ^^
                        # ... this clump has more psf star candidate neighbours than the others.
                
                        # get rid of any that are huge, and thus poorly defined
                        goodClumps = []
                        for clump in clumps:
                            if clump.ixx < IzzMax and clump.iyy < IzzMax:
                                goodClumps.append(clump)
                
                        # if culling > IzzMax cost us all clumps, we'll have to take what we have
                        if len(goodClumps) == 0:
                            goodClumps = clumps
                            
                        # use the 'brightest' clump
                        iBestClump = numpy.argsort(apFluxes)[0]
                        clumps = [clumps[iBestClump]]
                        return clumps
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="0fa9ad60"/></a>0fa9ad60</h3>

<pre>
commit 0fa9ad6092b97c9cd0e29827d107cfb1b2dd76fc
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Thu Feb 23 12:28:57 2012 -0500

    updated to reflect VectorT->CatalogT name change in afw
</pre>
<h3><a name="db780c9d"/></a>db780c9d</h3>

<pre>
commit db780c9d6edeec005939d142a9e4962e4d6d91d8
Author: bick <bick@git.lsstcorp.org>
Date:   Thu Sep 8 18:55:32 2011 +0000

    added distortion correction for psf selection.
</pre>
<h3><a name="45966371"/></a>45966371</h3>

<pre>
commit 45966371bba54ff7f79688b390a643dc1031921f
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Wed May 2 16:28:21 2012 -0400

    Improved diagnostics if input image is bad
</pre>
<h3><a name="1e155218"/></a>1e155218</h3>

<pre>
commit 1e155218c49dd990bf0ad4ce08f9cc82c8f03672
Author: Steven Bickerton <steven.bickerton@gmail.com>
Date:   Tue Sep 9 14:46:10 2014 +0900

    untabify
</pre>
<h3><a name="23486076"/></a>23486076</h3>

<pre>
commit 23486076c5cd0952678c469d8f80ffc908083cf2
Author: Steven Bickerton <bick@astro.princeton.edu>
Date:   Mon Jan 30 22:17:35 2012 -0600

    psfSelectTest passes ... but slow in determination.
</pre>
<h3><a name="f5b81018"/></a>f5b81018</h3>

<pre>
commit f5b810185e334994c0858ae6b617620d69aca510
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Wed Dec 10 16:34:07 2014 -0500

    Add support for new CalibFlux slot in measurement configuration
    
    By default, we'll use flux.naive for this slot, as that's appropriate for
    large apertures, and it's not being used for anything else.
</pre>
<h3><a name="85ab1211"/></a>85ab1211</h3>

<pre>
commit 85ab1211e8e50166554d0f5b1b70d95f9849901c
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Thu Jan 31 01:13:07 2013 -0500

    Give source measurement drivers a more uniform and readable API
    
    MeasureSources must now be informed upon creation whether it will be used for forced measurement.
    Renamed apply(source, exposure) to applyWithPeak.
    Renamed apply(...) with references to applyForced.
    All applyXX() methods now support centroid tweak-ups (with different defaults).
    Centroids are tweaked if centroider.name!=None even in forced photometry mode.
    Test code modified to test new centroid-tweaking options; see also #2612.
</pre>
<h3><a name="6b2aed4c"/></a>6b2aed4c</h3>

<pre>
commit 6b2aed4c875485a814fda58292889cdb505f1c78
Author: Paul Price <price@astro.princeton.edu>
Date:   Thu Feb 7 10:32:15 2013 -0500

    Fix list of badFlags for secondMomentStarSelector.
    
    Failure to prefix the flag names with "initial." meant that nothing was
    getting flagged.
    
    Failure to include "initial.flags.pixel.cr.center" meant that CRs were not
    getting flagged.
</pre>
<h3><a name="c69f4b13"/></a>c69f4b13</h3>

<pre>
commit c69f4b13633006844e060d4eb0e30a63973160bf
Author: Robert Lupton the Good <rhl@astro.princeton.edu>
Date:   Mon Dec 16 15:26:26 2013 -0500

    Handle bad detector geometry
</pre>
<h3><a name="3335fa28"/></a>3335fa28</h3>

<pre>
commit 3335fa289676e198b5a24b9f7bbb0abffd7bbb27
Author: Paul Price <price@astro.princeton.edu>
Date:   Wed May 30 12:53:50 2012 -0400

    Allow pixel size to be configurable.
</pre>
<h3><a name="32fb7e74"/></a>32fb7e74</h3>

<pre>
commit 32fb7e74fe346c1e2fb4df035a26696413d7167f
Author: Paul Price <price@astro.princeton.edu>
Date:   Fri Jun 22 22:39:16 2012 +0000

    Fixing star selection for SDSS Annis coadd filter=g field=132 run=7202: resolution of moments histogram was too small.  Also made the flags for bad sources configurable.
</pre>
<h3><a name="ee2a2dd1"/></a>ee2a2dd1</h3>

<pre>
commit ee2a2dd169d2ac63691de0eafa920f24475e4652
Author: bick <bick@git.lsstcorp.org>
Date:   Sun Oct 24 21:17:36 2010 +0000

    Reworked psf to handle different algorithms.
</pre>
<h3><a name="3c88733d"/></a>3c88733d</h3>

<pre>
commit 3c88733dd403eb202aeeb13aad2ae8f6cc391534
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Wed Jan 18 20:00:14 2012 -0500

    converted source measurement framework to use pex_config (requires at least rev 532d020 of pex_config)
</pre>
<h3><a name="b0d8591f"/></a>b0d8591f</h3>

<pre>
commit b0d8591f0e28fd34c95f1548ebda5695e46d2a22
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Mon Feb 20 18:14:44 2012 -0500

    merge from tickets/1843; tests/psf.py is failing, but it appears to be failing on master too
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="0fa9ad60"/></a>0fa9ad60</h3>

<pre>
commit 0fa9ad6092b97c9cd0e29827d107cfb1b2dd76fc
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Thu Feb 23 12:28:57 2012 -0500

    updated to reflect VectorT->CatalogT name change in afw
</pre>
<h3><a name="e9484f7d"/></a>e9484f7d</h3>

<pre>
commit e9484f7d9c0a64bd702f0dda68e5d8957db3db61
Author: Perry Gee <pgee@physics.ucdavis.edu>
Date:   Thu Jun 19 20:32:03 2014 -0500

    Change to tasks to allow them to work with both tableVersions
</pre>
<h3><a name="db780c9d"/></a>db780c9d</h3>

<pre>
commit db780c9d6edeec005939d142a9e4962e4d6d91d8
Author: bick <bick@git.lsstcorp.org>
Date:   Thu Sep 8 18:55:32 2011 +0000

    added distortion correction for psf selection.
</pre>
<h3><a name="b0d8591f"/></a>b0d8591f</h3>

<pre>
commit b0d8591f0e28fd34c95f1548ebda5695e46d2a22
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Mon Feb 20 18:14:44 2012 -0500

    merge from tickets/1843; tests/psf.py is failing, but it appears to be failing on master too
</pre>
<h3><a name="845de94d"/></a>845de94d</h3>

<pre>
commit 845de94d153ac790e5e7499785393ea407f4b45a
Author: rowen <rowen@git.lsstcorp.org>
Date:   Mon Feb 14 23:55:49 2011 +0000

    First cut at implementing ticket #1567.
    Includes Python registry for star selectors and another for PSF determiners.
    All existing unit tests pass.
    I also flattened the Python namespace to simplify use.
</pre>
<h3><a name="23486076"/></a>23486076</h3>

<pre>
commit 23486076c5cd0952678c469d8f80ffc908083cf2
Author: Steven Bickerton <bick@astro.princeton.edu>
Date:   Mon Jan 30 22:17:35 2012 -0600

    psfSelectTest passes ... but slow in determination.
</pre>
<h3><a name="0332997a"/></a>0332997a</h3>

<pre>
commit 0332997a6f5430001c459f1cdf986a0ad38607a5
Author: Russell Owen <rowen@uw.edu>
Date:   Fri Mar 7 12:03:52 2014 -0800

    Fixed remaining unit tests
</pre>
<h3><a name="bebc9415"/></a>bebc9415</h3>

<pre>
commit bebc94154236dc7c20d5b18796cbee3264bd25cf
Author: Russell Owen <rowen@uw.edu>
Date:   Thu Mar 13 11:28:45 2014 -0700

    Take advantage of TransformMap.get to simplify some code.
</pre>
<h3><a name="e9706731"/></a>e9706731</h3>

<pre>
commit e970673179cb0625f6efe5b78be04d6b96ad9f16
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Thu Jan 22 18:15:49 2015 -0500

    Update tests to adapt to removal of NaiveFlux and SincFlux
    
    These have now been replaced by CircularApertureFlux.
</pre>
<h3><a name="877b9389"/></a>877b9389</h3>

<pre>
commit 877b93894697b6533011e26a21cb704e9287d2b1
Author: pgee <pgee@pgeepc2.physics.ucdavis.edu>
Date:   Thu Jun 26 17:42:41 2014 -0700

    Change secondMomentStarSelector.py so that it can run under version 1 tables by remapping badFlags
</pre>
<h3><a name="02463a4c"/></a>02463a4c</h3>

<pre>
commit 02463a4c2836700ab2069e5e4839580aef2b0b3c
Author: pgee <pgee@pgeepc2.physics.ucdavis.edu>
Date:   Mon Dec 8 12:54:23 2014 -0800

    DM-1125 - alter star selector to use meas_base framework only
    
    After discussion, it was decided that we would continue to use the
    measurement framework for this selector, but only the meas_base one.
    
    bugfixes for review
</pre>
</div>


[Return to list](#homelist)
# <a name="src/PsfAttributes.cc"/></a>src/PsfAttributes.cc
### Diff:

<pre>
                // -*- LSST-C++ -*-
                
                /* 
                 * LSST Data Management System
                 * Copyright 2008, 2009, 2010 LSST Corporation.
                 * 
                 * This product includes software developed by the
                 * LSST Project (http://www.lsst.org/).
                 *
                 * This program is free software: you can redistribute it and/or modify
                 * it under the terms of the GNU General Public License as published by
                 * the Free Software Foundation, either version 3 of the License, or
                 * (at your option) any later version.
                 * 
                 * This program is distributed in the hope that it will be useful,
                 * but WITHOUT ANY WARRANTY; without even the implied warranty of
                 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                 * GNU General Public License for more details.
                 * 
                 * You should have received a copy of the LSST License Statement and 
                 * the GNU General Public License along with this program.  If not, 
                 * see <http://www.lsstcorp.org/LegalNotices/>.
                 */
                 
                /*!
                 * @brief Implementation of PSF code
                 *
                 * @file
                 *
                 * @ingroup algorithms
                 */
                #include <cmath>
                #include "lsst/base.h"
                #include "lsst/afw/geom/Point.h"
                #include "lsst/afw/geom/Angle.h"
                #include "lsst/afw/image/ImagePca.h"
                #include "lsst/afw/image/Exposure.h"
                #include "lsst/afw/math/SpatialCell.h"
                #include "lsst/afw/detection/Psf.h"
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
40   <a href="#e0c53995">e0c53995</a> + #include "lsst/afw/detection/Footprint.h"</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
41   <a href="#e0c53995">e0c53995</a> + #include "lsst/afw/table/Source.h"</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
42   <a href="#e0c53995">e0c53995</a> + #include "lsst/meas/base/GaussianCentroid.h"</div>
                #include "lsst/meas/algorithms/PSF.h"
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
41   <a href="#93f7a8d1">93f7a8d1</a> - #include "lsst/meas/algorithms/Measure.h"</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
42   <a href="#b0d8591f">b0d8591f</a> - #include "lsst/meas/algorithms/CentroidControl.h"</div>
                
                /************************************************************************************************************/
                
                namespace afwDetection = lsst::afw::detection;
                namespace afwGeom = lsst::afw::geom;
                namespace afwImage = lsst::afw::image;
                namespace afwMath = lsst::afw::math;
                
                namespace lsst {
                namespace meas {
                namespace algorithms {
                /**
                 * @brief Constructor for PsfAttributes
                 */
                PsfAttributes::PsfAttributes(
                        CONST_PTR(lsst::afw::detection::Psf) psf, ///< The psf whose attributes we want
                        int const iX,                       ///< the x position in the frame we want the attributes at
                        int const iY                        ///< the y position in the frame we want the attributes at
                                            )
                {
                    // N.b. (iX, iY) are ints so that we know this image is centered in the central pixel of _psfImage
                    _psfImage = psf->computeImage(afwGeom::PointD(iX, iY));
                }
                
                /**
                 * @brief Constructor for PsfAttributes
                 */
                PsfAttributes::PsfAttributes(
                        CONST_PTR(lsst::afw::detection::Psf) psf, ///< The psf whose attributes we want
                        lsst::afw::geom::Point2I const& cen       ///< the position in the frame we want the attributes at
                                            ) :
                    // N.b. cen is a PointI so that we know this image is centered in the central pixel of _psfImage
                    _psfImage(psf->computeImage(afwGeom::PointD(cen)))
                {
                }
                
                namespace {
                
                /*
                 * Return an estimate of <r> == <sqrt(x^2 + y^2)> for an image (i.e. sum(I*r)/sum(I))
                 *
                 * For a Gaussian N(0, alpha^2),  <r> = sqrt(pi/2) alpha
                 */
                template<typename ImageT>
                double
                computeFirstMoment(ImageT const& image,        // the data to process
                                   float const xCen, float const yCen // centre of object
                                  )
                {
                    double sum = 0.0;
                    double norm = 0.0;
                    for (int iY = 0; iY != image->getHeight(); ++iY) {
                        int iX = 0;
                        for (afwImage::Image<double>::x_iterator ptr = image->row_begin(iY),
                                                                 end = image->row_end(iY); ptr != end; ++ptr, ++iX) {
                            double const x = iX - xCen;
                            double const y = iY - yCen;
                            double const r = std::sqrt( x*x + y*y );
                            double const m = (*ptr)*r;
                            norm += *ptr;
                            sum += m;
                        }
                    }
                    
                    std::string errmsg("");
                    if (sum < 0.0) {
                        errmsg = "sum(I*r) is negative.  ";
                    }
                    if (norm <= 0.0) {
                        errmsg += "sum(I) is <= 0.";
                    }
                    if (errmsg != "") {
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
115  <a href="#997900a7">997900a7</a> -         throw LSST_EXCEPT(lsst::pex::exceptions::DomainErrorException, errmsg);</div>
              ?                                                             ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
116  <a href="#ed246562">ed246562</a> +         throw LSST_EXCEPT(lsst::pex::exceptions::DomainError, errmsg);</div>
                    }
                    
                    return sum/norm;
                }
                
                /*
                 * Return an estimate of <r^2> == <x^2 + y^2> for an image (i.e. sum(I*r^2)/sum(I))
                 *
                 * For a Gaussian N(0, alpha^2),  <r^2> = 2 alpha^2
                 */
                template<typename ImageT>
                double
                computeSecondMoment(ImageT const& image,        // the data to process
                                    float const xCen, float const yCen // centre of object
                                   )
                {
                    double sum = 0.0;
                    double norm = 0.0;
                    for (int iY = 0; iY != image->getHeight(); ++iY) {
                        int iX = 0;
                        for (afwImage::Image<double>::x_iterator ptr = image->row_begin(iY),
                                                                 end = image->row_end(iY); ptr != end; ++ptr, ++iX) {
                            double const x = iX - xCen;
                            double const y = iY - yCen;
                            double const r2 = x*x + y*y;
                            double const m = (*ptr)*r2;
                             norm += *ptr;
                            sum += m;
                        }
                    }
                    
                    std::string errmsg("");
                    if (sum < 0.0) {
                        errmsg = "sum(I*r*r) is negative.  ";
                    }
                    if (norm <= 0.0) {
                        errmsg += "sum(I) is <= 0.";
                    }
                    if (errmsg != "") {
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
155  <a href="#997900a7">997900a7</a> -         throw LSST_EXCEPT(lsst::pex::exceptions::DomainErrorException, errmsg);</div>
              ?                                                             ---------
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
156  <a href="#ed246562">ed246562</a> +         throw LSST_EXCEPT(lsst::pex::exceptions::DomainError, errmsg);</div>
                    }
                
                    return sum/norm;
                }
                    
                /*****************************************************************************/
                /*
                 * Calculate weighted moments of an object up to 2nd order
                 */
                template<typename ImageT>
                std::pair<bool, double>
                calcmom(ImageT const& image,                // the image data
                        float const xCen, float const yCen, // centre of object
                        double const w11                    // weights
                       )
                {
                    assert(w11 >= 0);                   /* i.e. it was set */
                    if (fabs(w11) > 1e6) {
                        return std::make_pair(false, std::numeric_limits<double>::quiet_NaN());
                    }
                
                    double sum = 0, sumrr = 0.0;
                
                    for (int i = 0; i < image.getHeight(); ++i) {
                        float const y = i - yCen;
                        float const y2 = y*y;
                        
                        typename ImageT::x_iterator ptr = image.row_begin(i);
                        for (int j = 0; j < image.getWidth(); ++j, ++ptr) {
                            float const x = j - xCen;
                            float const x2 = x*x;
                            float const expon = (x2 + y2)*w11;
                            
                            if (expon <= 14.0) {
                                float const weight = exp(-0.5*expon);
                                float const tmod = *ptr;
                                float const ymod = tmod*weight;
                                sum += ymod;
                                sumrr += (x2 + y2)*ymod;
                            }
                        }
                    }
                
                    if (sum <= 0 || sumrr < 0) {
                        return std::make_pair(false, std::numeric_limits<double>::quiet_NaN());
                    }
                
                    return std::make_pair(true, 0.5*sumrr/sum); // 0.5:  1-D moment
                }
                
                /*
                 * Return an estimate of <r^2> == <x^2 + y^2> for an image using adaptive moments
                 *
                 * For a Gaussian N(0, alpha^2),  <r^2> = 2 alpha^2
                 *
                 * This is basically the SdssShape code simplified for a circularly symmetrical case.  I don't want to call
                 * the shape code here as this class may well be moving to afw along with Psf
                 */
                template<typename ImageT>
                double
                computeSecondMomentAdaptive(ImageT const& image,        // the data to process
                                            float const xCen, float const yCen // centre of object
                                      )
                {
                    int const MAXIT = 100;              // \todo from Policy XXX
                    float const TOL = 0.0001;
                    double w11 = 0.5;                   // current weight for moments
                    float sigma11_ow_old = 1e6;         // previous version of sigma11_ow
                   
                    bool unweighted = false;            // do we need to use an unweighted moment?
                    int iter = 0;                       // iteration number
                    for (; iter < MAXIT; ++iter) {
                        std::pair<bool, double> moments = calcmom(*image, xCen, yCen, w11);
                        
                        if (not moments.first) {
                            unweighted = true;
                            break;
                        }
                /*
                 * Did we converge?
                 */
                        float const sigma11_ow = moments.second; // quadratic moments of weight*object
                
                        if (iter > 0 && fabs(sigma11_ow/sigma11_ow_old - 1.0) < TOL) {
                            break;                              /* yes; we converged */
                        }
                
                        sigma11_ow_old = sigma11_ow;
                /*
                 * Didn't converge, calculate new values for weighting function
                 *
                 * The product of two Gaussians is a Gaussian, the inverse-variances add
                 *
                 * We know sigma11_ow and sigma11W == 1/w11, the variances of the weighted object
                 * and of the weights themselves.  We can estimate the object's variance as
                 *   1/sigma11_ow - 1/sigma11W
                 * and, as we want to find a set of weights with the _same_ covariance as the
                 * object we take this to be the an estimate of our correct weights.
                 *
                 * N.b. This assumes that the object is roughly Gaussian.
                 * Consider the object:
                 *   O == delta(x + p) + delta(x - p)
                 * the covariance of the weighted object is equal to that of the unweighted
                 * object, and this prescription fails badly.  If we detect this, we set
                 * unweighted, and calculate the UNweighted moments
                 * instead.
                 */
                        w11 = 1/sigma11_ow - w11;       // inverse of new sigma11_ow
                
                        if (w11 <= 0) {                 // product-of-Gaussians assumption failed
                            unweighted = true;
                            break;
                        }
                    }
                /*
                 * Problems; try calculating the un-weighted moments
                 */
                    double sigma11W;                    // quadratic moment of the weighting function
                
                    if (iter == MAXIT || unweighted) {
                        w11 = 0;                        // => unweighted
                        std::pair<bool, double> moments = calcmom(*image, xCen, yCen, w11);
                
                        if (moments.first) {
                            sigma11W = moments.second;  // estimate of object moment
                        } else {
                            sigma11W = 1/12.0;          // a single pixel
                        }
                    } else {
                        sigma11W = 1/w11;
                    }
                
                    return 2*sigma11W;                  // 2:  <x^2> + <y^2>
                }
                
                }
                    
                /**
                 * @brief Compute the 'sigma' value for an equivalent gaussian psf.
                 *
                 */
                double PsfAttributes::computeGaussianWidth(PsfAttributes::Method how) const {
                    /*
                     * Estimate the PSF's center.  This *really* needs to be rewritten to avoid using MeasureSources;
                     * we shouldn't need to instantiate source objects just to measure an adaptive centroid!
                     */
                    afwImage::MaskedImage<double> mi = afwImage::MaskedImage<double>(_psfImage);
                    typedef afwImage::Exposure<double> Exposure;
                    Exposure::Ptr exposure = makeExposure(mi);
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
305  <a href="#93f7a8d1">93f7a8d1</a> - </div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
306  <a href="#8e73abc4">8e73abc4</a> -     afwDetection::Footprint::Ptr foot = boost::make_shared<afwDetection::Footprint>(exposure->getBBox());</div>
              ?                                                                                                       ---
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
306  <a href="#650c7401">650c7401</a> +     afwDetection::Footprint::Ptr foot = boost::make_shared<afwDetection::Footprint>(exposure->getBBox(</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
307  <a href="#650c7401">650c7401</a> +         afwImage::LOCAL));</div>
                
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
308  <a href="#b0d8591f">b0d8591f</a> -     GaussianCentroidControl ctrl;</div>
                    afwGeom::Point2D center(_psfImage->getX0() + _psfImage->getWidth()/2, 
                                            _psfImage->getY0() + _psfImage->getHeight()/2);
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
311  <a href="#e0c53995">e0c53995</a> +     double x(center.getX());</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
312  <a href="#e0c53995">e0c53995</a> +     double y(center.getY());</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
313  <a href="#8cffc17a">8cffc17a</a> +     afwGeom::Point2D fittedCenter = base::GaussianCentroidAlgorithm::fitCentroid(*_psfImage, x, y);</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
314  <a href="#8cffc17a">8cffc17a</a> +     double const xCen = fittedCenter.getX();</div>
<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
315  <a href="#8cffc17a">8cffc17a</a> +     double const yCen = fittedCenter.getY();</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
311  <a href="#b0d8591f">b0d8591f</a> -     afw::table::Schema schema = afw::table::SourceTable::makeMinimalSchema();</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
312  <a href="#b0d8591f">b0d8591f</a> -     MeasureSources ms = MeasureSourcesBuilder().addAlgorithm(ctrl).build(schema);</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
313  <a href="#b0d8591f">b0d8591f</a> -     PTR(afw::table::SourceTable) table = afw::table::SourceTable::make(schema);</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
314  <a href="#b0d8591f">b0d8591f</a> -     PTR(afw::table::SourceRecord) source = table->makeRecord();</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
315  <a href="#b0d8591f">b0d8591f</a> -     source->setFootprint(foot);</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
316  <a href="#b0d8591f">b0d8591f</a> -     ms.apply(*source, *exposure, center);</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
317  <a href="#b0d8591f">b0d8591f</a> -     afw::table::Centroid::MeasKey key = table->getSchema()[ctrl.name];</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
318  <a href="#b0d8591f">b0d8591f</a> -     afw::table::Centroid::MeasValue centroid = source->get(key);</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
319  <a href="#b0d8591f">b0d8591f</a> -     float const xCen = centroid.getX() - _psfImage->getX0();</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
320  <a href="#b0d8591f">b0d8591f</a> -     float const yCen = centroid.getY() - _psfImage->getY0();</div>
<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">
321  <a href="#997900a7">997900a7</a> - </div>
                    switch (how) {
                      case ADAPTIVE_MOMENT:
                        return ::sqrt(0.5*computeSecondMomentAdaptive(_psfImage, xCen, yCen));
                      case FIRST_MOMENT:
                          return ::sqrt(2.0/afwGeom::PI)*computeFirstMoment(_psfImage, xCen, yCen);
                      case SECOND_MOMENT:
                        return ::sqrt(0.5*computeSecondMoment(_psfImage, xCen, yCen));
                      case NOISE_EQUIVALENT:
                        return ::sqrt(computeEffectiveArea()/(4*afwGeom::PI));
                      case BICKERTON:
                        {
                            double sum = 0.0;
                            double norm = 0.0;
                            for (int iY = 0; iY != _psfImage->getHeight(); ++iY) {
                                int iX = 0;
                                for (afwImage::Image<double>::x_iterator ptr = _psfImage->row_begin(iY),
                                                                         end = _psfImage->row_end(iY); ptr != end;
                                     ++ptr, ++iX) {
                                    double const x = iX - xCen;
                                    double const y = iY - yCen;
                                    double const r = std::sqrt( x*x + y*y );
                                    double const m = (*ptr)*r;
                                    norm += (*ptr)*(*ptr);
                                    sum += m*m;
                                }
                            }
                            return sqrt(sum/norm);
                        }
                      default:
                        abort();
                    }
                }
                    
                /**
                 * @brief Compute the effective area of the psf ( sum(I)^2/sum(I^2) )
                 *
                 */
                double PsfAttributes::computeEffectiveArea() const {
                    
                    double sum = 0.0;
                    double sumsqr = 0.0;
                    for (int iY = 0; iY != _psfImage->getHeight(); ++iY) {
                        afwImage::Image<double>::x_iterator end = _psfImage->row_end(iY);
                        for (afwImage::Image<double>::x_iterator ptr = _psfImage->row_begin(iY); ptr != end; ++ptr) {
                            sum += *ptr;
                            sumsqr += (*ptr)*(*ptr);
                        }
                    }
                    return sum*sum/sumsqr;
                }
                
                }}}
</pre>
[Return to list](#homelist)


<div style="background-color:Khaki; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_hsc/meas_algorithms/</h2>
<h3><a name="997900a7"/></a>997900a7</h3>

<pre>
commit 997900a75b79e231145b6999c53fd2976980c1d4
Author: rhl <rhl@git.lsstcorp.org>
Date:   Wed May 19 14:36:16 2010 +0000

    Cleanup of PsfAttributes; moved implementation to separate file
</pre>
<h3><a name="8e73abc4"/></a>8e73abc4</h3>

<pre>
commit 8e73abc463935af0a052fe00c0812aa55c889464
Author: price <price@git.lsstcorp.org>
Date:   Mon Nov 14 19:42:25 2011 +0000

    Cleaning up Algorithm.h.  Moved ExposurePatch to new header file.  Removing namespace declarations from header files prompted fixes to some source files.
</pre>
<h3><a name="b0d8591f"/></a>b0d8591f</h3>

<pre>
commit b0d8591f0e28fd34c95f1548ebda5695e46d2a22
Author: Jim Bosch <jbosch@astro.princeton.edu>
Date:   Mon Feb 20 18:14:44 2012 -0500

    merge from tickets/1843; tests/psf.py is failing, but it appears to be failing on master too
</pre>
<h3><a name="93f7a8d1"/></a>93f7a8d1</h3>

<pre>
commit 93f7a8d14d2c5d36dc733d53719c4a2af9e5f052
Author: rhl <rhl@git.lsstcorp.org>
Date:   Wed Aug 4 21:24:20 2010 +0000

    PsfAttributes needs to centroid the object, and handle XY0 correctly
</pre>
</div>


<div style="background-color:LightBlue; margin-left: 20px; margin-right: 20px; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;">

<h2>Commits in /Users/nate/repos_lsst/meas_algorithms/</h2>
<h3><a name="650c7401"/></a>650c7401</h3>

<pre>
commit 650c7401aa36fb940d0ef40084801b04abc1ecd5
Author: Russell Owen <rowen@uw.edu>
Date:   Thu Sep 11 14:56:21 2014 -0700

    FIxed remaining instances where getBBox image origin not specified
</pre>
<h3><a name="e0c53995"/></a>e0c53995</h3>

<pre>
commit e0c5399542b1906c46316262cf9f39f3e0807254
Author: pgee <pgee@pgeepc2.physics.ucdavis.edu>
Date:   Thu Mar 12 14:33:02 2015 -0700

    Remove files not longer needs once measurement is removed from meas_algorithms
    
    DM-420 changes to retained files for removal of measurement
</pre>
<h3><a name="ed246562"/></a>ed246562</h3>

<pre>
commit ed2465629cb2a0b4fe5aedeb9f447da02cf38736
Author: Russell Owen <rowen@uw.edu>
Date:   Tue Jun 17 16:16:40 2014 -0700

    Renamed exceptions
</pre>
<h3><a name="8cffc17a"/></a>8cffc17a</h3>

<pre>
commit 8cffc17a6d7cb20dd0e247c2696750bdc3ccc93c
Author: Perry Gee <pgee@physics.ucdavis.edu>
Date:   Sat Mar 14 21:18:25 2015 -0500

    Changes for review and removal of Version0FlagMapper
    
    Other fixes for review
</pre>
</div>


[Return to list](#homelist)
